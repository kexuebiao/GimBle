// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GimKit
import AVFoundation
import CoreBluetooth
import CoreMedia
import Foundation
@_exported import GimKit
import MediaPlayer
import Swift
import SystemConfiguration
import UIKit
public class MemoGlobMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case PartIndex
    case Memo
    case MessageNumber
    case MessageIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getPartIndex() -> Swift.UInt32?
  public func setPartIndex(_ partIndex: Swift.UInt32)
  public func getNumMemo() -> Swift.Int
  public func getMemo(_ index: Swift.Int) -> Swift.UInt8?
  public func setMemo(_ index: Swift.Int, _ memo: Swift.UInt8)
  public func getMessageNumber() -> Swift.UInt16?
  public func setMessageNumber(_ messageNumber: Swift.UInt16)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum ExdLayout : Swift.UInt8 {
  case FullScreen
  case HalfVertical
  case HalfHorizontal
  case HalfVerticalRightSplit
  case HalfHorizontalBottomSplit
  case FullQuarterSplit
  case HalfVerticalLeftSplit
  case HalfHorizontalTopSplit
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class ZonesTargetMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MaxHeartRate
    case ThresholdHeartRate
    case FunctionalThresholdPower
    case HrCalcType
    case PwrCalcType
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMaxHeartRate() -> Swift.UInt8?
  public func setMaxHeartRate(_ maxHeartRate: Swift.UInt8)
  public func getThresholdHeartRate() -> Swift.UInt8?
  public func setThresholdHeartRate(_ thresholdHeartRate: Swift.UInt8)
  public func getFunctionalThresholdPower() -> Swift.UInt16?
  public func setFunctionalThresholdPower(_ functionalThresholdPower: Swift.UInt16)
  public func getHrCalcType() -> GimKit.HrZoneCalc?
  public func setHrCalcType(_ hrCalcType: GimKit.HrZoneCalc)
  public func getPwrCalcType() -> GimKit.PwrZoneCalc?
  public func setPwrCalcType(_ pwrCalcType: GimKit.PwrZoneCalc)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct LegCurlExerciseName {
  public static let LegCurl: Swift.UInt16
  public static let WeightedLegCurl: Swift.UInt16
  public static let GoodMorning: Swift.UInt16
  public static let SeatedBarbellGoodMorning: Swift.UInt16
  public static let SingleLegBarbellGoodMorning: Swift.UInt16
  public static let SingleLegSlidingLegCurl: Swift.UInt16
  public static let SlidingLegCurl: Swift.UInt16
  public static let SplitBarbellGoodMorning: Swift.UInt16
  public static let SplitStanceExtension: Swift.UInt16
  public static let StaggeredStanceGoodMorning: Swift.UInt16
  public static let SwissBallHipRaiseAndLegCurl: Swift.UInt16
  public static let ZercherGoodMorning: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum RiderPositionType : Swift.UInt8 {
  case Seated
  case Standing
  case TransitionToSeated
  case TransitionToStanding
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum DayOfWeek : Swift.UInt8 {
  case Sunday
  case Monday
  case Tuesday
  case Wednesday
  case Thursday
  case Friday
  case Saturday
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct SportBits2 {
  public static let Mountaineering: Swift.UInt8
  public static let Hiking: Swift.UInt8
  public static let Multisport: Swift.UInt8
  public static let Paddling: Swift.UInt8
  public static let Flying: Swift.UInt8
  public static let EBiking: Swift.UInt8
  public static let Motorcycling: Swift.UInt8
  public static let Boating: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum TimeMode : Swift.UInt8 {
  case Hour12
  case Hour24
  case Military
  case Hour12WithSeconds
  case Hour24WithSeconds
  case Utc
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class FileIdMesg : GimKit.Mesg {
  public enum ProductSubfield : Swift.UInt16 {
    case GarminProduct
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case `Type`
    case Manufacturer
    case Product
    case SerialNumber
    case TimeCreated
    case Number
    case ProductName
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getType() -> GimKit.FitFileType?
  public func setType(_ type: GimKit.FitFileType)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  public func getProduct() -> Swift.UInt16?
  public func setProduct(_ product: Swift.UInt16)
  public func getGarminProduct() -> Swift.UInt16?
  public func setGarminProduct(_ garminProduct: Swift.UInt16)
  public func getSerialNumber() -> Swift.UInt32?
  public func setSerialNumber(_ serialNumber: Swift.UInt32)
  public func getTimeCreated() -> GimKit.FitDateTime?
  public func setTimeCreated(_ timeCreated: GimKit.FitDateTime)
  public func getNumber() -> Swift.UInt16?
  public func setNumber(_ number: Swift.UInt16)
  public func getProductName() -> [Swift.UInt8]?
  public func getProductNameAsString() -> Swift.String?
  public func setProductName(_ productName: Swift.String)
  public func setProductName(_ productName: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct CourseCapabilities {
  public static let Processed: Swift.UInt32
  public static let Valid: Swift.UInt32
  public static let Time: Swift.UInt32
  public static let Distance: Swift.UInt32
  public static let Position: Swift.UInt32
  public static let HeartRate: Swift.UInt32
  public static let Power: Swift.UInt32
  public static let Cadence: Swift.UInt32
  public static let Training: Swift.UInt32
  public static let Navigation: Swift.UInt32
  public static let Bikeway: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public enum AntNetwork : Swift.UInt8 {
  case Public
  case Antplus
  case Antfs
  case Private
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct SetType {
  public static let Rest: Swift.UInt8
  public static let Active: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum DiveGasStatus : Swift.UInt8 {
  case Disabled
  case Enabled
  case BackupOnly
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum ProtocolVersion {
  case v10
  case v20
  public static func == (a: GimKit.ProtocolVersion, b: GimKit.ProtocolVersion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension ProtocolVersion {
  public func getMajorVersion() -> Swift.UInt8
  public func getMinorVersion() -> Swift.UInt8
  public func getVersionByte() -> Swift.UInt8
}
public struct Fit {
  public static let protocolVersionMajorShift: Swift.Int
  public static let protocolVersionMajorMask: (Swift.UInt8)
  public static let protocolVersion: Swift.UInt8
  public static let protocolMajorVersion: Swift.UInt8
  public static let protocolMinorVersion: Swift.UInt8
  public static let profileVersion: Swift.UInt16
  public static let profileMajorVersion: Swift.UInt16
  public static let profileMinorVersion: Swift.UInt16
  public static let headerTypeMask: Swift.UInt8
  public static let compressedHeaderMask: Swift.UInt8
  public static let compressedTimeMask: Swift.UInt8
  public static let compressedLocalMesgNumMask: Swift.UInt8
  public static let mesgDefinitionMask: Swift.UInt8
  public static let devDataMask: Swift.UInt8
  public static let mesgHeaderMask: Swift.UInt8
  public static let localMesgNumMask: Swift.UInt8
  public static let maxLocalMesgs: Swift.UInt8
  public static let mesgDefinitionReserved: Swift.UInt8
  public static let littleEndian: Swift.UInt8
  public static let bigEndian: Swift.UInt8
  public static let maxMesgSize: Swift.UInt8
  public static let maxFieldSize: Swift.UInt8
  public static let headerWithCRCSize: Swift.UInt8
  public static let headerWithoutCRCSize: (Swift.UInt8)
  public static let fieldNumInvalid: Swift.UInt8
  public static let fieldNumTimeStamp: Swift.UInt8
  public static let subfieldIndexMainField: Swift.UInt16
  public static let subfieldIndexActiveSubfield: Swift.UInt16
  public static let subfieldNameMainField: Swift.String
  public static var baseType: [GimKit.Fit.FitType] {
    get
  }
  public struct FitType {
    public var endianAbility: Swift.Bool
    public var baseTypeField: Swift.UInt8
    public var typeName: Swift.String
    public var invalidValue: Any
    public var size: Swift.UInt8
    public var isSigned: Swift.Bool
    public var isInteger: Swift.Bool
  }
  public static var Enum: Swift.UInt8
  public static var SInt8: Swift.UInt8
  public static var UInt8: Swift.UInt8
  public static var SInt16: Swift.UInt8
  public static var UInt16: Swift.UInt8
  public static var SInt32: Swift.UInt8
  public static var UInt32: Swift.UInt8
  public static var String: Swift.UInt8
  public static var Float32: Swift.UInt8
  public static var Float64: Swift.UInt8
  public static var UInt8z: Swift.UInt8
  public static var UInt16z: Swift.UInt8
  public static var UInt32z: Swift.UInt8
  public static var Byte: Swift.UInt8
  public static var SInt64: Swift.UInt8
  public static var UInt64: Swift.UInt8
  public static var UInt64z: Swift.UInt8
  public static var baseTypeNumMask: Swift.UInt8
}
extension Array where Element == Swift.UInt8 {
  public var hexString: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class DeveloperFieldDescription {
  public var applicationVersion: Swift.UInt32 {
    get
  }
  public var applicationId: [Swift.UInt8] {
    get
  }
  public var fieldDefinitionNumber: Swift.UInt8 {
    get
  }
  @objc deinit
}
public typealias CustomMappingKeyValueTuple = (Swift.Int, GimKit.MappingPropertyHandler)
public class MappingPropertyHandler {
  public init(rawPaths: [Swift.String]?, assignmentClosure: ((Any?) -> (Any?))?, takeValueClosure: ((Any?) -> (Any?))?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HelpingMapper {
  public func specify<T>(property: inout T, name: Swift.String)
  public func specify<T>(property: inout T, converter: @escaping (Swift.String) -> T)
  public func specify<T>(property: inout T, name: Swift.String?, converter: ((Swift.String) -> T)?)
  public func exclude<T>(property: inout T)
  @objc deinit
}
infix operator <-- : LogicalConjunctionPrecedence
public func <-- <T>(property: inout T, name: Swift.String) -> GimKit.CustomMappingKeyValueTuple
public func <-- <T>(property: inout T, names: [Swift.String]) -> GimKit.CustomMappingKeyValueTuple
public func <-- <Transform>(property: inout Transform.Object, transformer: Transform) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: (Swift.String?, Transform?)) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: ([Swift.String], Transform?)) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: Transform) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: (Swift.String?, Transform?)) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: ([Swift.String], Transform?)) -> GimKit.CustomMappingKeyValueTuple where Transform : GimKit.TransformType
infix operator <<< : AssignmentPrecedence
public func <<< (mapper: GimKit.HelpingMapper, mapping: GimKit.CustomMappingKeyValueTuple)
public func <<< (mapper: GimKit.HelpingMapper, mappings: [GimKit.CustomMappingKeyValueTuple])
infix operator >>> : AssignmentPrecedence
public func >>> <T>(mapper: GimKit.HelpingMapper, property: inout T)
public class ActivityMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TotalTimerTime
    case NumSessions
    case `Type`
    case Event
    case EventType
    case LocalTimestamp
    case EventGroup
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTotalTimerTime() -> Swift.UInt32?
  public func setTotalTimerTime(_ totalTimerTime: Swift.UInt32)
  public func getNumSessions() -> Swift.UInt16?
  public func setNumSessions(_ numSessions: Swift.UInt16)
  public func getType() -> GimKit.Activity?
  public func setType(_ type: GimKit.Activity)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getLocalTimestamp() -> Swift.UInt32?
  public func setLocalTimestamp(_ localTimestamp: Swift.UInt32)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class SegmentLeaderboardEntryMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Name
    case `Type`
    case GroupPrimaryKey
    case ActivityId
    case SegmentTime
    case ActivityIdString
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getType() -> GimKit.SegmentLeaderboardType?
  public func setType(_ type: GimKit.SegmentLeaderboardType)
  public func getGroupPrimaryKey() -> Swift.UInt32?
  public func setGroupPrimaryKey(_ groupPrimaryKey: Swift.UInt32)
  public func getActivityId() -> Swift.UInt32?
  public func setActivityId(_ activityId: Swift.UInt32)
  public func getSegmentTime() -> Swift.Float32?
  public func setSegmentTime(_ segmentTime: Swift.Float32)
  public func getActivityIdString() -> [Swift.UInt8]?
  public func getActivityIdStringAsString() -> Swift.String?
  public func setActivityIdString(_ activityIdString: Swift.String)
  public func setActivityIdString(_ activityIdString: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class AntRxMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case FractionalTimestamp
    case MesgId
    case MesgData
    case ChannelNumber
    case Data
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getFractionalTimestamp() -> Swift.Float32?
  public func setFractionalTimestamp(_ fractionalTimestamp: Swift.Float32)
  public func getMesgId() -> Swift.UInt8?
  public func setMesgId(_ mesgId: Swift.UInt8)
  public func getNumMesgData() -> Swift.Int
  public func getMesgData(_ index: Swift.Int) -> Swift.UInt8?
  public func setMesgData(_ index: Swift.Int, _ mesgData: Swift.UInt8)
  public func getChannelNumber() -> Swift.UInt8?
  public func setChannelNumber(_ channelNumber: Swift.UInt8)
  public func getNumData() -> Swift.Int
  public func getData(_ index: Swift.Int) -> Swift.UInt8?
  public func setData(_ index: Swift.Int, _ data: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class SegmentFileMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case FileUuid
    case Enabled
    case UserProfilePrimaryKey
    case LeaderType
    case LeaderGroupPrimaryKey
    case LeaderActivityId
    case LeaderActivityIdString
    case DefaultRaceLeader
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getFileUuid() -> [Swift.UInt8]?
  public func getFileUuidAsString() -> Swift.String?
  public func setFileUuid(_ fileUuid: Swift.String)
  public func setFileUuid(_ fileUuid: [Swift.UInt8])
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getUserProfilePrimaryKey() -> Swift.UInt32?
  public func setUserProfilePrimaryKey(_ userProfilePrimaryKey: Swift.UInt32)
  public func getNumLeaderType() -> Swift.Int
  public func getLeaderType(_ index: Swift.Int) -> GimKit.SegmentLeaderboardType?
  public func setLeaderType(_ index: Swift.Int, _ leaderType: GimKit.SegmentLeaderboardType)
  public func getNumLeaderGroupPrimaryKey() -> Swift.Int
  public func getLeaderGroupPrimaryKey(_ index: Swift.Int) -> Swift.UInt32?
  public func setLeaderGroupPrimaryKey(_ index: Swift.Int, _ leaderGroupPrimaryKey: Swift.UInt32)
  public func getNumLeaderActivityId() -> Swift.Int
  public func getLeaderActivityId(_ index: Swift.Int) -> Swift.UInt32?
  public func setLeaderActivityId(_ index: Swift.Int, _ leaderActivityId: Swift.UInt32)
  public func getLeaderActivityIdString() -> [Swift.UInt8]?
  public func getLeaderActivityIdStringAsString() -> Swift.String?
  public func setLeaderActivityIdString(_ leaderActivityIdString: Swift.String)
  public func setLeaderActivityIdString(_ leaderActivityIdString: [Swift.UInt8])
  public func getDefaultRaceLeader() -> Swift.UInt8?
  public func setDefaultRaceLeader(_ defaultRaceLeader: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct LungeExerciseName {
  public static let OverheadLunge: Swift.UInt16
  public static let LungeMatrix: Swift.UInt16
  public static let WeightedLungeMatrix: Swift.UInt16
  public static let AlternatingBarbellForwardLunge: Swift.UInt16
  public static let AlternatingDumbbellLungeWithReach: Swift.UInt16
  public static let BackFootElevatedDumbbellSplitSquat: Swift.UInt16
  public static let BarbellBoxLunge: Swift.UInt16
  public static let BarbellBulgarianSplitSquat: Swift.UInt16
  public static let BarbellCrossoverLunge: Swift.UInt16
  public static let BarbellFrontSplitSquat: Swift.UInt16
  public static let BarbellLunge: Swift.UInt16
  public static let BarbellReverseLunge: Swift.UInt16
  public static let BarbellSideLunge: Swift.UInt16
  public static let BarbellSplitSquat: Swift.UInt16
  public static let CoreControlRearLunge: Swift.UInt16
  public static let DiagonalLunge: Swift.UInt16
  public static let DropLunge: Swift.UInt16
  public static let DumbbellBoxLunge: Swift.UInt16
  public static let DumbbellBulgarianSplitSquat: Swift.UInt16
  public static let DumbbellCrossoverLunge: Swift.UInt16
  public static let DumbbellDiagonalLunge: Swift.UInt16
  public static let DumbbellLunge: Swift.UInt16
  public static let DumbbellLungeAndRotation: Swift.UInt16
  public static let DumbbellOverheadBulgarianSplitSquat: Swift.UInt16
  public static let DumbbellReverseLungeToHighKneeAndPress: Swift.UInt16
  public static let DumbbellSideLunge: Swift.UInt16
  public static let ElevatedFrontFootBarbellSplitSquat: Swift.UInt16
  public static let FrontFootElevatedDumbbellSplitSquat: Swift.UInt16
  public static let GunslingerLunge: Swift.UInt16
  public static let LawnmowerLunge: Swift.UInt16
  public static let LowLungeWithIsometricAdduction: Swift.UInt16
  public static let LowSideToSideLunge: Swift.UInt16
  public static let Lunge: Swift.UInt16
  public static let WeightedLunge: Swift.UInt16
  public static let LungeWithArmReach: Swift.UInt16
  public static let LungeWithDiagonalReach: Swift.UInt16
  public static let LungeWithSideBend: Swift.UInt16
  public static let OffsetDumbbellLunge: Swift.UInt16
  public static let OffsetDumbbellReverseLunge: Swift.UInt16
  public static let OverheadBulgarianSplitSquat: Swift.UInt16
  public static let OverheadDumbbellReverseLunge: Swift.UInt16
  public static let OverheadDumbbellSplitSquat: Swift.UInt16
  public static let OverheadLungeWithRotation: Swift.UInt16
  public static let ReverseBarbellBoxLunge: Swift.UInt16
  public static let ReverseBoxLunge: Swift.UInt16
  public static let ReverseDumbbellBoxLunge: Swift.UInt16
  public static let ReverseDumbbellCrossoverLunge: Swift.UInt16
  public static let ReverseDumbbellDiagonalLunge: Swift.UInt16
  public static let ReverseLungeWithReachBack: Swift.UInt16
  public static let WeightedReverseLungeWithReachBack: Swift.UInt16
  public static let ReverseLungeWithTwistAndOverheadReach: Swift.UInt16
  public static let WeightedReverseLungeWithTwistAndOverheadReach: Swift.UInt16
  public static let ReverseSlidingBoxLunge: Swift.UInt16
  public static let WeightedReverseSlidingBoxLunge: Swift.UInt16
  public static let ReverseSlidingLunge: Swift.UInt16
  public static let WeightedReverseSlidingLunge: Swift.UInt16
  public static let RunnersLungeToBalance: Swift.UInt16
  public static let WeightedRunnersLungeToBalance: Swift.UInt16
  public static let ShiftingSideLunge: Swift.UInt16
  public static let SideAndCrossoverLunge: Swift.UInt16
  public static let WeightedSideAndCrossoverLunge: Swift.UInt16
  public static let SideLunge: Swift.UInt16
  public static let WeightedSideLunge: Swift.UInt16
  public static let SideLungeAndPress: Swift.UInt16
  public static let SideLungeJumpOff: Swift.UInt16
  public static let SideLungeSweep: Swift.UInt16
  public static let WeightedSideLungeSweep: Swift.UInt16
  public static let SideLungeToCrossoverTap: Swift.UInt16
  public static let WeightedSideLungeToCrossoverTap: Swift.UInt16
  public static let SideToSideLungeChops: Swift.UInt16
  public static let WeightedSideToSideLungeChops: Swift.UInt16
  public static let SiffJumpLunge: Swift.UInt16
  public static let WeightedSiffJumpLunge: Swift.UInt16
  public static let SingleArmReverseLungeAndPress: Swift.UInt16
  public static let SlidingLateralLunge: Swift.UInt16
  public static let WeightedSlidingLateralLunge: Swift.UInt16
  public static let WalkingBarbellLunge: Swift.UInt16
  public static let WalkingDumbbellLunge: Swift.UInt16
  public static let WalkingLunge: Swift.UInt16
  public static let WeightedWalkingLunge: Swift.UInt16
  public static let WideGripOverheadBarbellSplitSquat: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class BloodPressureMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case SystolicPressure
    case DiastolicPressure
    case MeanArterialPressure
    case Map3SampleMean
    case MapMorningValues
    case MapEveningValues
    case HeartRate
    case HeartRateType
    case Status
    case UserProfileIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getSystolicPressure() -> Swift.UInt16?
  public func setSystolicPressure(_ systolicPressure: Swift.UInt16)
  public func getDiastolicPressure() -> Swift.UInt16?
  public func setDiastolicPressure(_ diastolicPressure: Swift.UInt16)
  public func getMeanArterialPressure() -> Swift.UInt16?
  public func setMeanArterialPressure(_ meanArterialPressure: Swift.UInt16)
  public func getMap3SampleMean() -> Swift.UInt16?
  public func setMap3SampleMean(_ map3SampleMean: Swift.UInt16)
  public func getMapMorningValues() -> Swift.UInt16?
  public func setMapMorningValues(_ mapMorningValues: Swift.UInt16)
  public func getMapEveningValues() -> Swift.UInt16?
  public func setMapEveningValues(_ mapEveningValues: Swift.UInt16)
  public func getHeartRate() -> Swift.UInt8?
  public func setHeartRate(_ heartRate: Swift.UInt8)
  public func getHeartRateType() -> GimKit.HrType?
  public func setHeartRateType(_ heartRateType: GimKit.HrType)
  public func getStatus() -> GimKit.BpStatus?
  public func setStatus(_ status: GimKit.BpStatus)
  public func getUserProfileIndex() -> Swift.UInt16?
  public func setUserProfileIndex(_ userProfileIndex: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum ConnectionResult {
  case success(GimKit.PeripheralIdentifier)
  case failure(Swift.Error)
}
@_hasMissingDesignatedInitializers public class Profile {
  public enum Types {
    case Enum
    case Sint8
    case Uint8
    case Sint16
    case Uint16
    case Sint32
    case Uint32
    case String
    case Float32
    case Float64
    case Uint8z
    case Uint16z
    case Uint32z
    case Byte
    case Sint64
    case Uint64
    case Uint64z
    case Bool
    case File
    case MesgNum
    case Checksum
    case FileFlags
    case MesgCount
    case DateTime
    case LocalDateTime
    case MessageIndex
    case DeviceIndex
    case Gender
    case Language
    case LanguageBits0
    case LanguageBits1
    case LanguageBits2
    case LanguageBits3
    case LanguageBits4
    case TimeZone
    case DisplayMeasure
    case DisplayHeart
    case DisplayPower
    case DisplayPosition
    case Switch
    case Sport
    case SportBits0
    case SportBits1
    case SportBits2
    case SportBits3
    case SportBits4
    case SportBits5
    case SportBits6
    case SubSport
    case SportEvent
    case Activity
    case Intensity
    case SessionTrigger
    case AutolapTrigger
    case LapTrigger
    case TimeMode
    case BacklightMode
    case DateMode
    case BacklightTimeout
    case Event
    case EventType
    case TimerTrigger
    case FitnessEquipmentState
    case Tone
    case Autoscroll
    case ActivityClass
    case HrZoneCalc
    case PwrZoneCalc
    case WktStepDuration
    case WktStepTarget
    case Goal
    case GoalRecurrence
    case GoalSource
    case Schedule
    case CoursePoint
    case Manufacturer
    case GarminProduct
    case AntplusDeviceType
    case AntNetwork
    case WorkoutCapabilities
    case BatteryStatus
    case HrType
    case CourseCapabilities
    case Weight
    case WorkoutHr
    case WorkoutPower
    case BpStatus
    case UserLocalId
    case SwimStroke
    case ActivityType
    case ActivitySubtype
    case ActivityLevel
    case Side
    case LeftRightBalance
    case LeftRightBalance100
    case LengthType
    case DayOfWeek
    case ConnectivityCapabilities
    case WeatherReport
    case WeatherStatus
    case WeatherSeverity
    case WeatherSevereType
    case TimeIntoDay
    case LocaltimeIntoDay
    case StrokeType
    case BodyLocation
    case SegmentLapStatus
    case SegmentLeaderboardType
    case SegmentDeleteStatus
    case SegmentSelectionType
    case SourceType
    case LocalDeviceType
    case DisplayOrientation
    case WorkoutEquipment
    case WatchfaceMode
    case DigitalWatchfaceLayout
    case AnalogWatchfaceLayout
    case RiderPositionType
    case PowerPhaseType
    case CameraEventType
    case SensorType
    case BikeLightNetworkConfigType
    case CommTimeoutType
    case CameraOrientationType
    case AttitudeStage
    case AttitudeValidity
    case AutoSyncFrequency
    case ExdLayout
    case ExdDisplayType
    case ExdDataUnits
    case ExdQualifiers
    case ExdDescriptors
    case AutoActivityDetect
    case SupportedExdScreenLayouts
    case FitBaseType
    case TurnType
    case BikeLightBeamAngleMode
    case FitBaseUnit
    case SetType
    case ExerciseCategory
    case BenchPressExerciseName
    case CalfRaiseExerciseName
    case CardioExerciseName
    case CarryExerciseName
    case ChopExerciseName
    case CoreExerciseName
    case CrunchExerciseName
    case CurlExerciseName
    case DeadliftExerciseName
    case FlyeExerciseName
    case HipRaiseExerciseName
    case HipStabilityExerciseName
    case HipSwingExerciseName
    case HyperextensionExerciseName
    case LateralRaiseExerciseName
    case LegCurlExerciseName
    case LegRaiseExerciseName
    case LungeExerciseName
    case OlympicLiftExerciseName
    case PlankExerciseName
    case PlyoExerciseName
    case PullUpExerciseName
    case PushUpExerciseName
    case RowExerciseName
    case ShoulderPressExerciseName
    case ShoulderStabilityExerciseName
    case ShrugExerciseName
    case SitUpExerciseName
    case SquatExerciseName
    case TotalBodyExerciseName
    case TricepsExtensionExerciseName
    case WarmUpExerciseName
    case RunExerciseName
    case WaterType
    case TissueModelType
    case DiveGasStatus
    case DiveAlarmType
    case DiveBacklightMode
    case NumTypes
    public static func == (a: GimKit.Profile.Types, b: GimKit.Profile.Types) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func getMesg(globalMesgNum: Swift.UInt16) -> GimKit.Mesg
  public static func getField(globalMesgNum: Swift.UInt16, fieldNum: Swift.UInt8) -> GimKit.Field?
  public static func getField(globalMesgNum: Swift.UInt16, fieldName: Swift.String) -> GimKit.Field?
  @objc deinit
}
public class SegmentPointMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case PositionLat
    case PositionLong
    case Distance
    case Altitude
    case LeaderTime
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getPositionLat() -> Swift.Int32?
  public func setPositionLat(_ positionLat: Swift.Int32)
  public func getPositionLong() -> Swift.Int32?
  public func setPositionLong(_ positionLong: Swift.Int32)
  public func getDistance() -> Swift.Float32?
  public func setDistance(_ distance: Swift.Float32)
  public func getAltitude() -> Swift.Float32?
  public func setAltitude(_ altitude: Swift.Float32)
  public func getNumLeaderTime() -> Swift.Int
  public func getLeaderTime(_ index: Swift.Int) -> Swift.Float32?
  public func setLeaderTime(_ index: Swift.Int, _ leaderTime: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SwimStroke : Swift.UInt8 {
  case Freestyle
  case Backstroke
  case Breaststroke
  case Butterfly
  case Drill
  case Mixed
  case Im
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum LapTrigger : Swift.UInt8 {
  case Manual
  case Time
  case Distance
  case PositionStart
  case PositionLap
  case PositionWaypoint
  case PositionMarked
  case SessionEnd
  case FitnessEquipment
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class VideoClipMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ClipNumber
    case StartTimestamp
    case StartTimestampMs
    case EndTimestamp
    case EndTimestampMs
    case ClipStart
    case ClipEnd
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getClipNumber() -> Swift.UInt16?
  public func setClipNumber(_ clipNumber: Swift.UInt16)
  public func getStartTimestamp() -> GimKit.FitDateTime?
  public func setStartTimestamp(_ startTimestamp: GimKit.FitDateTime)
  public func getStartTimestampMs() -> Swift.UInt16?
  public func setStartTimestampMs(_ startTimestampMs: Swift.UInt16)
  public func getEndTimestamp() -> GimKit.FitDateTime?
  public func setEndTimestamp(_ endTimestamp: GimKit.FitDateTime)
  public func getEndTimestampMs() -> Swift.UInt16?
  public func setEndTimestampMs(_ endTimestampMs: Swift.UInt16)
  public func getClipStart() -> Swift.UInt32?
  public func setClipStart(_ clipStart: Swift.UInt32)
  public func getClipEnd() -> Swift.UInt32?
  public func setClipEnd(_ clipEnd: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class UserProfileMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case FriendlyName
    case Gender
    case Age
    case Height
    case Weight
    case Language
    case ElevSetting
    case WeightSetting
    case RestingHeartRate
    case DefaultMaxRunningHeartRate
    case DefaultMaxBikingHeartRate
    case DefaultMaxHeartRate
    case HrSetting
    case SpeedSetting
    case DistSetting
    case PowerSetting
    case ActivityClass
    case PositionSetting
    case TemperatureSetting
    case LocalId
    case GlobalId
    case WakeTime
    case SleepTime
    case HeightSetting
    case UserRunningStepLength
    case UserWalkingStepLength
    case DepthSetting
    case DiveCount
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getFriendlyName() -> [Swift.UInt8]?
  public func getFriendlyNameAsString() -> Swift.String?
  public func setFriendlyName(_ friendlyName: Swift.String)
  public func setFriendlyName(_ friendlyName: [Swift.UInt8])
  public func getGender() -> GimKit.FitGender?
  public func setGender(_ gender: GimKit.FitGender)
  public func getAge() -> Swift.UInt8?
  public func setAge(_ age: Swift.UInt8)
  public func getHeight() -> Swift.Float32?
  public func setHeight(_ height: Swift.Float32)
  public func getWeight() -> Swift.Float32?
  public func setWeight(_ weight: Swift.Float32)
  public func getLanguage() -> GimKit.Language?
  public func setLanguage(_ language: GimKit.Language)
  public func getElevSetting() -> GimKit.DisplayMeasure?
  public func setElevSetting(_ elevSetting: GimKit.DisplayMeasure)
  public func getWeightSetting() -> GimKit.DisplayMeasure?
  public func setWeightSetting(_ weightSetting: GimKit.DisplayMeasure)
  public func getRestingHeartRate() -> Swift.UInt8?
  public func setRestingHeartRate(_ restingHeartRate: Swift.UInt8)
  public func getDefaultMaxRunningHeartRate() -> Swift.UInt8?
  public func setDefaultMaxRunningHeartRate(_ defaultMaxRunningHeartRate: Swift.UInt8)
  public func getDefaultMaxBikingHeartRate() -> Swift.UInt8?
  public func setDefaultMaxBikingHeartRate(_ defaultMaxBikingHeartRate: Swift.UInt8)
  public func getDefaultMaxHeartRate() -> Swift.UInt8?
  public func setDefaultMaxHeartRate(_ defaultMaxHeartRate: Swift.UInt8)
  public func getHrSetting() -> GimKit.DisplayHeart?
  public func setHrSetting(_ hrSetting: GimKit.DisplayHeart)
  public func getSpeedSetting() -> GimKit.DisplayMeasure?
  public func setSpeedSetting(_ speedSetting: GimKit.DisplayMeasure)
  public func getDistSetting() -> GimKit.DisplayMeasure?
  public func setDistSetting(_ distSetting: GimKit.DisplayMeasure)
  public func getPowerSetting() -> GimKit.DisplayPower?
  public func setPowerSetting(_ powerSetting: GimKit.DisplayPower)
  public func getActivityClass() -> GimKit.ActivityClass?
  public func setActivityClass(_ activityClass: GimKit.ActivityClass)
  public func getPositionSetting() -> GimKit.DisplayPosition?
  public func setPositionSetting(_ positionSetting: GimKit.DisplayPosition)
  public func getTemperatureSetting() -> GimKit.DisplayMeasure?
  public func setTemperatureSetting(_ temperatureSetting: GimKit.DisplayMeasure)
  public func getLocalId() -> Swift.UInt16?
  public func setLocalId(_ localId: Swift.UInt16)
  public func getNumGlobalId() -> Swift.Int
  public func getGlobalId(_ index: Swift.Int) -> Swift.UInt8?
  public func setGlobalId(_ index: Swift.Int, _ globalId: Swift.UInt8)
  public func getWakeTime() -> Swift.UInt32?
  public func setWakeTime(_ wakeTime: Swift.UInt32)
  public func getSleepTime() -> Swift.UInt32?
  public func setSleepTime(_ sleepTime: Swift.UInt32)
  public func getHeightSetting() -> GimKit.DisplayMeasure?
  public func setHeightSetting(_ heightSetting: GimKit.DisplayMeasure)
  public func getUserRunningStepLength() -> Swift.Float32?
  public func setUserRunningStepLength(_ userRunningStepLength: Swift.Float32)
  public func getUserWalkingStepLength() -> Swift.Float32?
  public func setUserWalkingStepLength(_ userWalkingStepLength: Swift.Float32)
  public func getDepthSetting() -> GimKit.DisplayMeasure?
  public func setDepthSetting(_ depthSetting: GimKit.DisplayMeasure)
  public func getDiveCount() -> Swift.UInt32?
  public func setDiveCount(_ diveCount: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class OneDSensorCalibrationMesg : GimKit.Mesg {
  public enum CalibrationFactorSubfield : Swift.UInt16 {
    case BaroCalFactor
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case SensorType
    case CalibrationFactor
    case CalibrationDivisor
    case LevelShift
    case OffsetCal
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getSensorType() -> GimKit.SensorType?
  public func setSensorType(_ sensorType: GimKit.SensorType)
  public func getCalibrationFactor() -> Swift.UInt32?
  public func setCalibrationFactor(_ calibrationFactor: Swift.UInt32)
  public func getBaroCalFactor() -> Swift.UInt32?
  public func setBaroCalFactor(_ baroCalFactor: Swift.UInt32)
  public func getCalibrationDivisor() -> Swift.UInt32?
  public func setCalibrationDivisor(_ calibrationDivisor: Swift.UInt32)
  public func getLevelShift() -> Swift.UInt32?
  public func setLevelShift(_ levelShift: Swift.UInt32)
  public func getOffsetCal() -> Swift.Int32?
  public func setOffsetCal(_ offsetCal: Swift.Int32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GimKitXbikeData {
  @objc deinit
}
public enum DisplayPower : Swift.UInt8 {
  case Watts
  case PercentFtp
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class GoalMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Sport
    case SubSport
    case StartDate
    case EndDate
    case `Type`
    case Value
    case Repeat
    case TargetValue
    case Recurrence
    case RecurrenceValue
    case Enabled
    case Source
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getStartDate() -> GimKit.FitDateTime?
  public func setStartDate(_ startDate: GimKit.FitDateTime)
  public func getEndDate() -> GimKit.FitDateTime?
  public func setEndDate(_ endDate: GimKit.FitDateTime)
  public func getType() -> GimKit.Goal?
  public func setType(_ type: GimKit.Goal)
  public func getValue() -> Swift.UInt32?
  public func setValue(_ value: Swift.UInt32)
  public func getRepeat() -> GimKit.FitBool?
  public func setRepeat(_ repeats: GimKit.FitBool)
  public func getTargetValue() -> Swift.UInt32?
  public func setTargetValue(_ targetValue: Swift.UInt32)
  public func getRecurrence() -> GimKit.GoalRecurrence?
  public func setRecurrence(_ recurrence: GimKit.GoalRecurrence)
  public func getRecurrenceValue() -> Swift.UInt16?
  public func setRecurrenceValue(_ recurrenceValue: Swift.UInt16)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getSource() -> GimKit.GoalSource?
  public func setSource(_ source: GimKit.GoalSource)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class Decode {
  public var invalidDataSize: Swift.Bool
  weak public var delegate: GimKit.DecodeDelegate?
  public init()
  public func isFIT(_ fitData: GimKit.PositionableData) -> Swift.Bool
  public func checkIntegrity(_ fitData: GimKit.PositionableData) -> Swift.Bool
  public func read(_ fitData: GimKit.PositionableData) -> Swift.Bool
  public func read(_ fitData: GimKit.PositionableData, _ mode: GimKit.DecodeMode) -> Swift.Bool
  public func decodeNextMessage(_ fitData: GimKit.PositionableData)
  @objc deinit
}
public struct FitBaseType {
  public static let Enum: Swift.UInt8
  public static let Sint8: Swift.UInt8
  public static let Uint8: Swift.UInt8
  public static let Sint16: Swift.UInt8
  public static let Uint16: Swift.UInt8
  public static let Sint32: Swift.UInt8
  public static let Uint32: Swift.UInt8
  public static let String: Swift.UInt8
  public static let Float32: Swift.UInt8
  public static let Float64: Swift.UInt8
  public static let Uint8z: Swift.UInt8
  public static let Uint16z: Swift.UInt8
  public static let Uint32z: Swift.UInt8
  public static let Byte: Swift.UInt8
  public static let Sint64: Swift.UInt8
  public static let Uint64: Swift.UInt8
  public static let Uint64z: Swift.UInt8
  public static let Invalid: Swift.UInt8
  public static func isNumericInvalid(value: Swift.Int64, type: Swift.UInt8) -> Swift.Bool
}
public enum MultipleListenOption : Swift.Int {
  case trap
  case replaceable
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension GimKitManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  public func centralManager(central: CoreBluetooth.CBCentralManager!, didRetrievePeripherals peripherals: [Swift.AnyObject]!)
}
public class Mesg {
  public var fields: [GimKit.Field] {
    get
  }
  public var name: Swift.String
  public var num: Swift.UInt16
  public var localNum: Swift.UInt8 {
    get
    set
  }
  public var developerFields: Swift.Array<GimKit.DeveloperField> {
    get
  }
  public init(mesg: GimKit.Mesg?)
  public init(name: Swift.String, num: Swift.UInt16)
  convenience public init(fitData: GimKit.PositionableData, defnMesg: GimKit.MesgDefinition)
  public func read(inData: GimKit.PositionableData, defnMesg: GimKit.MesgDefinition)
  public func write(outData: GimKit.PositionableData)
  public func write(outData: GimKit.PositionableData, mesgDef: GimKit.MesgDefinition?)
  public func hasField(fieldNum: Swift.UInt8) -> Swift.Bool
  public func setDeveloperField(field: GimKit.DeveloperField)
  public func setField(field: GimKit.Field)
  public func insertField(index: Swift.Int32, field: GimKit.Field)
  public func setFields(mesg: GimKit.Mesg)
  public func getNumFields() -> Swift.Int
  public func getOverrideField(fieldNum: Swift.UInt8) -> Swift.Array<GimKit.FieldBase>
  public func getField(fieldNum: Swift.UInt8) -> GimKit.Field?
  public func getField(fieldName: Swift.String) -> GimKit.Field?
  public func getField(fieldName: Swift.String, checkMesgSupportForSubFields: Swift.Bool) -> GimKit.Field?
  public func getActiveSubFieldIndex(fieldNum: Swift.UInt8) -> Swift.UInt16
  public func GetActiveSubFieldName(fieldNum: Swift.UInt8) -> Swift.String
  public func removeField(field: GimKit.Field)
  public func getNumFieldValues(fieldNum: Swift.UInt8) -> Swift.Int
  public func getNumFieldValues(fieldName: Swift.String) -> Swift.Int
  public func getNumFieldValues(fieldNum: Swift.UInt8, subfieldIndex: Swift.UInt16) -> Swift.Int
  public func getNumFieldValues(fieldNum: Swift.UInt8, subfieldName: Swift.String) -> Swift.Int
  public func getFieldValue(fieldNum: Swift.UInt8) -> Any?
  public func getFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int) -> Any?
  public func getFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int, subFieldIndex: Swift.UInt16) -> Any?
  public func getFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int, subfieldName: Swift.String) -> Any?
  public func getFieldValue(name: Swift.String) -> Any?
  public func getFieldValue(name: Swift.String, fieldArrayIndex: Swift.Int) -> Any?
  public func getIsFieldAccumulated(num: Swift.UInt8) -> Swift.Bool
  public func setFieldValue(fieldNum: Swift.UInt8, value: Any)
  public func setFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int, value: Any)
  public func setFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int, value: Any, subfieldIndex: Swift.UInt16)
  public func setFieldValue(fieldNum: Swift.UInt8, fieldArrayIndex: Swift.Int, value: Any, subfieldName: Swift.String)
  public func setFieldValue(name: Swift.String, value: Any)
  public func setFieldValue(name: Swift.String, fieldArrayIndex: Swift.Int, value: Any)
  public func timestampToDate(timestamp: Swift.UInt32?) -> GimKit.FitDateTime?
  public func removeExpandedFields()
  public func expandComponents(accumulator: GimKit.Accumulator)
  @objc deinit
}
public enum DisplayMeasure : Swift.UInt8 {
  case Metric
  case Statute
  case Nautical
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum EventType : Swift.UInt8 {
  case Start
  case Stop
  case ConsecutiveDepreciated
  case Marker
  case StopAll
  case BeginDepreciated
  case EndDepreciated
  case EndAllDepreciated
  case StopDisable
  case StopDisableAll
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct SportBits5 {
  public static let WaterSkiing: Swift.UInt8
  public static let Kayaking: Swift.UInt8
  public static let Rafting: Swift.UInt8
  public static let Windsurfing: Swift.UInt8
  public static let Kitesurfing: Swift.UInt8
  public static let Tactical: Swift.UInt8
  public static let Jumpmaster: Swift.UInt8
  public static let Boxing: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum Activity : Swift.UInt8 {
  case Manual
  case AutoMultiSport
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum GimKitDeviceType : Swift.Int8, GimKit.HandyJSONEnum {
  case HEART_RATE_MONITOR
  case EXERCISE_BIKE
  case STRENGTH_DEVICE
  case XBIKE
  case UNKNOWN
  public init?(rawValue: Swift.Int8)
  public typealias RawValue = Swift.Int8
  public var rawValue: Swift.Int8 {
    get
  }
}
public struct MessageIndex {
  public static let Selected: Swift.UInt16
  public static let Reserved: Swift.UInt16
  public static let Mask: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class MonitoringMesg : GimKit.Mesg {
  public enum CyclesSubfield : Swift.UInt16 {
    case Steps
    case Strokes
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case DeviceIndex
    case Calories
    case Distance
    case Cycles
    case ActiveTime
    case ActivityType
    case ActivitySubtype
    case ActivityLevel
    case Distance16
    case Cycles16
    case ActiveTime16
    case LocalTimestamp
    case Temperature
    case TemperatureMin
    case TemperatureMax
    case ActivityTime
    case ActiveCalories
    case CurrentActivityTypeIntensity
    case TimestampMin8
    case Timestamp16
    case HeartRate
    case Intensity
    case DurationMin
    case Duration
    case Ascent
    case Descent
    case ModerateActivityMinutes
    case VigorousActivityMinutes
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getDeviceIndex() -> Swift.UInt8?
  public func setDeviceIndex(_ deviceIndex: Swift.UInt8)
  public func getCalories() -> Swift.UInt16?
  public func setCalories(_ calories: Swift.UInt16)
  public func getDistance() -> Swift.Float32?
  public func setDistance(_ distance: Swift.Float32)
  public func getCycles() -> Swift.Float32?
  public func setCycles(_ cycles: Swift.Float32)
  public func getSteps() -> Swift.UInt32?
  public func setSteps(_ steps: Swift.UInt32)
  public func getStrokes() -> Swift.Float32?
  public func setStrokes(_ strokes: Swift.Float32)
  public func getActiveTime() -> Swift.Float32?
  public func setActiveTime(_ activeTime: Swift.Float32)
  public func getActivityType() -> GimKit.ActivityType?
  public func setActivityType(_ activityType: GimKit.ActivityType)
  public func getActivitySubtype() -> GimKit.ActivitySubtype?
  public func setActivitySubtype(_ activitySubtype: GimKit.ActivitySubtype)
  public func getActivityLevel() -> GimKit.ActivityLevel?
  public func setActivityLevel(_ activityLevel: GimKit.ActivityLevel)
  public func getDistance16() -> Swift.UInt16?
  public func setDistance16(_ distance16: Swift.UInt16)
  public func getCycles16() -> Swift.UInt16?
  public func setCycles16(_ cycles16: Swift.UInt16)
  public func getActiveTime16() -> Swift.UInt16?
  public func setActiveTime16(_ activeTime16: Swift.UInt16)
  public func getLocalTimestamp() -> Swift.UInt32?
  public func setLocalTimestamp(_ localTimestamp: Swift.UInt32)
  public func getTemperature() -> Swift.Float32?
  public func setTemperature(_ temperature: Swift.Float32)
  public func getTemperatureMin() -> Swift.Float32?
  public func setTemperatureMin(_ temperatureMin: Swift.Float32)
  public func getTemperatureMax() -> Swift.Float32?
  public func setTemperatureMax(_ temperatureMax: Swift.Float32)
  public func getNumActivityTime() -> Swift.Int
  public func getActivityTime(_ index: Swift.Int) -> Swift.UInt16?
  public func setActivityTime(_ index: Swift.Int, _ activityTime: Swift.UInt16)
  public func getActiveCalories() -> Swift.UInt16?
  public func setActiveCalories(_ activeCalories: Swift.UInt16)
  public func getCurrentActivityTypeIntensity() -> Swift.UInt8?
  public func setCurrentActivityTypeIntensity(_ currentActivityTypeIntensity: Swift.UInt8)
  public func getTimestampMin8() -> Swift.UInt8?
  public func setTimestampMin8(_ timestampMin8: Swift.UInt8)
  public func getTimestamp16() -> Swift.UInt16?
  public func setTimestamp16(_ timestamp16: Swift.UInt16)
  public func getHeartRate() -> Swift.UInt8?
  public func setHeartRate(_ heartRate: Swift.UInt8)
  public func getIntensity() -> Swift.Float32?
  public func setIntensity(_ intensity: Swift.Float32)
  public func getDurationMin() -> Swift.UInt16?
  public func setDurationMin(_ durationMin: Swift.UInt16)
  public func getDuration() -> Swift.UInt32?
  public func setDuration(_ duration: Swift.UInt32)
  public func getAscent() -> Swift.Float32?
  public func setAscent(_ ascent: Swift.Float32)
  public func getDescent() -> Swift.Float32?
  public func setDescent(_ descent: Swift.Float32)
  public func getModerateActivityMinutes() -> Swift.UInt16?
  public func setModerateActivityMinutes(_ moderateActivityMinutes: Swift.UInt16)
  public func getVigorousActivityMinutes() -> Swift.UInt16?
  public func setVigorousActivityMinutes(_ vigorousActivityMinutes: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum AnalogWatchfaceLayout : Swift.UInt8 {
  case Minimal
  case Traditional
  case Modern
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class HrZoneMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HighBpm
    case Name
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHighBpm() -> Swift.UInt8?
  public func setHighBpm(_ highBpm: Swift.UInt8)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum WriteResult {
  case success
  case failure(Swift.Error)
}
public struct HipRaiseExerciseName {
  public static let BarbellHipThrustOnFloor: Swift.UInt16
  public static let BarbellHipThrustWithBench: Swift.UInt16
  public static let BentKneeSwissBallReverseHipRaise: Swift.UInt16
  public static let WeightedBentKneeSwissBallReverseHipRaise: Swift.UInt16
  public static let BridgeWithLegExtension: Swift.UInt16
  public static let WeightedBridgeWithLegExtension: Swift.UInt16
  public static let ClamBridge: Swift.UInt16
  public static let FrontKickTabletop: Swift.UInt16
  public static let WeightedFrontKickTabletop: Swift.UInt16
  public static let HipExtensionAndCross: Swift.UInt16
  public static let WeightedHipExtensionAndCross: Swift.UInt16
  public static let HipRaise: Swift.UInt16
  public static let WeightedHipRaise: Swift.UInt16
  public static let HipRaiseWithFeetOnSwissBall: Swift.UInt16
  public static let WeightedHipRaiseWithFeetOnSwissBall: Swift.UInt16
  public static let HipRaiseWithHeadOnBosuBall: Swift.UInt16
  public static let WeightedHipRaiseWithHeadOnBosuBall: Swift.UInt16
  public static let HipRaiseWithHeadOnSwissBall: Swift.UInt16
  public static let WeightedHipRaiseWithHeadOnSwissBall: Swift.UInt16
  public static let HipRaiseWithKneeSqueeze: Swift.UInt16
  public static let WeightedHipRaiseWithKneeSqueeze: Swift.UInt16
  public static let InclineRearLegExtension: Swift.UInt16
  public static let WeightedInclineRearLegExtension: Swift.UInt16
  public static let KettlebellSwing: Swift.UInt16
  public static let MarchingHipRaise: Swift.UInt16
  public static let WeightedMarchingHipRaise: Swift.UInt16
  public static let MarchingHipRaiseWithFeetOnASwissBall: Swift.UInt16
  public static let WeightedMarchingHipRaiseWithFeetOnASwissBall: Swift.UInt16
  public static let ReverseHipRaise: Swift.UInt16
  public static let WeightedReverseHipRaise: Swift.UInt16
  public static let SingleLegHipRaise: Swift.UInt16
  public static let WeightedSingleLegHipRaise: Swift.UInt16
  public static let SingleLegHipRaiseWithFootOnBench: Swift.UInt16
  public static let WeightedSingleLegHipRaiseWithFootOnBench: Swift.UInt16
  public static let SingleLegHipRaiseWithFootOnBosuBall: Swift.UInt16
  public static let WeightedSingleLegHipRaiseWithFootOnBosuBall: Swift.UInt16
  public static let SingleLegHipRaiseWithFootOnFoamRoller: Swift.UInt16
  public static let WeightedSingleLegHipRaiseWithFootOnFoamRoller: Swift.UInt16
  public static let SingleLegHipRaiseWithFootOnMedicineBall: Swift.UInt16
  public static let WeightedSingleLegHipRaiseWithFootOnMedicineBall: Swift.UInt16
  public static let SingleLegHipRaiseWithHeadOnBosuBall: Swift.UInt16
  public static let WeightedSingleLegHipRaiseWithHeadOnBosuBall: Swift.UInt16
  public static let WeightedClamBridge: Swift.UInt16
  public static let SingleLegSwissBallHipRaiseAndLegCurl: Swift.UInt16
  public static let Clams: Swift.UInt16
  public static let InnerThighCircles: Swift.UInt16
  public static let InnerThighSideLift: Swift.UInt16
  public static let LegCircles: Swift.UInt16
  public static let LegLift: Swift.UInt16
  public static let LegLiftInExternalRotation: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum FitnessEquipmentState : Swift.UInt8 {
  case Ready
  case InUse
  case Paused
  case Unknown
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct OlympicLiftExerciseName {
  public static let BarbellHangPowerClean: Swift.UInt16
  public static let BarbellHangSquatClean: Swift.UInt16
  public static let BarbellPowerClean: Swift.UInt16
  public static let BarbellPowerSnatch: Swift.UInt16
  public static let BarbellSquatClean: Swift.UInt16
  public static let CleanAndJerk: Swift.UInt16
  public static let BarbellHangPowerSnatch: Swift.UInt16
  public static let BarbellHangPull: Swift.UInt16
  public static let BarbellHighPull: Swift.UInt16
  public static let BarbellSnatch: Swift.UInt16
  public static let BarbellSplitJerk: Swift.UInt16
  public static let Clean: Swift.UInt16
  public static let DumbbellClean: Swift.UInt16
  public static let DumbbellHangPull: Swift.UInt16
  public static let OneHandDumbbellSplitSnatch: Swift.UInt16
  public static let PushJerk: Swift.UInt16
  public static let SingleArmDumbbellSnatch: Swift.UInt16
  public static let SingleArmHangSnatch: Swift.UInt16
  public static let SingleArmKettlebellSnatch: Swift.UInt16
  public static let SplitJerk: Swift.UInt16
  public static let SquatCleanAndJerk: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum Language : Swift.UInt8 {
  case English
  case French
  case Italian
  case German
  case Spanish
  case Croatian
  case Czech
  case Danish
  case Dutch
  case Finnish
  case Greek
  case Hungarian
  case Norwegian
  case Polish
  case Portuguese
  case Slovakian
  case Slovenian
  case Swedish
  case Russian
  case Turkish
  case Latvian
  case Ukrainian
  case Arabic
  case Farsi
  case Bulgarian
  case Romanian
  case Chinese
  case Japanese
  case Korean
  case Taiwanese
  case Thai
  case Hebrew
  case BrazilianPortuguese
  case Indonesian
  case Malaysian
  case Vietnamese
  case Burmese
  case Mongolian
  case Custom
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class FileCapabilitiesMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case `Type`
    case Flags
    case Directory
    case MaxCount
    case MaxSize
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getType() -> GimKit.FitFileType?
  public func setType(_ type: GimKit.FitFileType)
  public func getFlags() -> Swift.UInt8?
  public func setFlags(_ flags: Swift.UInt8)
  public func getDirectory() -> [Swift.UInt8]?
  public func getDirectoryAsString() -> Swift.String?
  public func setDirectory(_ directory: Swift.String)
  public func setDirectory(_ directory: [Swift.UInt8])
  public func getMaxCount() -> Swift.UInt16?
  public func setMaxCount(_ maxCount: Swift.UInt16)
  public func getMaxSize() -> Swift.UInt32?
  public func setMaxSize(_ maxSize: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
extension AudioPlayer {
  public var items: [GimKit.AudioItem]? {
    get
  }
  public var currentItemIndexInQueue: Swift.Int? {
    get
  }
  public var hasNext: Swift.Bool {
    get
  }
  public var hasPrevious: Swift.Bool {
    get
  }
  public func play(item: GimKit.AudioItem)
  public func play(items: [GimKit.AudioItem], startAtIndex index: Swift.Int = 0)
  public func add(item: GimKit.AudioItem)
  public func add(items: [GimKit.AudioItem])
  public func removeItem(at index: Swift.Int)
}
public class DeveloperField : GimKit.FieldBase {
  public var values: Swift.Array<Any>
  public var isDefined: Swift.Bool {
    get
  }
  public var num: Swift.UInt8 {
    get
  }
  public var developerDataIndex: Swift.UInt8 {
    get
  }
  public var appVersion: Swift.UInt32 {
    get
  }
  public var appId: [Swift.UInt8]? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var type: Swift.UInt8 {
    get
  }
  public var scale: Swift.Float64 {
    get
  }
  public var offset: Swift.Float64 {
    get
  }
  public var units: Swift.String? {
    get
  }
  public var nativeOverride: Swift.UInt8 {
    get
  }
  public func getSubfield(subfieldName: Swift.String) -> GimKit.Subfield?
  public func getSubfield(subfieldIndex: Swift.UInt16) -> GimKit.Subfield?
  required public init()
  convenience public init(field: GimKit.DeveloperField)
  convenience public init(description: GimKit.FieldDescriptionMesg, developerDataIdMesg: GimKit.DeveloperDataIdMesg)
  @objc deinit
}
public struct SitUpExerciseName {
  public static let AlternatingSitUp: Swift.UInt16
  public static let WeightedAlternatingSitUp: Swift.UInt16
  public static let BentKneeVUp: Swift.UInt16
  public static let WeightedBentKneeVUp: Swift.UInt16
  public static let ButterflySitUp: Swift.UInt16
  public static let WeightedButterflySitup: Swift.UInt16
  public static let CrossPunchRollUp: Swift.UInt16
  public static let WeightedCrossPunchRollUp: Swift.UInt16
  public static let CrossedArmsSitUp: Swift.UInt16
  public static let WeightedCrossedArmsSitUp: Swift.UInt16
  public static let GetUpSitUp: Swift.UInt16
  public static let WeightedGetUpSitUp: Swift.UInt16
  public static let HoveringSitUp: Swift.UInt16
  public static let WeightedHoveringSitUp: Swift.UInt16
  public static let KettlebellSitUp: Swift.UInt16
  public static let MedicineBallAlternatingVUp: Swift.UInt16
  public static let MedicineBallSitUp: Swift.UInt16
  public static let MedicineBallVUp: Swift.UInt16
  public static let ModifiedSitUp: Swift.UInt16
  public static let NegativeSitUp: Swift.UInt16
  public static let OneArmFullSitUp: Swift.UInt16
  public static let RecliningCircle: Swift.UInt16
  public static let WeightedRecliningCircle: Swift.UInt16
  public static let ReverseCurlUp: Swift.UInt16
  public static let WeightedReverseCurlUp: Swift.UInt16
  public static let SingleLegSwissBallJackknife: Swift.UInt16
  public static let WeightedSingleLegSwissBallJackknife: Swift.UInt16
  public static let TheTeaser: Swift.UInt16
  public static let TheTeaserWeighted: Swift.UInt16
  public static let ThreePartRollDown: Swift.UInt16
  public static let WeightedThreePartRollDown: Swift.UInt16
  public static let VUp: Swift.UInt16
  public static let WeightedVUp: Swift.UInt16
  public static let WeightedRussianTwistOnSwissBall: Swift.UInt16
  public static let WeightedSitUp: Swift.UInt16
  public static let XAbs: Swift.UInt16
  public static let WeightedXAbs: Swift.UInt16
  public static let SitUp: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class FieldDescriptionMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case DeveloperDataIndex
    case FieldDefinitionNumber
    case FitBaseTypeId
    case FieldName
    case Array
    case Components
    case Scale
    case Offset
    case Units
    case Bits
    case Accumulate
    case FitBaseUnitId
    case NativeMesgNum
    case NativeFieldNum
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getDeveloperDataIndex() -> Swift.UInt8?
  public func setDeveloperDataIndex(_ developerDataIndex: Swift.UInt8)
  public func getFieldDefinitionNumber() -> Swift.UInt8?
  public func setFieldDefinitionNumber(_ fieldDefinitionNumber: Swift.UInt8)
  public func getFitBaseTypeId() -> Swift.UInt8?
  public func setFitBaseTypeId(_ fitBaseTypeId: Swift.UInt8)
  public func getNumFieldName() -> Swift.Int
  public func getFieldName(_ index: Swift.Int) -> [Swift.UInt8]?
  public func getFieldNameAsString(_ index: Swift.Int) -> Swift.String?
  public func setFieldName(_ index: Swift.Int, _ fieldName: Swift.String)
  public func setFieldName(_ index: Swift.Int, _ fieldName: [Swift.UInt8])
  public func getArray() -> Swift.UInt8?
  public func setArray(_ array: Swift.UInt8)
  public func getComponents() -> [Swift.UInt8]?
  public func getComponentsAsString() -> Swift.String?
  public func setComponents(_ components: Swift.String)
  public func setComponents(_ components: [Swift.UInt8])
  public func getScale() -> Swift.UInt8?
  public func setScale(_ scale: Swift.UInt8)
  public func getOffset() -> Swift.Int8?
  public func setOffset(_ offset: Swift.Int8)
  public func getNumUnits() -> Swift.Int
  public func getUnits(_ index: Swift.Int) -> [Swift.UInt8]?
  public func getUnitsAsString(_ index: Swift.Int) -> Swift.String?
  public func setUnits(_ index: Swift.Int, _ units: Swift.String)
  public func setUnits(_ index: Swift.Int, _ units: [Swift.UInt8])
  public func getBits() -> [Swift.UInt8]?
  public func getBitsAsString() -> Swift.String?
  public func setBits(_ bits: Swift.String)
  public func setBits(_ bits: [Swift.UInt8])
  public func getAccumulate() -> [Swift.UInt8]?
  public func getAccumulateAsString() -> Swift.String?
  public func setAccumulate(_ accumulate: Swift.String)
  public func setAccumulate(_ accumulate: [Swift.UInt8])
  public func getFitBaseUnitId() -> Swift.UInt16?
  public func setFitBaseUnitId(_ fitBaseUnitId: Swift.UInt16)
  public func getNativeMesgNum() -> Swift.UInt16?
  public func setNativeMesgNum(_ nativeMesgNum: Swift.UInt16)
  public func getNativeFieldNum() -> Swift.UInt8?
  public func setNativeFieldNum(_ nativeFieldNum: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum TurnType : Swift.UInt8 {
  case ArrivingIdx
  case ArrivingLeftIdx
  case ArrivingRightIdx
  case ArrivingViaIdx
  case ArrivingViaLeftIdx
  case ArrivingViaRightIdx
  case BearKeepLeftIdx
  case BearKeepRightIdx
  case ContinueIdx
  case ExitLeftIdx
  case ExitRightIdx
  case FerryIdx
  case Roundabout45Idx
  case Roundabout90Idx
  case Roundabout135Idx
  case Roundabout180Idx
  case Roundabout225Idx
  case Roundabout270Idx
  case Roundabout315Idx
  case Roundabout360Idx
  case RoundaboutNeg45Idx
  case RoundaboutNeg90Idx
  case RoundaboutNeg135Idx
  case RoundaboutNeg180Idx
  case RoundaboutNeg225Idx
  case RoundaboutNeg270Idx
  case RoundaboutNeg315Idx
  case RoundaboutNeg360Idx
  case RoundaboutGenericIdx
  case RoundaboutNegGenericIdx
  case SharpTurnLeftIdx
  case SharpTurnRightIdx
  case TurnLeftIdx
  case TurnRightIdx
  case UturnLeftIdx
  case UturnRightIdx
  case IconInvIdx
  case IconIdxCnt
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class DeveloperDataIdMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case DeveloperId
    case ApplicationId
    case ManufacturerId
    case DeveloperDataIndex
    case ApplicationVersion
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getNumDeveloperId() -> Swift.Int
  public func getDeveloperId(_ index: Swift.Int) -> Swift.UInt8?
  public func setDeveloperId(_ index: Swift.Int, _ developerId: Swift.UInt8)
  public func getNumApplicationId() -> Swift.Int
  public func getApplicationId(_ index: Swift.Int) -> Swift.UInt8?
  public func setApplicationId(_ index: Swift.Int, _ applicationId: Swift.UInt8)
  public func getManufacturerId() -> Swift.UInt16?
  public func setManufacturerId(_ manufacturerId: Swift.UInt16)
  public func getDeveloperDataIndex() -> Swift.UInt8?
  public func setDeveloperDataIndex(_ developerDataIndex: Swift.UInt8)
  public func getApplicationVersion() -> Swift.UInt32?
  public func setApplicationVersion(_ applicationVersion: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
@_silgen_name("swift_getTypeByMangledNameInContext")
public func _getTypeByMangledNameInContext(_ name: Swift.UnsafePointer<Swift.UInt8>, _ nameLength: Swift.Int, genericContext: Swift.UnsafeRawPointer?, genericArguments: Swift.UnsafeRawPointer?) -> Any.Type?
@_silgen_name("swift_getTypeContextDescriptor")
public func _swift_getTypeContextDescriptor(_ metadata: Swift.UnsafeRawPointer?) -> Swift.UnsafeRawPointer?
public enum ListenAction {
  case keepListening
  case done
  public static func == (a: GimKit.ListenAction, b: GimKit.ListenAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class SegmentLapMesg : GimKit.Mesg {
  public enum TotalCyclesSubfield : Swift.UInt16 {
    case TotalStrokes
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case Event
    case EventType
    case StartTime
    case StartPositionLat
    case StartPositionLong
    case EndPositionLat
    case EndPositionLong
    case TotalElapsedTime
    case TotalTimerTime
    case TotalDistance
    case TotalCycles
    case TotalCalories
    case TotalFatCalories
    case AvgSpeed
    case MaxSpeed
    case AvgHeartRate
    case MaxHeartRate
    case AvgCadence
    case MaxCadence
    case AvgPower
    case MaxPower
    case TotalAscent
    case TotalDescent
    case Sport
    case EventGroup
    case NecLat
    case NecLong
    case SwcLat
    case SwcLong
    case Name
    case NormalizedPower
    case LeftRightBalance
    case SubSport
    case TotalWork
    case AvgAltitude
    case MaxAltitude
    case GpsAccuracy
    case AvgGrade
    case AvgPosGrade
    case AvgNegGrade
    case MaxPosGrade
    case MaxNegGrade
    case AvgTemperature
    case MaxTemperature
    case TotalMovingTime
    case AvgPosVerticalSpeed
    case AvgNegVerticalSpeed
    case MaxPosVerticalSpeed
    case MaxNegVerticalSpeed
    case TimeInHrZone
    case TimeInSpeedZone
    case TimeInCadenceZone
    case TimeInPowerZone
    case RepetitionNum
    case MinAltitude
    case MinHeartRate
    case ActiveTime
    case WktStepIndex
    case SportEvent
    case AvgLeftTorqueEffectiveness
    case AvgRightTorqueEffectiveness
    case AvgLeftPedalSmoothness
    case AvgRightPedalSmoothness
    case AvgCombinedPedalSmoothness
    case Status
    case Uuid
    case AvgFractionalCadence
    case MaxFractionalCadence
    case TotalFractionalCycles
    case FrontGearShiftCount
    case RearGearShiftCount
    case TimeStanding
    case StandCount
    case AvgLeftPco
    case AvgRightPco
    case AvgLeftPowerPhase
    case AvgLeftPowerPhasePeak
    case AvgRightPowerPhase
    case AvgRightPowerPhasePeak
    case AvgPowerPosition
    case MaxPowerPosition
    case AvgCadencePosition
    case MaxCadencePosition
    case Manufacturer
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getStartTime() -> GimKit.FitDateTime?
  public func setStartTime(_ startTime: GimKit.FitDateTime)
  public func getStartPositionLat() -> Swift.Int32?
  public func setStartPositionLat(_ startPositionLat: Swift.Int32)
  public func getStartPositionLong() -> Swift.Int32?
  public func setStartPositionLong(_ startPositionLong: Swift.Int32)
  public func getEndPositionLat() -> Swift.Int32?
  public func setEndPositionLat(_ endPositionLat: Swift.Int32)
  public func getEndPositionLong() -> Swift.Int32?
  public func setEndPositionLong(_ endPositionLong: Swift.Int32)
  public func getTotalElapsedTime() -> Swift.Float32?
  public func setTotalElapsedTime(_ totalElapsedTime: Swift.Float32)
  public func getTotalTimerTime() -> Swift.Float32?
  public func setTotalTimerTime(_ totalTimerTime: Swift.Float32)
  public func getTotalDistance() -> Swift.Float32?
  public func setTotalDistance(_ totalDistance: Swift.Float32)
  public func getTotalCycles() -> Swift.UInt32?
  public func setTotalCycles(_ totalCycles: Swift.UInt32)
  public func getTotalStrokes() -> Swift.UInt32?
  public func setTotalStrokes(_ totalStrokes: Swift.UInt32)
  public func getTotalCalories() -> Swift.UInt16?
  public func setTotalCalories(_ totalCalories: Swift.UInt16)
  public func getTotalFatCalories() -> Swift.UInt16?
  public func setTotalFatCalories(_ totalFatCalories: Swift.UInt16)
  public func getAvgSpeed() -> Swift.Float32?
  public func setAvgSpeed(_ avgSpeed: Swift.Float32)
  public func getMaxSpeed() -> Swift.Float32?
  public func setMaxSpeed(_ maxSpeed: Swift.Float32)
  public func getAvgHeartRate() -> Swift.UInt8?
  public func setAvgHeartRate(_ avgHeartRate: Swift.UInt8)
  public func getMaxHeartRate() -> Swift.UInt8?
  public func setMaxHeartRate(_ maxHeartRate: Swift.UInt8)
  public func getAvgCadence() -> Swift.UInt8?
  public func setAvgCadence(_ avgCadence: Swift.UInt8)
  public func getMaxCadence() -> Swift.UInt8?
  public func setMaxCadence(_ maxCadence: Swift.UInt8)
  public func getAvgPower() -> Swift.UInt16?
  public func setAvgPower(_ avgPower: Swift.UInt16)
  public func getMaxPower() -> Swift.UInt16?
  public func setMaxPower(_ maxPower: Swift.UInt16)
  public func getTotalAscent() -> Swift.UInt16?
  public func setTotalAscent(_ totalAscent: Swift.UInt16)
  public func getTotalDescent() -> Swift.UInt16?
  public func setTotalDescent(_ totalDescent: Swift.UInt16)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  public func getNecLat() -> Swift.Int32?
  public func setNecLat(_ necLat: Swift.Int32)
  public func getNecLong() -> Swift.Int32?
  public func setNecLong(_ necLong: Swift.Int32)
  public func getSwcLat() -> Swift.Int32?
  public func setSwcLat(_ swcLat: Swift.Int32)
  public func getSwcLong() -> Swift.Int32?
  public func setSwcLong(_ swcLong: Swift.Int32)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getNormalizedPower() -> Swift.UInt16?
  public func setNormalizedPower(_ normalizedPower: Swift.UInt16)
  public func getLeftRightBalance() -> Swift.UInt16?
  public func setLeftRightBalance(_ leftRightBalance: Swift.UInt16)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getTotalWork() -> Swift.UInt32?
  public func setTotalWork(_ totalWork: Swift.UInt32)
  public func getAvgAltitude() -> Swift.Float32?
  public func setAvgAltitude(_ avgAltitude: Swift.Float32)
  public func getMaxAltitude() -> Swift.Float32?
  public func setMaxAltitude(_ maxAltitude: Swift.Float32)
  public func getGpsAccuracy() -> Swift.UInt8?
  public func setGpsAccuracy(_ gpsAccuracy: Swift.UInt8)
  public func getAvgGrade() -> Swift.Float32?
  public func setAvgGrade(_ avgGrade: Swift.Float32)
  public func getAvgPosGrade() -> Swift.Float32?
  public func setAvgPosGrade(_ avgPosGrade: Swift.Float32)
  public func getAvgNegGrade() -> Swift.Float32?
  public func setAvgNegGrade(_ avgNegGrade: Swift.Float32)
  public func getMaxPosGrade() -> Swift.Float32?
  public func setMaxPosGrade(_ maxPosGrade: Swift.Float32)
  public func getMaxNegGrade() -> Swift.Float32?
  public func setMaxNegGrade(_ maxNegGrade: Swift.Float32)
  public func getAvgTemperature() -> Swift.Int8?
  public func setAvgTemperature(_ avgTemperature: Swift.Int8)
  public func getMaxTemperature() -> Swift.Int8?
  public func setMaxTemperature(_ maxTemperature: Swift.Int8)
  public func getTotalMovingTime() -> Swift.Float32?
  public func setTotalMovingTime(_ totalMovingTime: Swift.Float32)
  public func getAvgPosVerticalSpeed() -> Swift.Float32?
  public func setAvgPosVerticalSpeed(_ avgPosVerticalSpeed: Swift.Float32)
  public func getAvgNegVerticalSpeed() -> Swift.Float32?
  public func setAvgNegVerticalSpeed(_ avgNegVerticalSpeed: Swift.Float32)
  public func getMaxPosVerticalSpeed() -> Swift.Float32?
  public func setMaxPosVerticalSpeed(_ maxPosVerticalSpeed: Swift.Float32)
  public func getMaxNegVerticalSpeed() -> Swift.Float32?
  public func setMaxNegVerticalSpeed(_ maxNegVerticalSpeed: Swift.Float32)
  public func getNumTimeInHrZone() -> Swift.Int
  public func getTimeInHrZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInHrZone(_ index: Swift.Int, _ timeInHrZone: Swift.Float32)
  public func getNumTimeInSpeedZone() -> Swift.Int
  public func getTimeInSpeedZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInSpeedZone(_ index: Swift.Int, _ timeInSpeedZone: Swift.Float32)
  public func getNumTimeInCadenceZone() -> Swift.Int
  public func getTimeInCadenceZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInCadenceZone(_ index: Swift.Int, _ timeInCadenceZone: Swift.Float32)
  public func getNumTimeInPowerZone() -> Swift.Int
  public func getTimeInPowerZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInPowerZone(_ index: Swift.Int, _ timeInPowerZone: Swift.Float32)
  public func getRepetitionNum() -> Swift.UInt16?
  public func setRepetitionNum(_ repetitionNum: Swift.UInt16)
  public func getMinAltitude() -> Swift.Float32?
  public func setMinAltitude(_ minAltitude: Swift.Float32)
  public func getMinHeartRate() -> Swift.UInt8?
  public func setMinHeartRate(_ minHeartRate: Swift.UInt8)
  public func getActiveTime() -> Swift.Float32?
  public func setActiveTime(_ activeTime: Swift.Float32)
  public func getWktStepIndex() -> Swift.UInt16?
  public func setWktStepIndex(_ wktStepIndex: Swift.UInt16)
  public func getSportEvent() -> GimKit.SportEvent?
  public func setSportEvent(_ sportEvent: GimKit.SportEvent)
  public func getAvgLeftTorqueEffectiveness() -> Swift.Float32?
  public func setAvgLeftTorqueEffectiveness(_ avgLeftTorqueEffectiveness: Swift.Float32)
  public func getAvgRightTorqueEffectiveness() -> Swift.Float32?
  public func setAvgRightTorqueEffectiveness(_ avgRightTorqueEffectiveness: Swift.Float32)
  public func getAvgLeftPedalSmoothness() -> Swift.Float32?
  public func setAvgLeftPedalSmoothness(_ avgLeftPedalSmoothness: Swift.Float32)
  public func getAvgRightPedalSmoothness() -> Swift.Float32?
  public func setAvgRightPedalSmoothness(_ avgRightPedalSmoothness: Swift.Float32)
  public func getAvgCombinedPedalSmoothness() -> Swift.Float32?
  public func setAvgCombinedPedalSmoothness(_ avgCombinedPedalSmoothness: Swift.Float32)
  public func getStatus() -> GimKit.SegmentLapStatus?
  public func setStatus(_ status: GimKit.SegmentLapStatus)
  public func getUuid() -> [Swift.UInt8]?
  public func getUuidAsString() -> Swift.String?
  public func setUuid(_ uuid: Swift.String)
  public func setUuid(_ uuid: [Swift.UInt8])
  public func getAvgFractionalCadence() -> Swift.Float32?
  public func setAvgFractionalCadence(_ avgFractionalCadence: Swift.Float32)
  public func getMaxFractionalCadence() -> Swift.Float32?
  public func setMaxFractionalCadence(_ maxFractionalCadence: Swift.Float32)
  public func getTotalFractionalCycles() -> Swift.Float32?
  public func setTotalFractionalCycles(_ totalFractionalCycles: Swift.Float32)
  public func getFrontGearShiftCount() -> Swift.UInt16?
  public func setFrontGearShiftCount(_ frontGearShiftCount: Swift.UInt16)
  public func getRearGearShiftCount() -> Swift.UInt16?
  public func setRearGearShiftCount(_ rearGearShiftCount: Swift.UInt16)
  public func getTimeStanding() -> Swift.Float32?
  public func setTimeStanding(_ timeStanding: Swift.Float32)
  public func getStandCount() -> Swift.UInt16?
  public func setStandCount(_ standCount: Swift.UInt16)
  public func getAvgLeftPco() -> Swift.Int8?
  public func setAvgLeftPco(_ avgLeftPco: Swift.Int8)
  public func getAvgRightPco() -> Swift.Int8?
  public func setAvgRightPco(_ avgRightPco: Swift.Int8)
  public func getNumAvgLeftPowerPhase() -> Swift.Int
  public func getAvgLeftPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgLeftPowerPhase(_ index: Swift.Int, _ avgLeftPowerPhase: Swift.Float32)
  public func getNumAvgLeftPowerPhasePeak() -> Swift.Int
  public func getAvgLeftPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgLeftPowerPhasePeak(_ index: Swift.Int, _ avgLeftPowerPhasePeak: Swift.Float32)
  public func getNumAvgRightPowerPhase() -> Swift.Int
  public func getAvgRightPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhase(_ index: Swift.Int, _ avgRightPowerPhase: Swift.Float32)
  public func getNumAvgRightPowerPhasePeak() -> Swift.Int
  public func getAvgRightPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhasePeak(_ index: Swift.Int, _ avgRightPowerPhasePeak: Swift.Float32)
  public func getNumAvgPowerPosition() -> Swift.Int
  public func getAvgPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setAvgPowerPosition(_ index: Swift.Int, _ avgPowerPosition: Swift.UInt16)
  public func getNumMaxPowerPosition() -> Swift.Int
  public func getMaxPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setMaxPowerPosition(_ index: Swift.Int, _ maxPowerPosition: Swift.UInt16)
  public func getNumAvgCadencePosition() -> Swift.Int
  public func getAvgCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setAvgCadencePosition(_ index: Swift.Int, _ avgCadencePosition: Swift.UInt8)
  public func getNumMaxCadencePosition() -> Swift.Int
  public func getMaxCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setMaxCadencePosition(_ index: Swift.Int, _ maxCadencePosition: Swift.UInt8)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SegmentDeleteStatus : Swift.UInt8 {
  case DoNotDelete
  case DeleteOne
  case DeleteAll
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct LocalDeviceType {
  public static let Invalid: Swift.UInt8
}
public enum AudioPlayerError : Swift.Error {
  case maximumRetryCountHit
  case foundationError(Swift.Error)
  case itemNotConsideredPlayable
  case noItemsConsideredPlayable
}
public enum AudioPlayerState {
  case buffering
  case playing
  case paused
  case stopped
  case waitingForConnection
  case failed(GimKit.AudioPlayerError)
}
extension AudioPlayerState : Swift.Equatable {
}
public func == (lhs: GimKit.AudioPlayerState, rhs: GimKit.AudioPlayerState) -> Swift.Bool
public class CoursePointMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case PositionLat
    case PositionLong
    case Distance
    case `Type`
    case Name
    case Favorite
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getPositionLat() -> Swift.Int32?
  public func setPositionLat(_ positionLat: Swift.Int32)
  public func getPositionLong() -> Swift.Int32?
  public func setPositionLong(_ positionLong: Swift.Int32)
  public func getDistance() -> Swift.Float32?
  public func setDistance(_ distance: Swift.Float32)
  public func getType() -> GimKit.CoursePoint?
  public func setType(_ type: GimKit.CoursePoint)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getFavorite() -> GimKit.FitBool?
  public func setFavorite(_ favorite: GimKit.FitBool)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum WeatherReport : Swift.UInt8 {
  case Current
  case HourlyForecast
  case DailyForecast
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class FieldCapabilitiesMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case File
    case MesgNum
    case FieldNum
    case Count
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getFile() -> GimKit.FitFileType?
  public func setFile(_ file: GimKit.FitFileType)
  public func getMesgNum() -> Swift.UInt16?
  public func setMesgNum(_ mesgNum: Swift.UInt16)
  public func getFieldNum() -> Swift.UInt8?
  public func setFieldNum(_ fieldNum: Swift.UInt8)
  public func getCount() -> Swift.UInt16?
  public func setCount(_ count: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct ShrugExerciseName {
  public static let BarbellJumpShrug: Swift.UInt16
  public static let BarbellShrug: Swift.UInt16
  public static let BarbellUprightRow: Swift.UInt16
  public static let BehindTheBackSmithMachineShrug: Swift.UInt16
  public static let DumbbellJumpShrug: Swift.UInt16
  public static let DumbbellShrug: Swift.UInt16
  public static let DumbbellUprightRow: Swift.UInt16
  public static let InclineDumbbellShrug: Swift.UInt16
  public static let OverheadBarbellShrug: Swift.UInt16
  public static let OverheadDumbbellShrug: Swift.UInt16
  public static let ScaptionAndShrug: Swift.UInt16
  public static let ScapularRetraction: Swift.UInt16
  public static let SerratusChairShrug: Swift.UInt16
  public static let WeightedSerratusChairShrug: Swift.UInt16
  public static let SerratusShrug: Swift.UInt16
  public static let WeightedSerratusShrug: Swift.UInt16
  public static let WideGripJumpShrug: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum DisconnectionResult {
  case disconnected(GimKit.PeripheralIdentifier)
  case failure(Swift.Error)
}
public struct PullUpExerciseName {
  public static let BandedPullUps: Swift.UInt16
  public static let _30DegreeLatPulldown: Swift.UInt16
  public static let BandAssistedChinUp: Swift.UInt16
  public static let CloseGripChinUp: Swift.UInt16
  public static let WeightedCloseGripChinUp: Swift.UInt16
  public static let CloseGripLatPulldown: Swift.UInt16
  public static let CrossoverChinUp: Swift.UInt16
  public static let WeightedCrossoverChinUp: Swift.UInt16
  public static let EzBarPullover: Swift.UInt16
  public static let HangingHurdle: Swift.UInt16
  public static let WeightedHangingHurdle: Swift.UInt16
  public static let KneelingLatPulldown: Swift.UInt16
  public static let KneelingUnderhandGripLatPulldown: Swift.UInt16
  public static let LatPulldown: Swift.UInt16
  public static let MixedGripChinUp: Swift.UInt16
  public static let WeightedMixedGripChinUp: Swift.UInt16
  public static let MixedGripPullUp: Swift.UInt16
  public static let WeightedMixedGripPullUp: Swift.UInt16
  public static let ReverseGripPulldown: Swift.UInt16
  public static let StandingCablePullover: Swift.UInt16
  public static let StraightArmPulldown: Swift.UInt16
  public static let SwissBallEzBarPullover: Swift.UInt16
  public static let TowelPullUp: Swift.UInt16
  public static let WeightedTowelPullUp: Swift.UInt16
  public static let WeightedPullUp: Swift.UInt16
  public static let WideGripLatPulldown: Swift.UInt16
  public static let WideGripPullUp: Swift.UInt16
  public static let WeightedWideGripPullUp: Swift.UInt16
  public static let BurpeePullUp: Swift.UInt16
  public static let WeightedBurpeePullUp: Swift.UInt16
  public static let JumpingPullUps: Swift.UInt16
  public static let WeightedJumpingPullUps: Swift.UInt16
  public static let KippingPullUp: Swift.UInt16
  public static let WeightedKippingPullUp: Swift.UInt16
  public static let LPullUp: Swift.UInt16
  public static let WeightedLPullUp: Swift.UInt16
  public static let SuspendedChinUp: Swift.UInt16
  public static let WeightedSuspendedChinUp: Swift.UInt16
  public static let PullUp: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum Intensity : Swift.UInt8 {
  case Active
  case Rest
  case Warmup
  case Cooldown
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum GimKitError {
  case bluetoothUnavailable
  case multipleScanNotSupported
  case multipleDisconnectNotSupported
  case connectionTimedOut
  case notConnected
  case missingService(GimKit.ServiceIdentifier)
  case missingCharacteristic(GimKit.CharacteristicIdentifier)
  case cancelled
  case explicitDisconnect
  case unexpectedDisconnect
  case disconnectQueued
  case listenTimedOut
  case readFailed
  case writeFailed
  case missingData
  case dataOutOfBounds(start: Swift.Int, length: Swift.Int, count: Swift.Int)
  case unexpectedPeripheral(GimKit.PeripheralIdentifier)
  case indefiniteFlush
  case stopped
  case multipleListenTrapped
  case multipleListenReplaced
  case tooMuchData(expected: Swift.Int, received: Foundation.Data)
  case peripheralDisconnected
}
extension GimKitError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension GimKitError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum BodyLocation : Swift.UInt8 {
  case LeftLeg
  case LeftCalf
  case LeftShin
  case LeftHamstring
  case LeftQuad
  case LeftGlute
  case RightLeg
  case RightCalf
  case RightShin
  case RightHamstring
  case RightQuad
  case RightGlute
  case TorsoBack
  case LeftLowerBack
  case LeftUpperBack
  case RightLowerBack
  case RightUpperBack
  case TorsoFront
  case LeftAbdomen
  case LeftChest
  case RightAbdomen
  case RightChest
  case LeftArm
  case LeftShoulder
  case LeftBicep
  case LeftTricep
  case LeftBrachioradialis
  case LeftForearmExtensors
  case RightArm
  case RightShoulder
  case RightBicep
  case RightTricep
  case RightBrachioradialis
  case RightForearmExtensors
  case Neck
  case Throat
  case WaistMidBack
  case WaistFront
  case WaistLeft
  case WaistRight
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct CalfRaiseExerciseName {
  public static let _3WayCalfRaise: Swift.UInt16
  public static let _3WayWeightedCalfRaise: Swift.UInt16
  public static let _3WaySingleLegCalfRaise: Swift.UInt16
  public static let _3WayWeightedSingleLegCalfRaise: Swift.UInt16
  public static let DonkeyCalfRaise: Swift.UInt16
  public static let WeightedDonkeyCalfRaise: Swift.UInt16
  public static let SeatedCalfRaise: Swift.UInt16
  public static let WeightedSeatedCalfRaise: Swift.UInt16
  public static let SeatedDumbbellToeRaise: Swift.UInt16
  public static let SingleLegBentKneeCalfRaise: Swift.UInt16
  public static let WeightedSingleLegBentKneeCalfRaise: Swift.UInt16
  public static let SingleLegDeclinePushUp: Swift.UInt16
  public static let SingleLegDonkeyCalfRaise: Swift.UInt16
  public static let WeightedSingleLegDonkeyCalfRaise: Swift.UInt16
  public static let SingleLegHipRaiseWithKneeHold: Swift.UInt16
  public static let SingleLegStandingCalfRaise: Swift.UInt16
  public static let SingleLegStandingDumbbellCalfRaise: Swift.UInt16
  public static let StandingBarbellCalfRaise: Swift.UInt16
  public static let StandingCalfRaise: Swift.UInt16
  public static let WeightedStandingCalfRaise: Swift.UInt16
  public static let StandingDumbbellCalfRaise: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct ShoulderStabilityExerciseName {
  public static let _90DegreeCableExternalRotation: Swift.UInt16
  public static let BandExternalRotation: Swift.UInt16
  public static let BandInternalRotation: Swift.UInt16
  public static let BentArmLateralRaiseAndExternalRotation: Swift.UInt16
  public static let CableExternalRotation: Swift.UInt16
  public static let DumbbellFacePullWithExternalRotation: Swift.UInt16
  public static let FloorIRaise: Swift.UInt16
  public static let WeightedFloorIRaise: Swift.UInt16
  public static let FloorTRaise: Swift.UInt16
  public static let WeightedFloorTRaise: Swift.UInt16
  public static let FloorYRaise: Swift.UInt16
  public static let WeightedFloorYRaise: Swift.UInt16
  public static let InclineIRaise: Swift.UInt16
  public static let WeightedInclineIRaise: Swift.UInt16
  public static let InclineLRaise: Swift.UInt16
  public static let WeightedInclineLRaise: Swift.UInt16
  public static let InclineTRaise: Swift.UInt16
  public static let WeightedInclineTRaise: Swift.UInt16
  public static let InclineWRaise: Swift.UInt16
  public static let WeightedInclineWRaise: Swift.UInt16
  public static let InclineYRaise: Swift.UInt16
  public static let WeightedInclineYRaise: Swift.UInt16
  public static let LyingExternalRotation: Swift.UInt16
  public static let SeatedDumbbellExternalRotation: Swift.UInt16
  public static let StandingLRaise: Swift.UInt16
  public static let SwissBallIRaise: Swift.UInt16
  public static let WeightedSwissBallIRaise: Swift.UInt16
  public static let SwissBallTRaise: Swift.UInt16
  public static let WeightedSwissBallTRaise: Swift.UInt16
  public static let SwissBallWRaise: Swift.UInt16
  public static let WeightedSwissBallWRaise: Swift.UInt16
  public static let SwissBallYRaise: Swift.UInt16
  public static let WeightedSwissBallYRaise: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct GimKitDeviceInfo {
  public let motorSN: Swift.String
  public let motorVersion: Swift.String
  public let dashboardSN: Swift.String
  public let dashboardVersion: Swift.String
}
public struct LateralRaiseExerciseName {
  public static let _45DegreeCableExternalRotation: Swift.Int
  public static let AlternatingLateralRaiseWithStaticHold: Swift.Int
  public static let BarMuscleUp: Swift.Int
  public static let BentOverLateralRaise: Swift.Int
  public static let CableDiagonalRaise: Swift.Int
  public static let CableFrontRaise: Swift.Int
  public static let CalorieRow: Swift.Int
  public static let ComboShoulderRaise: Swift.Int
  public static let DumbbellDiagonalRaise: Swift.Int
  public static let DumbbellVRaise: Swift.Int
  public static let FrontRaise: Swift.Int
  public static let LeaningDumbbellLateralRaise: Swift.Int
  public static let LyingDumbbellRaise: Swift.Int
  public static let MuscleUp: Swift.Int
  public static let OneArmCableLateralRaise: Swift.Int
  public static let OverhandGripRearLateralRaise: Swift.Int
  public static let PlateRaises: Swift.Int
  public static let RingDip: Swift.Int
  public static let WeightedRingDip: Swift.Int
  public static let RingMuscleUp: Swift.Int
  public static let WeightedRingMuscleUp: Swift.Int
  public static let RopeClimb: Swift.Int
  public static let WeightedRopeClimb: Swift.Int
  public static let Scaption: Swift.Int
  public static let SeatedLateralRaise: Swift.Int
  public static let SeatedRearLateralRaise: Swift.Int
  public static let SideLyingLateralRaise: Swift.Int
  public static let StandingLift: Swift.Int
  public static let SuspendedRow: Swift.Int
  public static let UnderhandGripRearLateralRaise: Swift.Int
  public static let WallSlide: Swift.Int
  public static let WeightedWallSlide: Swift.Int
  public static let ArmCircles: Swift.Int
  public static let ShavingTheHead: Swift.Int
  public static let Invalid: Swift.Int
}
public class Encode {
  public var header: GimKit.Header
  public init(_ version: GimKit.ProtocolVersion)
  public func write(_ mesgDefinition: GimKit.MesgDefinition)
  public func write(_ mesg: GimKit.Mesg)
  public func write(_ mesgs: Swift.Array<GimKit.Mesg>)
  public func close() -> GimKit.PositionableData
  @objc deinit
}
public enum GoalSource : Swift.UInt8 {
  case Auto
  case Community
  case User
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Manufacturer {
  public static let Garmin: Swift.UInt16
  public static let GarminFr405Antfs: Swift.UInt16
  public static let Zephyr: Swift.UInt16
  public static let Dayton: Swift.UInt16
  public static let Idt: Swift.UInt16
  public static let Srm: Swift.UInt16
  public static let Quarq: Swift.UInt16
  public static let Ibike: Swift.UInt16
  public static let Saris: Swift.UInt16
  public static let SparkHk: Swift.UInt16
  public static let Tanita: Swift.UInt16
  public static let Echowell: Swift.UInt16
  public static let DynastreamOem: Swift.UInt16
  public static let Nautilus: Swift.UInt16
  public static let Dynastream: Swift.UInt16
  public static let Timex: Swift.UInt16
  public static let Metrigear: Swift.UInt16
  public static let Xelic: Swift.UInt16
  public static let Beurer: Swift.UInt16
  public static let Cardiosport: Swift.UInt16
  public static let AAndD: Swift.UInt16
  public static let Hmm: Swift.UInt16
  public static let Suunto: Swift.UInt16
  public static let ThitaElektronik: Swift.UInt16
  public static let Gpulse: Swift.UInt16
  public static let CleanMobile: Swift.UInt16
  public static let PedalBrain: Swift.UInt16
  public static let Peaksware: Swift.UInt16
  public static let Saxonar: Swift.UInt16
  public static let LemondFitness: Swift.UInt16
  public static let Dexcom: Swift.UInt16
  public static let WahooFitness: Swift.UInt16
  public static let OctaneFitness: Swift.UInt16
  public static let Archinoetics: Swift.UInt16
  public static let TheHurtBox: Swift.UInt16
  public static let CitizenSystems: Swift.UInt16
  public static let Magellan: Swift.UInt16
  public static let Osynce: Swift.UInt16
  public static let Holux: Swift.UInt16
  public static let Concept2: Swift.UInt16
  public static let OneGiantLeap: Swift.UInt16
  public static let AceSensor: Swift.UInt16
  public static let BrimBrothers: Swift.UInt16
  public static let Xplova: Swift.UInt16
  public static let PerceptionDigital: Swift.UInt16
  public static let Bf1systems: Swift.UInt16
  public static let Pioneer: Swift.UInt16
  public static let Spantec: Swift.UInt16
  public static let Metalogics: Swift.UInt16
  public static let _4iiiis: Swift.UInt16
  public static let SeikoEpson: Swift.UInt16
  public static let SeikoEpsonOem: Swift.UInt16
  public static let IforPowell: Swift.UInt16
  public static let MaxwellGuider: Swift.UInt16
  public static let StarTrac: Swift.UInt16
  public static let Breakaway: Swift.UInt16
  public static let AlatechTechnologyLtd: Swift.UInt16
  public static let MioTechnologyEurope: Swift.UInt16
  public static let Rotor: Swift.UInt16
  public static let Geonaute: Swift.UInt16
  public static let IdBike: Swift.UInt16
  public static let Specialized: Swift.UInt16
  public static let Wtek: Swift.UInt16
  public static let PhysicalEnterprises: Swift.UInt16
  public static let NorthPoleEngineering: Swift.UInt16
  public static let Bkool: Swift.UInt16
  public static let Cateye: Swift.UInt16
  public static let StagesCycling: Swift.UInt16
  public static let Sigmasport: Swift.UInt16
  public static let Tomtom: Swift.UInt16
  public static let Peripedal: Swift.UInt16
  public static let Wattbike: Swift.UInt16
  public static let Moxy: Swift.UInt16
  public static let Ciclosport: Swift.UInt16
  public static let Powerbahn: Swift.UInt16
  public static let AcornProjectsAps: Swift.UInt16
  public static let Lifebeam: Swift.UInt16
  public static let Bontrager: Swift.UInt16
  public static let Wellgo: Swift.UInt16
  public static let Scosche: Swift.UInt16
  public static let Magura: Swift.UInt16
  public static let Woodway: Swift.UInt16
  public static let Elite: Swift.UInt16
  public static let NielsenKellerman: Swift.UInt16
  public static let DkCity: Swift.UInt16
  public static let Tacx: Swift.UInt16
  public static let DirectionTechnology: Swift.UInt16
  public static let Magtonic: Swift.UInt16
  public static let _1partcarbon: Swift.UInt16
  public static let InsideRideTechnologies: Swift.UInt16
  public static let SoundOfMotion: Swift.UInt16
  public static let Stryd: Swift.UInt16
  public static let Icg: Swift.UInt16
  public static let MiPulse: Swift.UInt16
  public static let BsxAthletics: Swift.UInt16
  public static let Look: Swift.UInt16
  public static let CampagnoloSrl: Swift.UInt16
  public static let BodyBikeSmart: Swift.UInt16
  public static let Praxisworks: Swift.UInt16
  public static let LimitsTechnology: Swift.UInt16
  public static let TopactionTechnology: Swift.UInt16
  public static let Cosinuss: Swift.UInt16
  public static let Fitcare: Swift.UInt16
  public static let Magene: Swift.UInt16
  public static let GiantManufacturingCo: Swift.UInt16
  public static let Tigrasport: Swift.UInt16
  public static let Salutron: Swift.UInt16
  public static let Technogym: Swift.UInt16
  public static let BrytonSensors: Swift.UInt16
  public static let LatitudeLimited: Swift.UInt16
  public static let SoaringTechnology: Swift.UInt16
  public static let Igpsport: Swift.UInt16
  public static let Thinkrider: Swift.UInt16
  public static let GopherSport: Swift.UInt16
  public static let Waterrower: Swift.UInt16
  public static let Orangetheory: Swift.UInt16
  public static let Inpeak: Swift.UInt16
  public static let Kinetic: Swift.UInt16
  public static let JohnsonHealthTech: Swift.UInt16
  public static let PolarElectro: Swift.UInt16
  public static let Seesense: Swift.UInt16
  public static let NciTechnology: Swift.UInt16
  public static let Development: Swift.UInt16
  public static let Healthandlife: Swift.UInt16
  public static let Lezyne: Swift.UInt16
  public static let ScribeLabs: Swift.UInt16
  public static let Zwift: Swift.UInt16
  public static let Watteam: Swift.UInt16
  public static let Recon: Swift.UInt16
  public static let FaveroElectronics: Swift.UInt16
  public static let Dynovelo: Swift.UInt16
  public static let Strava: Swift.UInt16
  public static let Precor: Swift.UInt16
  public static let Bryton: Swift.UInt16
  public static let Sram: Swift.UInt16
  public static let Navman: Swift.UInt16
  public static let Cobi: Swift.UInt16
  public static let Spivi: Swift.UInt16
  public static let MioMagellan: Swift.UInt16
  public static let Evesports: Swift.UInt16
  public static let SensitivusGauge: Swift.UInt16
  public static let Podoon: Swift.UInt16
  public static let LifeTimeFitness: Swift.UInt16
  public static let FalcoEMotors: Swift.UInt16
  public static let Minoura: Swift.UInt16
  public static let Cycliq: Swift.UInt16
  public static let Luxottica: Swift.UInt16
  public static let TrainerRoad: Swift.UInt16
  public static let TheSufferfest: Swift.UInt16
  public static let Fullspeedahead: Swift.UInt16
  public static let Virtualtraining: Swift.UInt16
  public static let Feedbacksports: Swift.UInt16
  public static let Omata: Swift.UInt16
  public static let Vdo: Swift.UInt16
  public static let Magneticdays: Swift.UInt16
  public static let Hammerhead: Swift.UInt16
  public static let KineticByKurt: Swift.UInt16
  public static let Shapelog: Swift.UInt16
  public static let Dabuziduo: Swift.UInt16
  public static let Jetblack: Swift.UInt16
  public static let Coros: Swift.UInt16
  public static let Virtugo: Swift.UInt16
  public static let Velosense: Swift.UInt16
  public static let Actigraphcorp: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
@_hasMissingDesignatedInitializers public class FileUtils {
  public static func getDocumentURL() -> Foundation.URL
  public static func getCacheURL() -> Foundation.URL
  public static func getCacheSize() -> Swift.UInt
  public static func clearCache(callBack: @escaping (Swift.Bool) -> ())
  public static func isExists(_ filePath: Swift.String) -> Swift.Bool
  public static func getFileSize(_ filePath: Swift.String) -> Swift.UInt
  public static func createDirectory(_ fileURL: Foundation.URL) -> Foundation.URL?
  public static func createFile(_ filePath: Swift.String) -> Swift.String?
  public static func readFile(_ filePath: Swift.String) -> [Swift.UInt8]?
  public static func removeFile(_ filePath: Swift.String) -> Swift.Bool
  public func getDefaultURL(type: GimKit.FileUtils.FileType) -> Foundation.URL
  @objc deinit
}
extension FileUtils {
  public enum FileType : Swift.UInt8, Swift.CustomStringConvertible {
    case OTHER
    case AUDIO
    case FIT
    case VIDEO
    case OTA
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
}
open class CustomDateFormatTransform : GimKit.DateFormatterTransform {
  public init(formatString: Swift.String)
  override public init(dateFormatter: Foundation.DateFormatter)
  @objc deinit
}
public struct CommTimeoutType {
  public static let WildcardPairingTimeout: Swift.UInt16
  public static let PairingTimeout: Swift.UInt16
  public static let ConnectionLost: Swift.UInt16
  public static let ConnectionTimeout: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct PlankExerciseName {
  public static let _45DegreePlank: Swift.UInt16
  public static let Weighted45DegreePlank: Swift.UInt16
  public static let _90DegreeStaticHold: Swift.UInt16
  public static let Weighted90DegreeStaticHold: Swift.UInt16
  public static let BearCrawl: Swift.UInt16
  public static let WeightedBearCrawl: Swift.UInt16
  public static let CrossBodyMountainClimber: Swift.UInt16
  public static let WeightedCrossBodyMountainClimber: Swift.UInt16
  public static let ElbowPlankPikeJacks: Swift.UInt16
  public static let WeightedElbowPlankPikeJacks: Swift.UInt16
  public static let ElevatedFeetPlank: Swift.UInt16
  public static let WeightedElevatedFeetPlank: Swift.UInt16
  public static let ElevatorAbs: Swift.UInt16
  public static let WeightedElevatorAbs: Swift.UInt16
  public static let ExtendedPlank: Swift.UInt16
  public static let WeightedExtendedPlank: Swift.UInt16
  public static let FullPlankPasseTwist: Swift.UInt16
  public static let WeightedFullPlankPasseTwist: Swift.UInt16
  public static let InchingElbowPlank: Swift.UInt16
  public static let WeightedInchingElbowPlank: Swift.UInt16
  public static let InchwormToSidePlank: Swift.UInt16
  public static let WeightedInchwormToSidePlank: Swift.UInt16
  public static let KneelingPlank: Swift.UInt16
  public static let WeightedKneelingPlank: Swift.UInt16
  public static let KneelingSidePlankWithLegLift: Swift.UInt16
  public static let WeightedKneelingSidePlankWithLegLift: Swift.UInt16
  public static let LateralRoll: Swift.UInt16
  public static let WeightedLateralRoll: Swift.UInt16
  public static let LyingReversePlank: Swift.UInt16
  public static let WeightedLyingReversePlank: Swift.UInt16
  public static let MedicineBallMountainClimber: Swift.UInt16
  public static let WeightedMedicineBallMountainClimber: Swift.UInt16
  public static let ModifiedMountainClimberAndExtension: Swift.UInt16
  public static let WeightedModifiedMountainClimberAndExtension: Swift.UInt16
  public static let MountainClimber: Swift.UInt16
  public static let WeightedMountainClimber: Swift.UInt16
  public static let MountainClimberOnSlidingDiscs: Swift.UInt16
  public static let WeightedMountainClimberOnSlidingDiscs: Swift.UInt16
  public static let MountainClimberWithFeetOnBosuBall: Swift.UInt16
  public static let WeightedMountainClimberWithFeetOnBosuBall: Swift.UInt16
  public static let MountainClimberWithHandsOnBench: Swift.UInt16
  public static let MountainClimberWithHandsOnSwissBall: Swift.UInt16
  public static let WeightedMountainClimberWithHandsOnSwissBall: Swift.UInt16
  public static let Plank: Swift.UInt16
  public static let PlankJacksWithFeetOnSlidingDiscs: Swift.UInt16
  public static let WeightedPlankJacksWithFeetOnSlidingDiscs: Swift.UInt16
  public static let PlankKneeTwist: Swift.UInt16
  public static let WeightedPlankKneeTwist: Swift.UInt16
  public static let PlankPikeJumps: Swift.UInt16
  public static let WeightedPlankPikeJumps: Swift.UInt16
  public static let PlankPikes: Swift.UInt16
  public static let WeightedPlankPikes: Swift.UInt16
  public static let PlankToStandUp: Swift.UInt16
  public static let WeightedPlankToStandUp: Swift.UInt16
  public static let PlankWithArmRaise: Swift.UInt16
  public static let WeightedPlankWithArmRaise: Swift.UInt16
  public static let PlankWithKneeToElbow: Swift.UInt16
  public static let WeightedPlankWithKneeToElbow: Swift.UInt16
  public static let PlankWithObliqueCrunch: Swift.UInt16
  public static let WeightedPlankWithObliqueCrunch: Swift.UInt16
  public static let PlyometricSidePlank: Swift.UInt16
  public static let WeightedPlyometricSidePlank: Swift.UInt16
  public static let RollingSidePlank: Swift.UInt16
  public static let WeightedRollingSidePlank: Swift.UInt16
  public static let SideKickPlank: Swift.UInt16
  public static let WeightedSideKickPlank: Swift.UInt16
  public static let SidePlank: Swift.UInt16
  public static let WeightedSidePlank: Swift.UInt16
  public static let SidePlankAndRow: Swift.UInt16
  public static let WeightedSidePlankAndRow: Swift.UInt16
  public static let SidePlankLift: Swift.UInt16
  public static let WeightedSidePlankLift: Swift.UInt16
  public static let SidePlankWithElbowOnBosuBall: Swift.UInt16
  public static let WeightedSidePlankWithElbowOnBosuBall: Swift.UInt16
  public static let SidePlankWithFeetOnBench: Swift.UInt16
  public static let WeightedSidePlankWithFeetOnBench: Swift.UInt16
  public static let SidePlankWithKneeCircle: Swift.UInt16
  public static let WeightedSidePlankWithKneeCircle: Swift.UInt16
  public static let SidePlankWithKneeTuck: Swift.UInt16
  public static let WeightedSidePlankWithKneeTuck: Swift.UInt16
  public static let SidePlankWithLegLift: Swift.UInt16
  public static let WeightedSidePlankWithLegLift: Swift.UInt16
  public static let SidePlankWithReachUnder: Swift.UInt16
  public static let WeightedSidePlankWithReachUnder: Swift.UInt16
  public static let SingleLegElevatedFeetPlank: Swift.UInt16
  public static let WeightedSingleLegElevatedFeetPlank: Swift.UInt16
  public static let SingleLegFlexAndExtend: Swift.UInt16
  public static let WeightedSingleLegFlexAndExtend: Swift.UInt16
  public static let SingleLegSidePlank: Swift.UInt16
  public static let WeightedSingleLegSidePlank: Swift.UInt16
  public static let SpidermanPlank: Swift.UInt16
  public static let WeightedSpidermanPlank: Swift.UInt16
  public static let StraightArmPlank: Swift.UInt16
  public static let WeightedStraightArmPlank: Swift.UInt16
  public static let StraightArmPlankWithShoulderTouch: Swift.UInt16
  public static let WeightedStraightArmPlankWithShoulderTouch: Swift.UInt16
  public static let SwissBallPlank: Swift.UInt16
  public static let WeightedSwissBallPlank: Swift.UInt16
  public static let SwissBallPlankLegLift: Swift.UInt16
  public static let WeightedSwissBallPlankLegLift: Swift.UInt16
  public static let SwissBallPlankLegLiftAndHold: Swift.UInt16
  public static let SwissBallPlankWithFeetOnBench: Swift.UInt16
  public static let WeightedSwissBallPlankWithFeetOnBench: Swift.UInt16
  public static let SwissBallProneJackknife: Swift.UInt16
  public static let WeightedSwissBallProneJackknife: Swift.UInt16
  public static let SwissBallSidePlank: Swift.UInt16
  public static let WeightedSwissBallSidePlank: Swift.UInt16
  public static let ThreeWayPlank: Swift.UInt16
  public static let WeightedThreeWayPlank: Swift.UInt16
  public static let TowelPlankAndKneeIn: Swift.UInt16
  public static let WeightedTowelPlankAndKneeIn: Swift.UInt16
  public static let TStabilization: Swift.UInt16
  public static let WeightedTStabilization: Swift.UInt16
  public static let TurkishGetUpToSidePlank: Swift.UInt16
  public static let WeightedTurkishGetUpToSidePlank: Swift.UInt16
  public static let TwoPointPlank: Swift.UInt16
  public static let WeightedTwoPointPlank: Swift.UInt16
  public static let WeightedPlank: Swift.UInt16
  public static let WideStancePlankWithDiagonalArmLift: Swift.UInt16
  public static let WeightedWideStancePlankWithDiagonalArmLift: Swift.UInt16
  public static let WideStancePlankWithDiagonalLegLift: Swift.UInt16
  public static let WeightedWideStancePlankWithDiagonalLegLift: Swift.UInt16
  public static let WideStancePlankWithLegLift: Swift.UInt16
  public static let WeightedWideStancePlankWithLegLift: Swift.UInt16
  public static let WideStancePlankWithOppositeArmAndLegLift: Swift.UInt16
  public static let WeightedMountainClimberWithHandsOnBench: Swift.UInt16
  public static let WeightedSwissBallPlankLegLiftAndHold: Swift.UInt16
  public static let WeightedWideStancePlankWithOppositeArmAndLegLift: Swift.UInt16
  public static let PlankWithFeetOnSwissBall: Swift.UInt16
  public static let SidePlankToPlankWithReachUnder: Swift.UInt16
  public static let BridgeWithGluteLowerLift: Swift.UInt16
  public static let BridgeOneLegBridge: Swift.UInt16
  public static let PlankWithArmVariations: Swift.UInt16
  public static let PlankWithLegLift: Swift.UInt16
  public static let ReversePlankWithLegPull: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class GyroscopeDataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case SampleTimeOffset
    case GyroX
    case GyroY
    case GyroZ
    case CalibratedGyroX
    case CalibratedGyroY
    case CalibratedGyroZ
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumSampleTimeOffset() -> Swift.Int
  public func getSampleTimeOffset(_ index: Swift.Int) -> Swift.UInt16?
  public func setSampleTimeOffset(_ index: Swift.Int, _ sampleTimeOffset: Swift.UInt16)
  public func getNumGyroX() -> Swift.Int
  public func getGyroX(_ index: Swift.Int) -> Swift.UInt16?
  public func setGyroX(_ index: Swift.Int, _ gyroX: Swift.UInt16)
  public func getNumGyroY() -> Swift.Int
  public func getGyroY(_ index: Swift.Int) -> Swift.UInt16?
  public func setGyroY(_ index: Swift.Int, _ gyroY: Swift.UInt16)
  public func getNumGyroZ() -> Swift.Int
  public func getGyroZ(_ index: Swift.Int) -> Swift.UInt16?
  public func setGyroZ(_ index: Swift.Int, _ gyroZ: Swift.UInt16)
  public func getNumCalibratedGyroX() -> Swift.Int
  public func getCalibratedGyroX(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedGyroX(_ index: Swift.Int, _ calibratedGyroX: Swift.Float32)
  public func getNumCalibratedGyroY() -> Swift.Int
  public func getCalibratedGyroY(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedGyroY(_ index: Swift.Int, _ calibratedGyroY: Swift.Float32)
  public func getNumCalibratedGyroZ() -> Swift.Int
  public func getCalibratedGyroZ(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedGyroZ(_ index: Swift.Int, _ calibratedGyroZ: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SegmentSelectionType : Swift.UInt8 {
  case Starred
  case Suggested
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum WeatherSevereType : Swift.UInt8 {
  case Unspecified
  case Tornado
  case Tsunami
  case Hurricane
  case ExtremeWind
  case Typhoon
  case InlandHurricane
  case HurricaneForceWind
  case Waterspout
  case SevereThunderstorm
  case WreckhouseWinds
  case LesSuetesWind
  case Avalanche
  case FlashFlood
  case TropicalStorm
  case InlandTropicalStorm
  case Blizzard
  case IceStorm
  case FreezingRain
  case DebrisFlow
  case FlashFreeze
  case DustStorm
  case HighWind
  case WinterStorm
  case HeavyFreezingSpray
  case ExtremeCold
  case WindChill
  case ColdWave
  case HeavySnowAlert
  case LakeEffectBlowingSnow
  case SnowSquall
  case LakeEffectSnow
  case WinterWeather
  case Sleet
  case Snowfall
  case SnowAndBlowingSnow
  case BlowingSnow
  case SnowAlert
  case ArcticOutflow
  case FreezingDrizzle
  case Storm
  case StormSurge
  case Rainfall
  case ArealFlood
  case CoastalFlood
  case LakeshoreFlood
  case ExcessiveHeat
  case Heat
  case Weather
  case HighHeatAndHumidity
  case HumidexAndHealth
  case Humidex
  case Gale
  case FreezingSpray
  case SpecialMarine
  case Squall
  case StrongWind
  case LakeWind
  case MarineWeather
  case Wind
  case SmallCraftHazardousSeas
  case HazardousSeas
  case SmallCraft
  case SmallCraftWinds
  case SmallCraftRoughBar
  case HighWaterLevel
  case Ashfall
  case FreezingFog
  case DenseFog
  case DenseSmoke
  case BlowingDust
  case HardFreeze
  case Freeze
  case Frost
  case FireWeather
  case Flood
  case RipTide
  case HighSurf
  case Smog
  case AirQuality
  case BriskWind
  case AirStagnation
  case LowWater
  case Hydrological
  case SpecialWeather
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class PowerZoneMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HighValue
    case Name
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHighValue() -> Swift.UInt16?
  public func setHighValue(_ highValue: Swift.UInt16)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct HipStabilityExerciseName {
  public static let BandSideLyingLegRaise: Swift.UInt16
  public static let DeadBug: Swift.UInt16
  public static let WeightedDeadBug: Swift.UInt16
  public static let ExternalHipRaise: Swift.UInt16
  public static let WeightedExternalHipRaise: Swift.UInt16
  public static let FireHydrantKicks: Swift.UInt16
  public static let WeightedFireHydrantKicks: Swift.UInt16
  public static let HipCircles: Swift.UInt16
  public static let WeightedHipCircles: Swift.UInt16
  public static let InnerThighLift: Swift.UInt16
  public static let WeightedInnerThighLift: Swift.UInt16
  public static let LateralWalksWithBandAtAnkles: Swift.UInt16
  public static let PretzelSideKick: Swift.UInt16
  public static let WeightedPretzelSideKick: Swift.UInt16
  public static let ProneHipInternalRotation: Swift.UInt16
  public static let WeightedProneHipInternalRotation: Swift.UInt16
  public static let Quadruped: Swift.UInt16
  public static let QuadrupedHipExtension: Swift.UInt16
  public static let WeightedQuadrupedHipExtension: Swift.UInt16
  public static let QuadrupedWithLegLift: Swift.UInt16
  public static let WeightedQuadrupedWithLegLift: Swift.UInt16
  public static let SideLyingLegRaise: Swift.UInt16
  public static let WeightedSideLyingLegRaise: Swift.UInt16
  public static let SlidingHipAdduction: Swift.UInt16
  public static let WeightedSlidingHipAdduction: Swift.UInt16
  public static let StandingAdduction: Swift.UInt16
  public static let WeightedStandingAdduction: Swift.UInt16
  public static let StandingCableHipAbduction: Swift.UInt16
  public static let StandingHipAbduction: Swift.UInt16
  public static let WeightedStandingHipAbduction: Swift.UInt16
  public static let StandingRearLegRaise: Swift.UInt16
  public static let WeightedStandingRearLegRaise: Swift.UInt16
  public static let SupineHipInternalRotation: Swift.UInt16
  public static let WeightedSupineHipInternalRotation: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class WatchfaceSettingsMesg : GimKit.Mesg {
  public enum LayoutSubfield : Swift.UInt16 {
    case DigitalLayout
    case AnalogLayout
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Mode
    case Layout
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getMode() -> GimKit.WatchfaceMode?
  public func setMode(_ mode: GimKit.WatchfaceMode)
  public func getLayout() -> Swift.UInt8?
  public func setLayout(_ layout: Swift.UInt8)
  public func getDigitalLayout() -> GimKit.DigitalWatchfaceLayout?
  public func setDigitalLayout(_ digitalLayout: GimKit.DigitalWatchfaceLayout)
  public func getAnalogLayout() -> GimKit.AnalogWatchfaceLayout?
  public func setAnalogLayout(_ analogLayout: GimKit.AnalogWatchfaceLayout)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class MetZoneMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HighBpm
    case Calories
    case FatCalories
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHighBpm() -> Swift.UInt8?
  public func setHighBpm(_ highBpm: Swift.UInt8)
  public func getCalories() -> Swift.Float32?
  public func setCalories(_ calories: Swift.Float32)
  public func getFatCalories() -> Swift.Float32?
  public func setFatCalories(_ fatCalories: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class DeviceSettingsMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ActiveTimeZone
    case UtcOffset
    case TimeOffset
    case TimeMode
    case TimeZoneOffset
    case BacklightMode
    case ActivityTrackerEnabled
    case ClockTime
    case PagesEnabled
    case MoveAlertEnabled
    case DateMode
    case DisplayOrientation
    case MountingSide
    case DefaultPage
    case AutosyncMinSteps
    case AutosyncMinTime
    case LactateThresholdAutodetectEnabled
    case BleAutoUploadEnabled
    case AutoSyncFrequency
    case AutoActivityDetect
    case NumberOfScreens
    case SmartNotificationDisplayOrientation
    case TapInterface
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getActiveTimeZone() -> Swift.UInt8?
  public func setActiveTimeZone(_ activeTimeZone: Swift.UInt8)
  public func getUtcOffset() -> Swift.UInt32?
  public func setUtcOffset(_ utcOffset: Swift.UInt32)
  public func getNumTimeOffset() -> Swift.Int
  public func getTimeOffset(_ index: Swift.Int) -> Swift.UInt32?
  public func setTimeOffset(_ index: Swift.Int, _ timeOffset: Swift.UInt32)
  public func getNumTimeMode() -> Swift.Int
  public func getTimeMode(_ index: Swift.Int) -> GimKit.TimeMode?
  public func setTimeMode(_ index: Swift.Int, _ timeMode: GimKit.TimeMode)
  public func getNumTimeZoneOffset() -> Swift.Int
  public func getTimeZoneOffset(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeZoneOffset(_ index: Swift.Int, _ timeZoneOffset: Swift.Float32)
  public func getBacklightMode() -> GimKit.BacklightMode?
  public func setBacklightMode(_ backlightMode: GimKit.BacklightMode)
  public func getActivityTrackerEnabled() -> GimKit.FitBool?
  public func setActivityTrackerEnabled(_ activityTrackerEnabled: GimKit.FitBool)
  public func getClockTime() -> GimKit.FitDateTime?
  public func setClockTime(_ clockTime: GimKit.FitDateTime)
  public func getNumPagesEnabled() -> Swift.Int
  public func getPagesEnabled(_ index: Swift.Int) -> Swift.UInt16?
  public func setPagesEnabled(_ index: Swift.Int, _ pagesEnabled: Swift.UInt16)
  public func getMoveAlertEnabled() -> GimKit.FitBool?
  public func setMoveAlertEnabled(_ moveAlertEnabled: GimKit.FitBool)
  public func getDateMode() -> GimKit.DateMode?
  public func setDateMode(_ dateMode: GimKit.DateMode)
  public func getDisplayOrientation() -> GimKit.DisplayOrientation?
  public func setDisplayOrientation(_ displayOrientation: GimKit.DisplayOrientation)
  public func getMountingSide() -> GimKit.Side?
  public func setMountingSide(_ mountingSide: GimKit.Side)
  public func getNumDefaultPage() -> Swift.Int
  public func getDefaultPage(_ index: Swift.Int) -> Swift.UInt16?
  public func setDefaultPage(_ index: Swift.Int, _ defaultPage: Swift.UInt16)
  public func getAutosyncMinSteps() -> Swift.UInt16?
  public func setAutosyncMinSteps(_ autosyncMinSteps: Swift.UInt16)
  public func getAutosyncMinTime() -> Swift.UInt16?
  public func setAutosyncMinTime(_ autosyncMinTime: Swift.UInt16)
  public func getLactateThresholdAutodetectEnabled() -> GimKit.FitBool?
  public func setLactateThresholdAutodetectEnabled(_ lactateThresholdAutodetectEnabled: GimKit.FitBool)
  public func getBleAutoUploadEnabled() -> GimKit.FitBool?
  public func setBleAutoUploadEnabled(_ bleAutoUploadEnabled: GimKit.FitBool)
  public func getAutoSyncFrequency() -> GimKit.AutoSyncFrequency?
  public func setAutoSyncFrequency(_ autoSyncFrequency: GimKit.AutoSyncFrequency)
  public func getAutoActivityDetect() -> Swift.UInt32?
  public func setAutoActivityDetect(_ autoActivityDetect: Swift.UInt32)
  public func getNumberOfScreens() -> Swift.UInt8?
  public func setNumberOfScreens(_ numberOfScreens: Swift.UInt8)
  public func getSmartNotificationDisplayOrientation() -> GimKit.DisplayOrientation?
  public func setSmartNotificationDisplayOrientation(_ smartNotificationDisplayOrientation: GimKit.DisplayOrientation)
  public func getTapInterface() -> GimKit.Switch?
  public func setTapInterface(_ tapInterface: GimKit.Switch)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum Sport : Swift.UInt8 {
  case Generic
  case Running
  case Cycling
  case Transition
  case FitnessEquipment
  case Swimming
  case Basketball
  case Soccer
  case Tennis
  case AmericanFootball
  case Training
  case Walking
  case CrossCountrySkiing
  case AlpineSkiing
  case Snowboarding
  case Rowing
  case Mountaineering
  case Hiking
  case Multisport
  case Paddling
  case Flying
  case EBiking
  case Motorcycling
  case Boating
  case Driving
  case Golf
  case HangGliding
  case HorsebackRiding
  case Hunting
  case Fishing
  case InlineSkating
  case RockClimbing
  case Sailing
  case IceSkating
  case SkyDiving
  case Snowshoeing
  case Snowmobiling
  case StandUpPaddleboarding
  case Surfing
  case Wakeboarding
  case WaterSkiing
  case Kayaking
  case Rafting
  case Windsurfing
  case Kitesurfing
  case Tactical
  case Jumpmaster
  case Boxing
  case FloorClimbing
  case All
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class TimestampCorrelationMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case FractionalTimestamp
    case SystemTimestamp
    case FractionalSystemTimestamp
    case LocalTimestamp
    case TimestampMs
    case SystemTimestampMs
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getFractionalTimestamp() -> Swift.Float32?
  public func setFractionalTimestamp(_ fractionalTimestamp: Swift.Float32)
  public func getSystemTimestamp() -> GimKit.FitDateTime?
  public func setSystemTimestamp(_ systemTimestamp: GimKit.FitDateTime)
  public func getFractionalSystemTimestamp() -> Swift.Float32?
  public func setFractionalSystemTimestamp(_ fractionalSystemTimestamp: Swift.Float32)
  public func getLocalTimestamp() -> Swift.UInt32?
  public func setLocalTimestamp(_ localTimestamp: Swift.UInt32)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getSystemTimestampMs() -> Swift.UInt16?
  public func setSystemTimestampMs(_ systemTimestampMs: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol GimKitMethodEncodedListener : AnyObject {
  func onMethodEncoded(frame: [Swift.UInt8], code: Swift.Int)
}
public enum DateMode : Swift.UInt8 {
  case DayMonth
  case MonthDay
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class GimKitRowermData {
  @objc deinit
}
public class DiveGasMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HeliumContent
    case OxygenContent
    case Status
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHeliumContent() -> Swift.UInt8?
  public func setHeliumContent(_ heliumContent: Swift.UInt8)
  public func getOxygenContent() -> Swift.UInt8?
  public func setOxygenContent(_ oxygenContent: Swift.UInt8)
  public func getStatus() -> GimKit.DiveGasStatus?
  public func setStatus(_ status: GimKit.DiveGasStatus)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class ScheduleMesg : GimKit.Mesg {
  public enum ProductSubfield : Swift.UInt16 {
    case GarminProduct
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Manufacturer
    case Product
    case SerialNumber
    case TimeCreated
    case Completed
    case `Type`
    case ScheduledTime
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  public func getProduct() -> Swift.UInt16?
  public func setProduct(_ product: Swift.UInt16)
  public func getGarminProduct() -> Swift.UInt16?
  public func setGarminProduct(_ garminProduct: Swift.UInt16)
  public func getSerialNumber() -> Swift.UInt32?
  public func setSerialNumber(_ serialNumber: Swift.UInt32)
  public func getTimeCreated() -> GimKit.FitDateTime?
  public func setTimeCreated(_ timeCreated: GimKit.FitDateTime)
  public func getCompleted() -> GimKit.FitBool?
  public func setCompleted(_ completed: GimKit.FitBool)
  public func getType() -> GimKit.Schedule?
  public func setType(_ type: GimKit.Schedule)
  public func getScheduledTime() -> Swift.UInt32?
  public func setScheduledTime(_ scheduledTime: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct HyperextensionExerciseName {
  public static let BackExtensionWithOppositeArmAndLegReach: Swift.UInt16
  public static let WeightedBackExtensionWithOppositeArmAndLegReach: Swift.UInt16
  public static let BaseRotations: Swift.UInt16
  public static let WeightedBaseRotations: Swift.UInt16
  public static let BentKneeReverseHyperextension: Swift.UInt16
  public static let WeightedBentKneeReverseHyperextension: Swift.UInt16
  public static let HollowHoldAndRoll: Swift.UInt16
  public static let WeightedHollowHoldAndRoll: Swift.UInt16
  public static let Kicks: Swift.UInt16
  public static let WeightedKicks: Swift.UInt16
  public static let KneeRaises: Swift.UInt16
  public static let WeightedKneeRaises: Swift.UInt16
  public static let KneelingSuperman: Swift.UInt16
  public static let WeightedKneelingSuperman: Swift.UInt16
  public static let LatPullDownWithRow: Swift.UInt16
  public static let MedicineBallDeadliftToReach: Swift.UInt16
  public static let OneArmOneLegRow: Swift.UInt16
  public static let OneArmRowWithBand: Swift.UInt16
  public static let OverheadLungeWithMedicineBall: Swift.UInt16
  public static let PlankKneeTucks: Swift.UInt16
  public static let WeightedPlankKneeTucks: Swift.UInt16
  public static let SideStep: Swift.UInt16
  public static let WeightedSideStep: Swift.UInt16
  public static let SingleLegBackExtension: Swift.UInt16
  public static let WeightedSingleLegBackExtension: Swift.UInt16
  public static let SpineExtension: Swift.UInt16
  public static let WeightedSpineExtension: Swift.UInt16
  public static let StaticBackExtension: Swift.UInt16
  public static let WeightedStaticBackExtension: Swift.UInt16
  public static let SupermanFromFloor: Swift.UInt16
  public static let WeightedSupermanFromFloor: Swift.UInt16
  public static let SwissBallBackExtension: Swift.UInt16
  public static let WeightedSwissBallBackExtension: Swift.UInt16
  public static let SwissBallHyperextension: Swift.UInt16
  public static let WeightedSwissBallHyperextension: Swift.UInt16
  public static let SwissBallOppositeArmAndLegLift: Swift.UInt16
  public static let WeightedSwissBallOppositeArmAndLegLift: Swift.UInt16
  public static let SupermanOnSwissBall: Swift.UInt16
  public static let Cobra: Swift.UInt16
  public static let SupineFloorBarre: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class WeightScaleMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case Weight
    case PercentFat
    case PercentHydration
    case VisceralFatMass
    case BoneMass
    case MuscleMass
    case BasalMet
    case PhysiqueRating
    case ActiveMet
    case MetabolicAge
    case VisceralFatRating
    case UserProfileIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getWeight() -> Swift.Float32?
  public func setWeight(_ weight: Swift.Float32)
  public func getPercentFat() -> Swift.Float32?
  public func setPercentFat(_ percentFat: Swift.Float32)
  public func getPercentHydration() -> Swift.Float32?
  public func setPercentHydration(_ percentHydration: Swift.Float32)
  public func getVisceralFatMass() -> Swift.Float32?
  public func setVisceralFatMass(_ visceralFatMass: Swift.Float32)
  public func getBoneMass() -> Swift.Float32?
  public func setBoneMass(_ boneMass: Swift.Float32)
  public func getMuscleMass() -> Swift.Float32?
  public func setMuscleMass(_ muscleMass: Swift.Float32)
  public func getBasalMet() -> Swift.Float32?
  public func setBasalMet(_ basalMet: Swift.Float32)
  public func getPhysiqueRating() -> Swift.UInt8?
  public func setPhysiqueRating(_ physiqueRating: Swift.UInt8)
  public func getActiveMet() -> Swift.Float32?
  public func setActiveMet(_ activeMet: Swift.Float32)
  public func getMetabolicAge() -> Swift.UInt8?
  public func setMetabolicAge(_ metabolicAge: Swift.UInt8)
  public func getVisceralFatRating() -> Swift.UInt8?
  public func setVisceralFatRating(_ visceralFatRating: Swift.UInt8)
  public func getUserProfileIndex() -> Swift.UInt16?
  public func setUserProfileIndex(_ userProfileIndex: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum DiveAlarmType : Swift.UInt8 {
  case Depth
  case Time
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum SegmentLapStatus : Swift.UInt8 {
  case End
  case Fail
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum SportEvent : Swift.UInt8 {
  case Uncategorized
  case Geocaching
  case Fitness
  case Recreation
  case Race
  case SpecialEvent
  case Training
  case Transportation
  case Touring
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum ExdDataUnits : Swift.UInt8 {
  case NoUnits
  case Laps
  case MilesPerHour
  case KilometersPerHour
  case FeetPerHour
  case MetersPerHour
  case DegreesCelsius
  case DegreesFarenheit
  case Zone
  case Gear
  case Rpm
  case Bpm
  case Degrees
  case Millimeters
  case Meters
  case Kilometers
  case Feet
  case Yards
  case Kilofeet
  case Miles
  case Time
  case EnumTurnType
  case Percent
  case Watts
  case WattsPerKilogram
  case EnumBatteryStatus
  case EnumBikeLightBeamAngleMode
  case EnumBikeLightBatteryStatus
  case EnumBikeLightNetworkConfigType
  case Lights
  case Seconds
  case Minutes
  case Hours
  case Calories
  case Kilojoules
  case Milliseconds
  case SecondPerMile
  case SecondPerKilometer
  case Centimeter
  case EnumCoursePoint
  case Bradians
  case EnumSport
  case InchesHg
  case MmHg
  case Mbars
  case HectoPascals
  case FeetPerMin
  case MetersPerMin
  case MetersPerSec
  case EightCardinal
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension AudioPlayer {
  public func muteSound(mute: Swift.Bool)
  public func resume()
  public func pause()
  public func previous()
  public func next()
  public func nextOrStop()
  public func stop()
  public func seek(to time: Foundation.TimeInterval, byAdaptingTimeToFitSeekableRanges: Swift.Bool = false, toleranceBefore: CoreMedia.CMTime = CMTime.positiveInfinity, toleranceAfter: CoreMedia.CMTime = CMTime.positiveInfinity, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  public func seekToSeekableRangeStart(padding: Foundation.TimeInterval, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  public func seekToSeekableRangeEnd(padding: Foundation.TimeInterval, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  public func remoteControlReceived(with event: UIKit.UIEvent)
}
extension Data : GimKit.Sendable {
  public func toBluetoothData() -> Foundation.Data
}
extension Data : GimKit.Receivable {
  public init(bluetoothData: Foundation.Data)
}
public enum FitBool : Swift.UInt8 {
  case False
  case True
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class SetMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case Duration
    case Repetitions
    case Weight
    case SetType
    case StartTime
    case Category
    case CategorySubtype
    case WeightDisplayUnit
    case MessageIndex
    case WktStepIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getDuration() -> Swift.Float32?
  public func setDuration(_ duration: Swift.Float32)
  public func getRepetitions() -> Swift.UInt16?
  public func setRepetitions(_ repetitions: Swift.UInt16)
  public func getWeight() -> Swift.Float32?
  public func setWeight(_ weight: Swift.Float32)
  public func getSetType() -> Swift.UInt8?
  public func setSetType(_ setType: Swift.UInt8)
  public func getStartTime() -> GimKit.FitDateTime?
  public func setStartTime(_ startTime: GimKit.FitDateTime)
  public func getNumCategory() -> Swift.Int
  public func getCategory(_ index: Swift.Int) -> Swift.UInt16?
  public func setCategory(_ index: Swift.Int, _ category: Swift.UInt16)
  public func getNumCategorySubtype() -> Swift.Int
  public func getCategorySubtype(_ index: Swift.Int) -> Swift.UInt16?
  public func setCategorySubtype(_ index: Swift.Int, _ categorySubtype: Swift.UInt16)
  public func getWeightDisplayUnit() -> Swift.UInt16?
  public func setWeightDisplayUnit(_ weightDisplayUnit: Swift.UInt16)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getWktStepIndex() -> Swift.UInt16?
  public func setWktStepIndex(_ wktStepIndex: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum Autoscroll : Swift.UInt8 {
  case None
  case Slow
  case Medium
  case Fast
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class SdmProfileMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Enabled
    case SdmAntId
    case SdmCalFactor
    case Odometer
    case SpeedSource
    case SdmAntIdTransType
    case OdometerRollover
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getSdmAntId() -> Swift.UInt16?
  public func setSdmAntId(_ sdmAntId: Swift.UInt16)
  public func getSdmCalFactor() -> Swift.Float32?
  public func setSdmCalFactor(_ sdmCalFactor: Swift.Float32)
  public func getOdometer() -> Swift.Float32?
  public func setOdometer(_ odometer: Swift.Float32)
  public func getSpeedSource() -> GimKit.FitBool?
  public func setSpeedSource(_ speedSource: GimKit.FitBool)
  public func getSdmAntIdTransType() -> Swift.UInt8?
  public func setSdmAntIdTransType(_ sdmAntIdTransType: Swift.UInt8)
  public func getOdometerRollover() -> Swift.UInt8?
  public func setOdometerRollover(_ odometerRollover: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class HrmProfileMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Enabled
    case HrmAntId
    case LogHrv
    case HrmAntIdTransType
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getHrmAntId() -> Swift.UInt16?
  public func setHrmAntId(_ hrmAntId: Swift.UInt16)
  public func getLogHrv() -> GimKit.FitBool?
  public func setLogHrv(_ logHrv: GimKit.FitBool)
  public func getHrmAntIdTransType() -> Swift.UInt8?
  public func setHrmAntIdTransType(_ hrmAntIdTransType: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class ExerciseTitleMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case ExerciseCategory
    case ExerciseName
    case WktStepName
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getExerciseCategory() -> Swift.UInt16?
  public func setExerciseCategory(_ exerciseCategory: Swift.UInt16)
  public func getExerciseName() -> Swift.UInt16?
  public func setExerciseName(_ exerciseName: Swift.UInt16)
  public func getNumWktStepName() -> Swift.Int
  public func getWktStepName(_ index: Swift.Int) -> [Swift.UInt8]?
  public func getWktStepNameAsString(_ index: Swift.Int) -> Swift.String?
  public func setWktStepName(_ index: Swift.Int, _ wktStepName: Swift.String)
  public func setWktStepName(_ index: Swift.Int, _ wktStepName: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct DeadliftExerciseName {
  public static let BarbellDeadlift: Swift.UInt16
  public static let BarbellStraightLegDeadlift: Swift.UInt16
  public static let DumbbellDeadlift: Swift.UInt16
  public static let DumbbellSingleLegDeadliftToRow: Swift.UInt16
  public static let DumbbellStraightLegDeadlift: Swift.UInt16
  public static let KettlebellFloorToShelf: Swift.UInt16
  public static let OneArmOneLegDeadlift: Swift.UInt16
  public static let RackPull: Swift.UInt16
  public static let RotationalDumbbellStraightLegDeadlift: Swift.UInt16
  public static let SingleArmDeadlift: Swift.UInt16
  public static let SingleLegBarbellDeadlift: Swift.UInt16
  public static let SingleLegBarbellStraightLegDeadlift: Swift.UInt16
  public static let SingleLegDeadliftWithBarbell: Swift.UInt16
  public static let SingleLegRdlCircuit: Swift.UInt16
  public static let SingleLegRomanianDeadliftWithDumbbell: Swift.UInt16
  public static let SumoDeadlift: Swift.UInt16
  public static let SumoDeadliftHighPull: Swift.UInt16
  public static let TrapBarDeadlift: Swift.UInt16
  public static let WideGripBarbellDeadlift: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum WaterType : Swift.UInt8 {
  case Fresh
  case Salt
  case En13319
  case Custom
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum GoalRecurrence : Swift.UInt8 {
  case Off
  case Daily
  case Weekly
  case Monthly
  case Yearly
  case Custom
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
open class DataTransform : GimKit.TransformType {
  public typealias Object = Foundation.Data
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Data?
  open func transformToJSON(_ value: Foundation.Data?) -> Swift.String?
  @objc deinit
}
public class FieldDefinition {
  public var num: Swift.UInt8 {
    get
  }
  public var size: Swift.UInt8 {
    get
  }
  public var type: Swift.UInt8 {
    get
  }
  public init(field: GimKit.Field)
  public init(newNum: Swift.UInt8, newSize: Swift.UInt8, newType: Swift.UInt8)
  public init(fieldDef: GimKit.FieldDefinition)
  @objc deinit
}
public class VideoTitleMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case MessageCount
    case Text
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getMessageCount() -> Swift.UInt16?
  public func setMessageCount(_ messageCount: Swift.UInt16)
  public func getText() -> [Swift.UInt8]?
  public func getTextAsString() -> Swift.String?
  public func setText(_ text: Swift.String)
  public func setText(_ text: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: GimKit.JSON) throws
  public func merged(with other: GimKit.JSON) throws -> GimKit.JSON
  public var type: GimKit.`Type` {
    get
  }
  public var error: GimKit.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: GimKit.JSON {
    get
  }
  public static var null: GimKit.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: GimKit.Index<T>, rhs: GimKit.Index<T>) -> Swift.Bool
  public static func < (lhs: GimKit.Index<T>, rhs: GimKit.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = GimKit.Index<GimKit.JSON>
public typealias JSONRawIndex = GimKit.Index<Any>
extension JSON : Swift.Collection {
  public typealias Index = GimKit.JSONRawIndex
  public var startIndex: GimKit.JSON.Index {
    get
  }
  public var endIndex: GimKit.JSON.Index {
    get
  }
  public func index(after i: GimKit.JSON.Index) -> GimKit.JSON.Index
  public subscript(position: GimKit.JSON.Index) -> (Swift.String, GimKit.JSON) {
    get
  }
  public typealias Element = (Swift.String, GimKit.JSON)
  public typealias Indices = Swift.DefaultIndices<GimKit.JSON>
  public typealias Iterator = Swift.IndexingIterator<GimKit.JSON>
  public typealias SubSequence = Swift.Slice<GimKit.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: GimKit.JSONKey { get }
}
extension Int : GimKit.JSONSubscriptType {
  public var jsonKey: GimKit.JSONKey {
    get
  }
}
extension String : GimKit.JSONSubscriptType {
  public var jsonKey: GimKit.JSONKey {
    get
  }
}
extension JSON {
  public subscript(path: [GimKit.JSONSubscriptType]) -> GimKit.JSON {
    get
    set
  }
  public subscript(path: GimKit.JSONSubscriptType...) -> GimKit.JSON {
    get
    set
  }
}
extension JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [GimKit.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension JSON {
  public var array: [GimKit.JSON]? {
    get
  }
  public var arrayValue: [GimKit.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension JSON {
  public var dictionary: [Swift.String : GimKit.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : GimKit.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension JSON : Swift.Comparable {
}
public func == (lhs: GimKit.JSON, rhs: GimKit.JSON) -> Swift.Bool
public func <= (lhs: GimKit.JSON, rhs: GimKit.JSON) -> Swift.Bool
public func >= (lhs: GimKit.JSON, rhs: GimKit.JSON) -> Swift.Bool
public func > (lhs: GimKit.JSON, rhs: GimKit.JSON) -> Swift.Bool
public func < (lhs: GimKit.JSON, rhs: GimKit.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: GimKit.writingOptionsKeys, b: GimKit.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension JSON : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class SlaveDeviceMesg : GimKit.Mesg {
  public enum ProductSubfield : Swift.UInt16 {
    case GarminProduct
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Manufacturer
    case Product
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  public func getProduct() -> Swift.UInt16?
  public func setProduct(_ product: Swift.UInt16)
  public func getGarminProduct() -> Swift.UInt16?
  public func setGarminProduct(_ garminProduct: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public typealias Image = UIKit.UIImage
public enum AudioQuality : Swift.Int {
  case low
  case medium
  case high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct AudioItemURL {
  public let quality: GimKit.AudioQuality
  public let url: Foundation.URL
  public init?(quality: GimKit.AudioQuality, url: Foundation.URL?)
}
@objc open class AudioItem : ObjectiveC.NSObject {
  final public let soundURLs: [GimKit.AudioQuality : Foundation.URL]
  convenience public init?(highQualitySoundURL: Foundation.URL? = nil, mediumQualitySoundURL: Foundation.URL? = nil, lowQualitySoundURL: Foundation.URL? = nil)
  public init?(soundURLs: [GimKit.AudioQuality : Foundation.URL])
  open var highestQualityURL: GimKit.AudioItemURL {
    get
  }
  open var mediumQualityURL: GimKit.AudioItemURL {
    get
  }
  open var lowestQualityURL: GimKit.AudioItemURL {
    get
  }
  @objc dynamic open var artist: Swift.String?
  @objc dynamic open var title: Swift.String?
  @objc dynamic open var album: Swift.String?
  @objc dynamic open var trackCount: Foundation.NSNumber?
  @objc dynamic open var trackNumber: Foundation.NSNumber?
  open var artworkImage: GimKit.Image? {
    get
    set
  }
  @objc dynamic open var artwork: MediaPlayer.MPMediaItemArtwork?
  open func parseMetadata(_ items: [AVFoundation.AVMetadataItem])
  @objc override dynamic public init()
  @objc deinit
}
public enum ActivityLevel : Swift.UInt8 {
  case Low
  case Medium
  case High
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct FlyeExerciseName {
  public static let CableCrossover: Swift.UInt16
  public static let DeclineDumbbellFlye: Swift.UInt16
  public static let DumbbellFlye: Swift.UInt16
  public static let InclineDumbbellFlye: Swift.UInt16
  public static let KettlebellFlye: Swift.UInt16
  public static let KneelingRearFlye: Swift.UInt16
  public static let SingleArmStandingCableReverseFlye: Swift.UInt16
  public static let SwissBallDumbbellFlye: Swift.UInt16
  public static let ArmRotations: Swift.UInt16
  public static let HugATree: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class SegmentIdMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Name
    case Uuid
    case Sport
    case Enabled
    case UserProfilePrimaryKey
    case DeviceId
    case DefaultRaceLeader
    case DeleteStatus
    case SelectionType
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getUuid() -> [Swift.UInt8]?
  public func getUuidAsString() -> Swift.String?
  public func setUuid(_ uuid: Swift.String)
  public func setUuid(_ uuid: [Swift.UInt8])
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getUserProfilePrimaryKey() -> Swift.UInt32?
  public func setUserProfilePrimaryKey(_ userProfilePrimaryKey: Swift.UInt32)
  public func getDeviceId() -> Swift.UInt32?
  public func setDeviceId(_ deviceId: Swift.UInt32)
  public func getDefaultRaceLeader() -> Swift.UInt8?
  public func setDefaultRaceLeader(_ defaultRaceLeader: Swift.UInt8)
  public func getDeleteStatus() -> GimKit.SegmentDeleteStatus?
  public func setDeleteStatus(_ deleteStatus: GimKit.SegmentDeleteStatus)
  public func getSelectionType() -> GimKit.SegmentSelectionType?
  public func setSelectionType(_ selectionType: GimKit.SegmentSelectionType)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class ExdDataConceptConfigurationMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ScreenIndex
    case ConceptField
    case FieldId
    case ConceptIndex
    case DataPage
    case ConceptKey
    case Scaling
    case DataUnits
    case Qualifier
    case Descriptor
    case IsSigned
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getScreenIndex() -> Swift.UInt8?
  public func setScreenIndex(_ screenIndex: Swift.UInt8)
  public func getConceptField() -> Swift.UInt8?
  public func setConceptField(_ conceptField: Swift.UInt8)
  public func getFieldId() -> Swift.UInt8?
  public func setFieldId(_ fieldId: Swift.UInt8)
  public func getConceptIndex() -> Swift.UInt8?
  public func setConceptIndex(_ conceptIndex: Swift.UInt8)
  public func getDataPage() -> Swift.UInt8?
  public func setDataPage(_ dataPage: Swift.UInt8)
  public func getConceptKey() -> Swift.UInt8?
  public func setConceptKey(_ conceptKey: Swift.UInt8)
  public func getScaling() -> Swift.UInt8?
  public func setScaling(_ scaling: Swift.UInt8)
  public func getDataUnits() -> GimKit.ExdDataUnits?
  public func setDataUnits(_ dataUnits: GimKit.ExdDataUnits)
  public func getQualifier() -> GimKit.ExdQualifiers?
  public func setQualifier(_ qualifier: GimKit.ExdQualifiers)
  public func getDescriptor() -> GimKit.ExdDescriptors?
  public func setDescriptor(_ descriptor: GimKit.ExdDescriptors)
  public func getIsSigned() -> GimKit.FitBool?
  public func setIsSigned(_ isSigned: GimKit.FitBool)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class TotalsMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case TimerTime
    case Distance
    case Calories
    case Sport
    case ElapsedTime
    case Sessions
    case ActiveTime
    case SportIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimerTime() -> Swift.UInt32?
  public func setTimerTime(_ timerTime: Swift.UInt32)
  public func getDistance() -> Swift.UInt32?
  public func setDistance(_ distance: Swift.UInt32)
  public func getCalories() -> Swift.UInt32?
  public func setCalories(_ calories: Swift.UInt32)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getElapsedTime() -> Swift.UInt32?
  public func setElapsedTime(_ elapsedTime: Swift.UInt32)
  public func getSessions() -> Swift.UInt16?
  public func setSessions(_ sessions: Swift.UInt16)
  public func getActiveTime() -> Swift.UInt32?
  public func setActiveTime(_ activeTime: Swift.UInt32)
  public func getSportIndex() -> Swift.UInt8?
  public func setSportIndex(_ sportIndex: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol _ExtendCustomModelType : GimKit._Transformable {
  init()
  mutating func willStartMapping()
  mutating func mapping(mapper: GimKit.HelpingMapper)
  mutating func didFinishMapping()
}
extension _ExtendCustomModelType {
  public mutating func willStartMapping()
  public mutating func mapping(mapper: GimKit.HelpingMapper)
  public mutating func didFinishMapping()
}
public enum CameraEventType : Swift.UInt8 {
  case VideoStart
  case VideoSplit
  case VideoEnd
  case PhotoTaken
  case VideoSecondStreamStart
  case VideoSecondStreamSplit
  case VideoSecondStreamEnd
  case VideoSplitStart
  case VideoSecondStreamSplitStart
  case VideoPause
  case VideoSecondStreamPause
  case VideoResume
  case VideoSecondStreamResume
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol _ExtendCustomBasicType : GimKit._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
open class DateFormatterTransform : GimKit.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.String
  final public let dateFormatter: Foundation.DateFormatter
  public init(dateFormatter: Foundation.DateFormatter)
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.String?
  @objc deinit
}
public enum HrType : Swift.UInt8 {
  case Normal
  case Irregular
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol GimKitDeviceObserver : AnyObject {
  func onInstantDataReceived(device: GimKit.GimKitDevice, cadence: Swift.Int, power: Swift.Double, torque: Swift.Double)
  func onConnectionChanged(device: GimKit.GimKitDevice, status: Swift.Int, errorCause: Swift.Int)
  func onKeyEvent(device: GimKit.GimKitDevice, code: Swift.Int, state: Swift.Int)
  func onKnobRotation(device: GimKit.GimKitDevice, rotation: Swift.Int)
  func onDeviceID(device: GimKit.GimKitDevice, deviceID: Swift.Int)
  func onBrakeEvent(device: GimKit.GimKitDevice)
  func onDeviceModel(device: GimKit.GimKitDevice, deviceModel: Swift.String)
  func onDeviceInfo(device: GimKit.GimKitDevice, deviceInfo: GimKit.GimKitDeviceInfo?)
  func onDevicePid(device: GimKit.GimKitDevice, devicePid: Swift.String?)
  func onHeartrateMeasured(heartrate: Swift.Int)
  func onStrengthDataReceived(device: GimKit.GimKitDevice, flag: Swift.Int, tension: Swift.Int, speed: Swift.Double, power: Swift.Double, position: Swift.Double, mcStatus: Swift.Int, mcTemperature: Swift.Double)
  func onRowermDataReceived(device: GimKit.GimKitDevice, grd: GimKit.GimKitRowermData)
  func onXbikeDataReceived(device: GimKit.GimKitDevice, gxd: GimKit.GimKitXbikeData)
}
public class DiveSummaryMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case ReferenceMesg
    case ReferenceIndex
    case AvgDepth
    case MaxDepth
    case SurfaceInterval
    case StartCns
    case EndCns
    case StartN2
    case EndN2
    case O2Toxicity
    case DiveNumber
    case BottomTime
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getReferenceMesg() -> Swift.UInt16?
  public func setReferenceMesg(_ referenceMesg: Swift.UInt16)
  public func getReferenceIndex() -> Swift.UInt16?
  public func setReferenceIndex(_ referenceIndex: Swift.UInt16)
  public func getAvgDepth() -> Swift.Float32?
  public func setAvgDepth(_ avgDepth: Swift.Float32)
  public func getMaxDepth() -> Swift.Float32?
  public func setMaxDepth(_ maxDepth: Swift.Float32)
  public func getSurfaceInterval() -> Swift.UInt32?
  public func setSurfaceInterval(_ surfaceInterval: Swift.UInt32)
  public func getStartCns() -> Swift.UInt8?
  public func setStartCns(_ startCns: Swift.UInt8)
  public func getEndCns() -> Swift.UInt8?
  public func setEndCns(_ endCns: Swift.UInt8)
  public func getStartN2() -> Swift.UInt16?
  public func setStartN2(_ startN2: Swift.UInt16)
  public func getEndN2() -> Swift.UInt16?
  public func setEndN2(_ endN2: Swift.UInt16)
  public func getO2Toxicity() -> Swift.UInt16?
  public func setO2Toxicity(_ o2Toxicity: Swift.UInt16)
  public func getDiveNumber() -> Swift.UInt32?
  public func setDiveNumber(_ diveNumber: Swift.UInt32)
  public func getBottomTime() -> Swift.Float32?
  public func setBottomTime(_ bottomTime: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct LanguageBits1 {
  public static let Dutch: Swift.UInt8
  public static let Finnish: Swift.UInt8
  public static let Greek: Swift.UInt8
  public static let Hungarian: Swift.UInt8
  public static let Norwegian: Swift.UInt8
  public static let Polish: Swift.UInt8
  public static let Portuguese: Swift.UInt8
  public static let Slovakian: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
open class HexColorTransform : GimKit.TransformType {
  public typealias Object = UIKit.UIColor
  public typealias JSON = Swift.String
  public init(prefixToJSON: Swift.Bool = false, alphaToJSON: Swift.Bool = false)
  open func transformFromJSON(_ value: Any?) -> GimKit.HexColorTransform.Object?
  open func transformToJSON(_ value: GimKit.HexColorTransform.Object?) -> GimKit.HexColorTransform.JSON?
  @objc deinit
}
public enum WktStepDuration : Swift.UInt8 {
  case Time
  case Distance
  case HrLessThan
  case HrGreaterThan
  case Calories
  case Open
  case RepeatUntilStepsCmplt
  case RepeatUntilTime
  case RepeatUntilDistance
  case RepeatUntilCalories
  case RepeatUntilHrLessThan
  case RepeatUntilHrGreaterThan
  case RepeatUntilPowerLessThan
  case RepeatUntilPowerGreaterThan
  case PowerLessThan
  case PowerGreaterThan
  case TrainingPeaksTss
  case RepeatUntilPowerLastLapLessThan
  case RepeatUntilMaxPowerLastLapLessThan
  case Power3sLessThan
  case Power10sLessThan
  case Power30sLessThan
  case Power3sGreaterThan
  case Power10sGreaterThan
  case Power30sGreaterThan
  case PowerLapLessThan
  case PowerLapGreaterThan
  case RepeatUntilTrainingPeaksTss
  case RepetitionTime
  case Reps
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class VideoMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Url
    case HostingProvider
    case Duration
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getUrl() -> [Swift.UInt8]?
  public func getUrlAsString() -> Swift.String?
  public func setUrl(_ url: Swift.String)
  public func setUrl(_ url: [Swift.UInt8])
  public func getHostingProvider() -> [Swift.UInt8]?
  public func getHostingProviderAsString() -> Swift.String?
  public func setHostingProvider(_ hostingProvider: Swift.String)
  public func setHostingProvider(_ hostingProvider: [Swift.UInt8])
  public func getDuration() -> Swift.UInt32?
  public func setDuration(_ duration: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol _Measurable {
}
public struct PlyoExerciseName {
  public static let AlternatingJumpLunge: Swift.UInt16
  public static let WeightedAlternatingJumpLunge: Swift.UInt16
  public static let BarbellJumpSquat: Swift.UInt16
  public static let BodyWeightJumpSquat: Swift.UInt16
  public static let WeightedJumpSquat: Swift.UInt16
  public static let CrossKneeStrike: Swift.UInt16
  public static let WeightedCrossKneeStrike: Swift.UInt16
  public static let DepthJump: Swift.UInt16
  public static let WeightedDepthJump: Swift.UInt16
  public static let DumbbellJumpSquat: Swift.UInt16
  public static let DumbbellSplitJump: Swift.UInt16
  public static let FrontKneeStrike: Swift.UInt16
  public static let WeightedFrontKneeStrike: Swift.UInt16
  public static let HighBoxJump: Swift.UInt16
  public static let WeightedHighBoxJump: Swift.UInt16
  public static let IsometricExplosiveBodyWeightJumpSquat: Swift.UInt16
  public static let WeightedIsometricExplosiveJumpSquat: Swift.UInt16
  public static let LateralLeapAndHop: Swift.UInt16
  public static let WeightedLateralLeapAndHop: Swift.UInt16
  public static let LateralPlyoSquats: Swift.UInt16
  public static let WeightedLateralPlyoSquats: Swift.UInt16
  public static let LateralSlide: Swift.UInt16
  public static let WeightedLateralSlide: Swift.UInt16
  public static let MedicineBallOverheadThrows: Swift.UInt16
  public static let MedicineBallSideThrow: Swift.UInt16
  public static let MedicineBallSlam: Swift.UInt16
  public static let SideToSideMedicineBallThrows: Swift.UInt16
  public static let SideToSideShuffleJump: Swift.UInt16
  public static let WeightedSideToSideShuffleJump: Swift.UInt16
  public static let SquatJumpOntoBox: Swift.UInt16
  public static let WeightedSquatJumpOntoBox: Swift.UInt16
  public static let SquatJumpsInAndOut: Swift.UInt16
  public static let WeightedSquatJumpsInAndOut: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class GpsMetadataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case PositionLat
    case PositionLong
    case EnhancedAltitude
    case EnhancedSpeed
    case Heading
    case UtcTimestamp
    case Velocity
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getPositionLat() -> Swift.Int32?
  public func setPositionLat(_ positionLat: Swift.Int32)
  public func getPositionLong() -> Swift.Int32?
  public func setPositionLong(_ positionLong: Swift.Int32)
  public func getEnhancedAltitude() -> Swift.Float32?
  public func setEnhancedAltitude(_ enhancedAltitude: Swift.Float32)
  public func getEnhancedSpeed() -> Swift.Float32?
  public func setEnhancedSpeed(_ enhancedSpeed: Swift.Float32)
  public func getHeading() -> Swift.Float32?
  public func setHeading(_ heading: Swift.Float32)
  public func getUtcTimestamp() -> GimKit.FitDateTime?
  public func setUtcTimestamp(_ utcTimestamp: GimKit.FitDateTime)
  public func getNumVelocity() -> Swift.Int
  public func getVelocity(_ index: Swift.Int) -> Swift.Int16?
  public func setVelocity(_ index: Swift.Int, _ velocity: Swift.Int16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct SupportedExdScreenLayouts {
  public static let FullScreen: Swift.UInt32
  public static let HalfVertical: Swift.UInt32
  public static let HalfHorizontal: Swift.UInt32
  public static let HalfVerticalRightSplit: Swift.UInt32
  public static let HalfHorizontalBottomSplit: Swift.UInt32
  public static let FullQuarterSplit: Swift.UInt32
  public static let HalfVerticalLeftSplit: Swift.UInt32
  public static let HalfHorizontalTopSplit: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public enum ActivitySubtype : Swift.UInt8 {
  case Generic
  case Treadmill
  case Street
  case Trail
  case Track
  case Spin
  case IndoorCycling
  case Road
  case Mountain
  case Downhill
  case Recumbent
  case Cyclocross
  case HandCycling
  case TrackCycling
  case IndoorRowing
  case Elliptical
  case StairClimbing
  case LapSwimming
  case OpenWater
  case All
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TimerTrigger : Swift.UInt8 {
  case Manual
  case Auto
  case FitnessEquipment
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct FileFlags {
  public static let Read: Swift.UInt8
  public static let Write: Swift.UInt8
  public static let Erase: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
@_hasMissingDesignatedInitializers public class Subfield {
  public func canMesgSupport(mesg: GimKit.Mesg) -> Swift.Bool
  @objc deinit
}
public struct Weight {
  public static let Calculating: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum WeatherSeverity : Swift.UInt8 {
  case Unknown
  case Warning
  case Watch
  case Advisory
  case Statement
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol Receivable {
  init(bluetoothData: Foundation.Data) throws
}
public protocol ConnectionObserver : AnyObject {
  func bluetoothAvailable(_ available: Swift.Bool)
  func connected(to peripheral: GimKit.PeripheralIdentifier)
  func disconnected(from peripheral: GimKit.PeripheralIdentifier)
}
extension ConnectionObserver {
  public func bluetoothAvailable(_ available: Swift.Bool)
  public func connected(to peripheral: GimKit.PeripheralIdentifier)
  public func disconnected(from peripheral: GimKit.PeripheralIdentifier)
}
public struct ServiceIdentifier {
  public var uuid: CoreBluetooth.CBUUID {
    get
  }
  public init(uuid: Swift.String)
  public init(uuid: CoreBluetooth.CBUUID)
}
extension ServiceIdentifier : Swift.Hashable {
  public static func == (lhs: GimKit.ServiceIdentifier, rhs: GimKit.ServiceIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LengthType : Swift.UInt8 {
  case Idle
  case Active
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension URL {
  public var attributes: [Foundation.FileAttributeKey : Any]? {
    get
  }
  public var fileSize: Swift.Int {
    get
  }
  public var creationDate: Foundation.Date? {
    get
  }
}
public enum MesgCount : Swift.UInt8 {
  case NumPerFile
  case MaxPerFile
  case MaxPerFileType
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum PwrZoneCalc : Swift.UInt8 {
  case Custom
  case PercentFtp
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum WatchfaceMode : Swift.UInt8 {
  case Digital
  case Analog
  case ConnectIq
  case Disabled
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum CoursePoint : Swift.UInt8 {
  case Generic
  case Summit
  case Valley
  case Water
  case Food
  case Danger
  case Left
  case Right
  case Straight
  case FirstAid
  case FourthCategory
  case ThirdCategory
  case SecondCategory
  case FirstCategory
  case HorsCategory
  case Sprint
  case LeftFork
  case RightFork
  case MiddleFork
  case SlightLeft
  case SharpLeft
  case SlightRight
  case SharpRight
  case UTurn
  case SegmentStart
  case SegmentEnd
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum StrokeType : Swift.UInt8 {
  case NoEvent
  case Other
  case Serve
  case Forehand
  case Backhand
  case Smash
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class WorkoutSessionMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Sport
    case SubSport
    case NumValidSteps
    case FirstStepIndex
    case PoolLength
    case PoolLengthUnit
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getNumValidSteps() -> Swift.UInt16?
  public func setNumValidSteps(_ numValidSteps: Swift.UInt16)
  public func getFirstStepIndex() -> Swift.UInt16?
  public func setFirstStepIndex(_ firstStepIndex: Swift.UInt16)
  public func getPoolLength() -> Swift.Float32?
  public func setPoolLength(_ poolLength: Swift.Float32)
  public func getPoolLengthUnit() -> GimKit.DisplayMeasure?
  public func setPoolLengthUnit(_ poolLengthUnit: GimKit.DisplayMeasure)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct CardioExerciseName {
  public static let BobAndWeaveCircle: Swift.UInt16
  public static let WeightedBobAndWeaveCircle: Swift.UInt16
  public static let CardioCoreCrawl: Swift.UInt16
  public static let WeightedCardioCoreCrawl: Swift.UInt16
  public static let DoubleUnder: Swift.UInt16
  public static let WeightedDoubleUnder: Swift.UInt16
  public static let JumpRope: Swift.UInt16
  public static let WeightedJumpRope: Swift.UInt16
  public static let JumpRopeCrossover: Swift.UInt16
  public static let WeightedJumpRopeCrossover: Swift.UInt16
  public static let JumpRopeJog: Swift.UInt16
  public static let WeightedJumpRopeJog: Swift.UInt16
  public static let JumpingJacks: Swift.UInt16
  public static let WeightedJumpingJacks: Swift.UInt16
  public static let SkiMoguls: Swift.UInt16
  public static let WeightedSkiMoguls: Swift.UInt16
  public static let SplitJacks: Swift.UInt16
  public static let WeightedSplitJacks: Swift.UInt16
  public static let SquatJacks: Swift.UInt16
  public static let WeightedSquatJacks: Swift.UInt16
  public static let TripleUnder: Swift.UInt16
  public static let WeightedTripleUnder: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct LeftRightBalance {
  public static let Mask: Swift.UInt8
  public static let Right: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
extension CBPeripheralState {
  public func string() -> Swift.String
}
public struct CurlExerciseName {
  public static let AlternatingDumbbellBicepsCurl: Swift.UInt16
  public static let AlternatingDumbbellBicepsCurlOnSwissBall: Swift.UInt16
  public static let AlternatingInclineDumbbellBicepsCurl: Swift.UInt16
  public static let BarbellBicepsCurl: Swift.UInt16
  public static let BarbellReverseWristCurl: Swift.UInt16
  public static let BarbellWristCurl: Swift.UInt16
  public static let BehindTheBackBarbellReverseWristCurl: Swift.UInt16
  public static let BehindTheBackOneArmCableCurl: Swift.UInt16
  public static let CableBicepsCurl: Swift.UInt16
  public static let CableHammerCurl: Swift.UInt16
  public static let CheatingBarbellBicepsCurl: Swift.UInt16
  public static let CloseGripEzBarBicepsCurl: Swift.UInt16
  public static let CrossBodyDumbbellHammerCurl: Swift.UInt16
  public static let DeadHangBicepsCurl: Swift.UInt16
  public static let DeclineHammerCurl: Swift.UInt16
  public static let DumbbellBicepsCurlWithStaticHold: Swift.UInt16
  public static let DumbbellHammerCurl: Swift.UInt16
  public static let DumbbellReverseWristCurl: Swift.UInt16
  public static let DumbbellWristCurl: Swift.UInt16
  public static let EzBarPreacherCurl: Swift.UInt16
  public static let ForwardBendBicepsCurl: Swift.UInt16
  public static let HammerCurlToPress: Swift.UInt16
  public static let InclineDumbbellBicepsCurl: Swift.UInt16
  public static let InclineOffsetThumbDumbbellCurl: Swift.UInt16
  public static let KettlebellBicepsCurl: Swift.UInt16
  public static let LyingConcentrationCableCurl: Swift.UInt16
  public static let OneArmPreacherCurl: Swift.UInt16
  public static let PlatePinchCurl: Swift.UInt16
  public static let PreacherCurlWithCable: Swift.UInt16
  public static let ReverseEzBarCurl: Swift.UInt16
  public static let ReverseGripWristCurl: Swift.UInt16
  public static let ReverseGripBarbellBicepsCurl: Swift.UInt16
  public static let SeatedAlternatingDumbbellBicepsCurl: Swift.UInt16
  public static let SeatedDumbbellBicepsCurl: Swift.UInt16
  public static let SeatedReverseDumbbellCurl: Swift.UInt16
  public static let SplitStanceOffsetPinkyDumbbellCurl: Swift.UInt16
  public static let StandingAlternatingDumbbellCurls: Swift.UInt16
  public static let StandingDumbbellBicepsCurl: Swift.UInt16
  public static let StandingEzBarBicepsCurl: Swift.UInt16
  public static let StaticCurl: Swift.UInt16
  public static let SwissBallDumbbellOverheadTricepsExtension: Swift.UInt16
  public static let SwissBallEzBarPreacherCurl: Swift.UInt16
  public static let TwistingStandingDumbbellBicepsCurl: Swift.UInt16
  public static let WideGripEzBarBicepsCurl: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct LocaltimeIntoDay {
  public static let Invalid: Swift.UInt32
}
public struct CarryExerciseName {
  public static let BarHolds: Swift.UInt16
  public static let FarmersWalk: Swift.UInt16
  public static let FarmersWalkOnToes: Swift.UInt16
  public static let HexDumbbellHold: Swift.UInt16
  public static let OverheadCarry: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public protocol Sendable {
  func toBluetoothData() -> Foundation.Data
}
public enum ReadResult<R> {
  case success(R)
  case failure(Swift.Error)
}
public struct BacklightTimeout {
  public static let Infinite: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public struct DeviceIndex {
  public static let Creator: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public typealias ListenCallback = (GimKit.ReadResult<Foundation.Data?>) -> Swift.Void
public enum DiveBacklightMode : Swift.UInt8 {
  case AtDepth
  case AlwaysOn
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct ExerciseCategory {
  public static let BenchPress: Swift.UInt16
  public static let CalfRaise: Swift.UInt16
  public static let Cardio: Swift.UInt16
  public static let Carry: Swift.UInt16
  public static let Chop: Swift.UInt16
  public static let Core: Swift.UInt16
  public static let Crunch: Swift.UInt16
  public static let Curl: Swift.UInt16
  public static let Deadlift: Swift.UInt16
  public static let Flye: Swift.UInt16
  public static let HipRaise: Swift.UInt16
  public static let HipStability: Swift.UInt16
  public static let HipSwing: Swift.UInt16
  public static let Hyperextension: Swift.UInt16
  public static let LateralRaise: Swift.UInt16
  public static let LegCurl: Swift.UInt16
  public static let LegRaise: Swift.UInt16
  public static let Lunge: Swift.UInt16
  public static let OlympicLift: Swift.UInt16
  public static let Plank: Swift.UInt16
  public static let Plyo: Swift.UInt16
  public static let PullUp: Swift.UInt16
  public static let PushUp: Swift.UInt16
  public static let Row: Swift.UInt16
  public static let ShoulderPress: Swift.UInt16
  public static let ShoulderStability: Swift.UInt16
  public static let Shrug: Swift.UInt16
  public static let SitUp: Swift.UInt16
  public static let Squat: Swift.UInt16
  public static let TotalBody: Swift.UInt16
  public static let TricepsExtension: Swift.UInt16
  public static let WarmUp: Swift.UInt16
  public static let Run: Swift.UInt16
  public static let Unknown: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct GimKitDevice {
  public let peripheralIdentifier: GimKit.PeripheralIdentifier
  public let rssi: Swift.Int
  public var mac: Swift.String?
  public init(peripheralIdentifier: GimKit.PeripheralIdentifier, advertisementPacket: [Swift.String : Any], rssi: Swift.Int, mac: Swift.String?, name: Swift.String?, model: Swift.String?, deviceType: GimKit.GimKitDeviceType, vin: Swift.String?)
  public func getUniqueKey() -> Swift.String
  public func getDeviceType() -> GimKit.GimKitDeviceType
  public func getVin() -> Swift.String
  public func getMac() -> Swift.String
}
public class FileCreatorMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case SoftwareVersion
    case HardwareVersion
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getSoftwareVersion() -> Swift.UInt16?
  public func setSoftwareVersion(_ softwareVersion: Swift.UInt16)
  public func getHardwareVersion() -> Swift.UInt8?
  public func setHardwareVersion(_ hardwareVersion: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class NmeaSentenceMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case Sentence
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getSentence() -> [Swift.UInt8]?
  public func getSentenceAsString() -> Swift.String?
  public func setSentence(_ sentence: Swift.String)
  public func setSentence(_ sentence: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct AutoActivityDetect {
  public static let None: Swift.UInt32
  public static let Running: Swift.UInt32
  public static let Cycling: Swift.UInt32
  public static let Swimming: Swift.UInt32
  public static let Walking: Swift.UInt32
  public static let Elliptical: Swift.UInt32
  public static let Sedentary: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public class EventMesg : GimKit.Mesg {
  public enum DataSubfield : Swift.UInt16 {
    case TimerTrigger
    case CoursePointIndex
    case BatteryLevel
    case VirtualPartnerSpeed
    case HrHighAlert
    case HrLowAlert
    case SpeedHighAlert
    case SpeedLowAlert
    case CadHighAlert
    case CadLowAlert
    case PowerHighAlert
    case PowerLowAlert
    case TimeDurationAlert
    case DistanceDurationAlert
    case CalorieDurationAlert
    case FitnessEquipmentState
    case SportPoint
    case GearChangeData
    case RiderPosition
    case CommTimeout
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case Event
    case EventType
    case Data16
    case Data
    case EventGroup
    case Score
    case OpponentScore
    case FrontGearNum
    case FrontGear
    case RearGearNum
    case RearGear
    case DeviceIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getData16() -> Swift.UInt16?
  public func setData16(_ data16: Swift.UInt16)
  public func getData() -> Swift.UInt32?
  public func setData(_ data: Swift.UInt32)
  public func getTimerTrigger() -> GimKit.TimerTrigger?
  public func setTimerTrigger(_ timerTrigger: Swift.UInt8)
  public func getCoursePointIndex() -> Swift.UInt16?
  public func setCoursePointIndex(_ coursePointIndex: Swift.UInt16)
  public func getBatteryLevel() -> Swift.Float32?
  public func setBatteryLevel(_ batteryLevel: Swift.Float32)
  public func getVirtualPartnerSpeed() -> Swift.Float32?
  public func setVirtualPartnerSpeed(_ virtualPartnerSpeed: Swift.Float32)
  public func getHrHighAlert() -> Swift.UInt8?
  public func setHrHighAlert(_ hrHighAlert: Swift.UInt8)
  public func getHrLowAlert() -> Swift.UInt8?
  public func setHrLowAlert(_ hrLowAlert: Swift.UInt8)
  public func getSpeedHighAlert() -> Swift.Float32?
  public func setSpeedHighAlert(_ speedHighAlert: Swift.Float32)
  public func getSpeedLowAlert() -> Swift.Float32?
  public func setSpeedLowAlert(_ speedLowAlert: Swift.Float32)
  public func getCadHighAlert() -> Swift.UInt16?
  public func setCadHighAlert(_ cadHighAlert: Swift.UInt16)
  public func getCadLowAlert() -> Swift.UInt16?
  public func setCadLowAlert(_ cadLowAlert: Swift.UInt16)
  public func getPowerHighAlert() -> Swift.UInt16?
  public func setPowerHighAlert(_ powerHighAlert: Swift.UInt16)
  public func getPowerLowAlert() -> Swift.UInt16?
  public func setPowerLowAlert(_ powerLowAlert: Swift.UInt16)
  public func getTimeDurationAlert() -> Swift.Float32?
  public func setTimeDurationAlert(_ timeDurationAlert: Swift.Float32)
  public func getDistanceDurationAlert() -> Swift.Float32?
  public func setDistanceDurationAlert(_ distanceDurationAlert: Swift.Float32)
  public func getCalorieDurationAlert() -> Swift.UInt32?
  public func setCalorieDurationAlert(_ calorieDurationAlert: Swift.UInt32)
  public func getFitnessEquipmentState() -> GimKit.FitnessEquipmentState?
  public func setFitnessEquipmentState(_ fitnessEquipmentState: Swift.UInt8)
  public func getSportPoint() -> Swift.UInt32?
  public func setSportPoint(_ sportPoint: Swift.UInt32)
  public func getGearChangeData() -> Swift.UInt32?
  public func setGearChangeData(_ gearChangeData: Swift.UInt32)
  public func getRiderPositionType() -> GimKit.RiderPositionType?
  public func setRiderPositionType(_ riderPositionType: Swift.UInt8)
  public func getCommTimeout() -> Swift.UInt16?
  public func setCommTimeout(_ commTimeout: Swift.UInt16)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  public func getScore() -> Swift.UInt16?
  public func setScore(_ score: Swift.UInt16)
  public func getOpponentScore() -> Swift.UInt16?
  public func setOpponentScore(_ opponentScore: Swift.UInt16)
  public func getFrontGearNum() -> Swift.UInt8?
  public func setFrontGearNum(_ frontGearNum: Swift.UInt8)
  public func getFrontGear() -> Swift.UInt8?
  public func setFrontGear(_ frontGear: Swift.UInt8)
  public func getRearGearNum() -> Swift.UInt8?
  public func setRearGearNum(_ rearGearNum: Swift.UInt8)
  public func getRearGear() -> Swift.UInt8?
  public func setRearGear(_ rearGear: Swift.UInt8)
  public func getDeviceIndex() -> Swift.UInt8?
  public func setDeviceIndex(_ deviceIndex: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
extension String {
  public init(bluetoothData: Foundation.Data)
  public func toBluetoothData() -> Foundation.Data
}
extension String : GimKit.Sendable, GimKit.Receivable {
}
public class HrvMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Time
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getNumTime() -> Swift.Int
  public func getTime(_ index: Swift.Int) -> Swift.Float32?
  public func setTime(_ index: Swift.Int, _ time: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class MesgCapabilitiesMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case File
    case MesgNum
    case CountType
    case Count
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getFile() -> GimKit.FitFileType?
  public func setFile(_ file: GimKit.FitFileType)
  public func getMesgNum() -> Swift.UInt16?
  public func setMesgNum(_ mesgNum: Swift.UInt16)
  public func getCountType() -> GimKit.MesgCount?
  public func setCountType(_ countType: GimKit.MesgCount)
  public func getCount() -> Swift.UInt16?
  public func setCount(_ count: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum ActivityClass : Swift.UInt8 {
  case Level
  case LevelMax
  case Athlete
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class DiveAlarmMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Depth
    case Time
    case Enabled
    case AlarmType
    case Sound
    case DiveTypes
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getDepth() -> Swift.Float32?
  public func setDepth(_ depth: Swift.Float32)
  public func getTime() -> Swift.Int32?
  public func setTime(_ time: Swift.Int32)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getAlarmType() -> GimKit.DiveAlarmType?
  public func setAlarmType(_ alarmType: GimKit.DiveAlarmType)
  public func getSound() -> GimKit.Tone?
  public func setSound(_ sound: GimKit.Tone)
  public func getNumDiveTypes() -> Swift.Int
  public func getDiveTypes(_ index: Swift.Int) -> GimKit.SubSport?
  public func setDiveTypes(_ index: Swift.Int, _ diveTypes: GimKit.SubSport)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct CoreExerciseName {
  public static let AbsJabs: Swift.UInt16
  public static let WeightedAbsJabs: Swift.UInt16
  public static let AlternatingPlateReach: Swift.UInt16
  public static let BarbellRollout: Swift.UInt16
  public static let WeightedBarbellRollout: Swift.UInt16
  public static let BodyBarObliqueTwist: Swift.UInt16
  public static let CableCorePress: Swift.UInt16
  public static let CableSideBend: Swift.UInt16
  public static let SideBend: Swift.UInt16
  public static let WeightedSideBend: Swift.UInt16
  public static let CrescentCircle: Swift.UInt16
  public static let WeightedCrescentCircle: Swift.UInt16
  public static let CyclingRussianTwist: Swift.UInt16
  public static let WeightedCyclingRussianTwist: Swift.UInt16
  public static let ElevatedFeetRussianTwist: Swift.UInt16
  public static let WeightedElevatedFeetRussianTwist: Swift.UInt16
  public static let HalfTurkishGetUp: Swift.UInt16
  public static let KettlebellWindmill: Swift.UInt16
  public static let KneelingAbWheel: Swift.UInt16
  public static let WeightedKneelingAbWheel: Swift.UInt16
  public static let ModifiedFrontLever: Swift.UInt16
  public static let OpenKneeTucks: Swift.UInt16
  public static let WeightedOpenKneeTucks: Swift.UInt16
  public static let SideAbsLegLift: Swift.UInt16
  public static let WeightedSideAbsLegLift: Swift.UInt16
  public static let SwissBallJackknife: Swift.UInt16
  public static let WeightedSwissBallJackknife: Swift.UInt16
  public static let SwissBallPike: Swift.UInt16
  public static let WeightedSwissBallPike: Swift.UInt16
  public static let SwissBallRollout: Swift.UInt16
  public static let WeightedSwissBallRollout: Swift.UInt16
  public static let TriangleHipPress: Swift.UInt16
  public static let WeightedTriangleHipPress: Swift.UInt16
  public static let TrxSuspendedJackknife: Swift.UInt16
  public static let WeightedTrxSuspendedJackknife: Swift.UInt16
  public static let UBoat: Swift.UInt16
  public static let WeightedUBoat: Swift.UInt16
  public static let WindmillSwitches: Swift.UInt16
  public static let WeightedWindmillSwitches: Swift.UInt16
  public static let AlternatingSlideOut: Swift.UInt16
  public static let WeightedAlternatingSlideOut: Swift.UInt16
  public static let GhdBackExtensions: Swift.UInt16
  public static let WeightedGhdBackExtensions: Swift.UInt16
  public static let OverheadWalk: Swift.UInt16
  public static let Inchworm: Swift.UInt16
  public static let WeightedModifiedFrontLever: Swift.UInt16
  public static let RussianTwist: Swift.UInt16
  public static let AbdominalLegRotations: Swift.UInt16
  public static let ArmAndLegExtensionOnKnees: Swift.UInt16
  public static let Bicycle: Swift.UInt16
  public static let BicepCurlWithLegExtension: Swift.UInt16
  public static let CatCow: Swift.UInt16
  public static let Corkscrew: Swift.UInt16
  public static let CrissCross: Swift.UInt16
  public static let CrissCrossWithBall: Swift.UInt16
  public static let DoubleLegStretch: Swift.UInt16
  public static let KneeFolds: Swift.UInt16
  public static let LowerLift: Swift.UInt16
  public static let NeckPull: Swift.UInt16
  public static let PelvicClocks: Swift.UInt16
  public static let RollOver: Swift.UInt16
  public static let RollUp: Swift.UInt16
  public static let Rolling: Swift.UInt16
  public static let Rowing1: Swift.UInt16
  public static let Rowing2: Swift.UInt16
  public static let Scissors: Swift.UInt16
  public static let SingleLegCircles: Swift.UInt16
  public static let SingleLegStretch: Swift.UInt16
  public static let SnakeTwist1And2: Swift.UInt16
  public static let Swan: Swift.UInt16
  public static let Swimming: Swift.UInt16
  public static let Teaser: Swift.UInt16
  public static let TheHundred: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public protocol MesgConvertersDelegate : AnyObject {
  func didReadMesg(mesg: GimKit.Mesg)
  func didReadMesgDefinition(mesgDef: GimKit.MesgDefinition)
  func didReadDeveloperFieldDescription(fieldDesc: GimKit.DeveloperFieldDescription)
  func didReadFileIdMesg(_ mesg: GimKit.FileIdMesg)
  func didReadFileCreatorMesg(_ mesg: GimKit.FileCreatorMesg)
  func didReadTimestampCorrelationMesg(_ mesg: GimKit.TimestampCorrelationMesg)
  func didReadSoftwareMesg(_ mesg: GimKit.SoftwareMesg)
  func didReadSlaveDeviceMesg(_ mesg: GimKit.SlaveDeviceMesg)
  func didReadCapabilitiesMesg(_ mesg: GimKit.CapabilitiesMesg)
  func didReadFileCapabilitiesMesg(_ mesg: GimKit.FileCapabilitiesMesg)
  func didReadMesgCapabilitiesMesg(_ mesg: GimKit.MesgCapabilitiesMesg)
  func didReadFieldCapabilitiesMesg(_ mesg: GimKit.FieldCapabilitiesMesg)
  func didReadDeviceSettingsMesg(_ mesg: GimKit.DeviceSettingsMesg)
  func didReadUserProfileMesg(_ mesg: GimKit.UserProfileMesg)
  func didReadHrmProfileMesg(_ mesg: GimKit.HrmProfileMesg)
  func didReadSdmProfileMesg(_ mesg: GimKit.SdmProfileMesg)
  func didReadBikeProfileMesg(_ mesg: GimKit.BikeProfileMesg)
  func didReadConnectivityMesg(_ mesg: GimKit.ConnectivityMesg)
  func didReadWatchfaceSettingsMesg(_ mesg: GimKit.WatchfaceSettingsMesg)
  func didReadOhrSettingsMesg(_ mesg: GimKit.OhrSettingsMesg)
  func didReadZonesTargetMesg(_ mesg: GimKit.ZonesTargetMesg)
  func didReadSportMesg(_ mesg: GimKit.SportMesg)
  func didReadHrZoneMesg(_ mesg: GimKit.HrZoneMesg)
  func didReadSpeedZoneMesg(_ mesg: GimKit.SpeedZoneMesg)
  func didReadCadenceZoneMesg(_ mesg: GimKit.CadenceZoneMesg)
  func didReadPowerZoneMesg(_ mesg: GimKit.PowerZoneMesg)
  func didReadMetZoneMesg(_ mesg: GimKit.MetZoneMesg)
  func didReadDiveSettingsMesg(_ mesg: GimKit.DiveSettingsMesg)
  func didReadDiveAlarmMesg(_ mesg: GimKit.DiveAlarmMesg)
  func didReadDiveGasMesg(_ mesg: GimKit.DiveGasMesg)
  func didReadGoalMesg(_ mesg: GimKit.GoalMesg)
  func didReadActivityMesg(_ mesg: GimKit.ActivityMesg)
  func didReadSessionMesg(_ mesg: GimKit.SessionMesg)
  func didReadLapMesg(_ mesg: GimKit.LapMesg)
  func didReadLengthMesg(_ mesg: GimKit.LengthMesg)
  func didReadRecordMesg(_ mesg: GimKit.RecordMesg)
  func didReadEventMesg(_ mesg: GimKit.EventMesg)
  func didReadDeviceInfoMesg(_ mesg: GimKit.DeviceInfoMesg)
  func didReadTrainingFileMesg(_ mesg: GimKit.TrainingFileMesg)
  func didReadHrvMesg(_ mesg: GimKit.HrvMesg)
  func didReadWeatherConditionsMesg(_ mesg: GimKit.WeatherConditionsMesg)
  func didReadWeatherAlertMesg(_ mesg: GimKit.WeatherAlertMesg)
  func didReadGpsMetadataMesg(_ mesg: GimKit.GpsMetadataMesg)
  func didReadCameraEventMesg(_ mesg: GimKit.CameraEventMesg)
  func didReadGyroscopeDataMesg(_ mesg: GimKit.GyroscopeDataMesg)
  func didReadAccelerometerDataMesg(_ mesg: GimKit.AccelerometerDataMesg)
  func didReadMagnetometerDataMesg(_ mesg: GimKit.MagnetometerDataMesg)
  func didReadBarometerDataMesg(_ mesg: GimKit.BarometerDataMesg)
  func didReadThreeDSensorCalibrationMesg(_ mesg: GimKit.ThreeDSensorCalibrationMesg)
  func didReadOneDSensorCalibrationMesg(_ mesg: GimKit.OneDSensorCalibrationMesg)
  func didReadVideoFrameMesg(_ mesg: GimKit.VideoFrameMesg)
  func didReadObdiiDataMesg(_ mesg: GimKit.ObdiiDataMesg)
  func didReadNmeaSentenceMesg(_ mesg: GimKit.NmeaSentenceMesg)
  func didReadAviationAttitudeMesg(_ mesg: GimKit.AviationAttitudeMesg)
  func didReadVideoMesg(_ mesg: GimKit.VideoMesg)
  func didReadVideoTitleMesg(_ mesg: GimKit.VideoTitleMesg)
  func didReadVideoDescriptionMesg(_ mesg: GimKit.VideoDescriptionMesg)
  func didReadVideoClipMesg(_ mesg: GimKit.VideoClipMesg)
  func didReadSetMesg(_ mesg: GimKit.SetMesg)
  func didReadCourseMesg(_ mesg: GimKit.CourseMesg)
  func didReadCoursePointMesg(_ mesg: GimKit.CoursePointMesg)
  func didReadSegmentIdMesg(_ mesg: GimKit.SegmentIdMesg)
  func didReadSegmentLeaderboardEntryMesg(_ mesg: GimKit.SegmentLeaderboardEntryMesg)
  func didReadSegmentPointMesg(_ mesg: GimKit.SegmentPointMesg)
  func didReadSegmentLapMesg(_ mesg: GimKit.SegmentLapMesg)
  func didReadSegmentFileMesg(_ mesg: GimKit.SegmentFileMesg)
  func didReadWorkoutMesg(_ mesg: GimKit.WorkoutMesg)
  func didReadWorkoutSessionMesg(_ mesg: GimKit.WorkoutSessionMesg)
  func didReadWorkoutStepMesg(_ mesg: GimKit.WorkoutStepMesg)
  func didReadExerciseTitleMesg(_ mesg: GimKit.ExerciseTitleMesg)
  func didReadScheduleMesg(_ mesg: GimKit.ScheduleMesg)
  func didReadTotalsMesg(_ mesg: GimKit.TotalsMesg)
  func didReadWeightScaleMesg(_ mesg: GimKit.WeightScaleMesg)
  func didReadBloodPressureMesg(_ mesg: GimKit.BloodPressureMesg)
  func didReadMonitoringInfoMesg(_ mesg: GimKit.MonitoringInfoMesg)
  func didReadMonitoringMesg(_ mesg: GimKit.MonitoringMesg)
  func didReadHrMesg(_ mesg: GimKit.HrMesg)
  func didReadStressLevelMesg(_ mesg: GimKit.StressLevelMesg)
  func didReadMemoGlobMesg(_ mesg: GimKit.MemoGlobMesg)
  func didReadAntChannelIdMesg(_ mesg: GimKit.AntChannelIdMesg)
  func didReadAntRxMesg(_ mesg: GimKit.AntRxMesg)
  func didReadAntTxMesg(_ mesg: GimKit.AntTxMesg)
  func didReadExdScreenConfigurationMesg(_ mesg: GimKit.ExdScreenConfigurationMesg)
  func didReadExdDataFieldConfigurationMesg(_ mesg: GimKit.ExdDataFieldConfigurationMesg)
  func didReadExdDataConceptConfigurationMesg(_ mesg: GimKit.ExdDataConceptConfigurationMesg)
  func didReadFieldDescriptionMesg(_ mesg: GimKit.FieldDescriptionMesg)
  func didReadDeveloperDataIdMesg(_ mesg: GimKit.DeveloperDataIdMesg)
  func didReadDiveSummaryMesg(_ mesg: GimKit.DiveSummaryMesg)
}
public protocol HandyJSONCustomTransformable : GimKit._ExtendCustomBasicType {
}
public protocol HandyJSON : GimKit._ExtendCustomModelType {
}
public protocol HandyJSONEnum : GimKit._RawEnumProtocol {
}
extension GimKitManager : GimKit.MesgConvertersDelegate {
  public func didReadMesg(mesg: GimKit.Mesg)
  public func didReadMesgDefinition(mesgDef: GimKit.MesgDefinition)
  public func didReadDeveloperFieldDescription(fieldDesc: GimKit.DeveloperFieldDescription)
  public func didReadFileIdMesg(_ mesg: GimKit.FileIdMesg)
  public func didReadFileCreatorMesg(_ mesg: GimKit.FileCreatorMesg)
  public func didReadTimestampCorrelationMesg(_ mesg: GimKit.TimestampCorrelationMesg)
  public func didReadSoftwareMesg(_ mesg: GimKit.SoftwareMesg)
  public func didReadSlaveDeviceMesg(_ mesg: GimKit.SlaveDeviceMesg)
  public func didReadCapabilitiesMesg(_ mesg: GimKit.CapabilitiesMesg)
  public func didReadFileCapabilitiesMesg(_ mesg: GimKit.FileCapabilitiesMesg)
  public func didReadMesgCapabilitiesMesg(_ mesg: GimKit.MesgCapabilitiesMesg)
  public func didReadFieldCapabilitiesMesg(_ mesg: GimKit.FieldCapabilitiesMesg)
  public func didReadDeviceSettingsMesg(_ mesg: GimKit.DeviceSettingsMesg)
  public func didReadUserProfileMesg(_ mesg: GimKit.UserProfileMesg)
  public func didReadHrmProfileMesg(_ mesg: GimKit.HrmProfileMesg)
  public func didReadSdmProfileMesg(_ mesg: GimKit.SdmProfileMesg)
  public func didReadBikeProfileMesg(_ mesg: GimKit.BikeProfileMesg)
  public func didReadConnectivityMesg(_ mesg: GimKit.ConnectivityMesg)
  public func didReadWatchfaceSettingsMesg(_ mesg: GimKit.WatchfaceSettingsMesg)
  public func didReadOhrSettingsMesg(_ mesg: GimKit.OhrSettingsMesg)
  public func didReadZonesTargetMesg(_ mesg: GimKit.ZonesTargetMesg)
  public func didReadSportMesg(_ mesg: GimKit.SportMesg)
  public func didReadHrZoneMesg(_ mesg: GimKit.HrZoneMesg)
  public func didReadSpeedZoneMesg(_ mesg: GimKit.SpeedZoneMesg)
  public func didReadCadenceZoneMesg(_ mesg: GimKit.CadenceZoneMesg)
  public func didReadPowerZoneMesg(_ mesg: GimKit.PowerZoneMesg)
  public func didReadMetZoneMesg(_ mesg: GimKit.MetZoneMesg)
  public func didReadDiveSettingsMesg(_ mesg: GimKit.DiveSettingsMesg)
  public func didReadDiveAlarmMesg(_ mesg: GimKit.DiveAlarmMesg)
  public func didReadDiveGasMesg(_ mesg: GimKit.DiveGasMesg)
  public func didReadGoalMesg(_ mesg: GimKit.GoalMesg)
  public func didReadActivityMesg(_ mesg: GimKit.ActivityMesg)
  public func didReadSessionMesg(_ mesg: GimKit.SessionMesg)
  public func didReadLapMesg(_ mesg: GimKit.LapMesg)
  public func didReadLengthMesg(_ mesg: GimKit.LengthMesg)
  public func didReadRecordMesg(_ mesg: GimKit.RecordMesg)
  public func didReadEventMesg(_ mesg: GimKit.EventMesg)
  public func didReadDeviceInfoMesg(_ mesg: GimKit.DeviceInfoMesg)
  public func didReadTrainingFileMesg(_ mesg: GimKit.TrainingFileMesg)
  public func didReadHrvMesg(_ mesg: GimKit.HrvMesg)
  public func didReadWeatherConditionsMesg(_ mesg: GimKit.WeatherConditionsMesg)
  public func didReadWeatherAlertMesg(_ mesg: GimKit.WeatherAlertMesg)
  public func didReadGpsMetadataMesg(_ mesg: GimKit.GpsMetadataMesg)
  public func didReadCameraEventMesg(_ mesg: GimKit.CameraEventMesg)
  public func didReadGyroscopeDataMesg(_ mesg: GimKit.GyroscopeDataMesg)
  public func didReadAccelerometerDataMesg(_ mesg: GimKit.AccelerometerDataMesg)
  public func didReadMagnetometerDataMesg(_ mesg: GimKit.MagnetometerDataMesg)
  public func didReadBarometerDataMesg(_ mesg: GimKit.BarometerDataMesg)
  public func didReadThreeDSensorCalibrationMesg(_ mesg: GimKit.ThreeDSensorCalibrationMesg)
  public func didReadOneDSensorCalibrationMesg(_ mesg: GimKit.OneDSensorCalibrationMesg)
  public func didReadVideoFrameMesg(_ mesg: GimKit.VideoFrameMesg)
  public func didReadObdiiDataMesg(_ mesg: GimKit.ObdiiDataMesg)
  public func didReadNmeaSentenceMesg(_ mesg: GimKit.NmeaSentenceMesg)
  public func didReadAviationAttitudeMesg(_ mesg: GimKit.AviationAttitudeMesg)
  public func didReadVideoMesg(_ mesg: GimKit.VideoMesg)
  public func didReadVideoTitleMesg(_ mesg: GimKit.VideoTitleMesg)
  public func didReadVideoDescriptionMesg(_ mesg: GimKit.VideoDescriptionMesg)
  public func didReadVideoClipMesg(_ mesg: GimKit.VideoClipMesg)
  public func didReadSetMesg(_ mesg: GimKit.SetMesg)
  public func didReadCourseMesg(_ mesg: GimKit.CourseMesg)
  public func didReadCoursePointMesg(_ mesg: GimKit.CoursePointMesg)
  public func didReadSegmentIdMesg(_ mesg: GimKit.SegmentIdMesg)
  public func didReadSegmentLeaderboardEntryMesg(_ mesg: GimKit.SegmentLeaderboardEntryMesg)
  public func didReadSegmentPointMesg(_ mesg: GimKit.SegmentPointMesg)
  public func didReadSegmentLapMesg(_ mesg: GimKit.SegmentLapMesg)
  public func didReadSegmentFileMesg(_ mesg: GimKit.SegmentFileMesg)
  public func didReadWorkoutMesg(_ mesg: GimKit.WorkoutMesg)
  public func didReadWorkoutSessionMesg(_ mesg: GimKit.WorkoutSessionMesg)
  public func didReadWorkoutStepMesg(_ mesg: GimKit.WorkoutStepMesg)
  public func didReadExerciseTitleMesg(_ mesg: GimKit.ExerciseTitleMesg)
  public func didReadScheduleMesg(_ mesg: GimKit.ScheduleMesg)
  public func didReadTotalsMesg(_ mesg: GimKit.TotalsMesg)
  public func didReadWeightScaleMesg(_ mesg: GimKit.WeightScaleMesg)
  public func didReadBloodPressureMesg(_ mesg: GimKit.BloodPressureMesg)
  public func didReadMonitoringInfoMesg(_ mesg: GimKit.MonitoringInfoMesg)
  public func didReadMonitoringMesg(_ mesg: GimKit.MonitoringMesg)
  public func didReadHrMesg(_ mesg: GimKit.HrMesg)
  public func didReadStressLevelMesg(_ mesg: GimKit.StressLevelMesg)
  public func didReadMemoGlobMesg(_ mesg: GimKit.MemoGlobMesg)
  public func didReadAntChannelIdMesg(_ mesg: GimKit.AntChannelIdMesg)
  public func didReadAntRxMesg(_ mesg: GimKit.AntRxMesg)
  public func didReadAntTxMesg(_ mesg: GimKit.AntTxMesg)
  public func didReadExdScreenConfigurationMesg(_ mesg: GimKit.ExdScreenConfigurationMesg)
  public func didReadExdDataFieldConfigurationMesg(_ mesg: GimKit.ExdDataFieldConfigurationMesg)
  public func didReadExdDataConceptConfigurationMesg(_ mesg: GimKit.ExdDataConceptConfigurationMesg)
  public func didReadFieldDescriptionMesg(_ mesg: GimKit.FieldDescriptionMesg)
  public func didReadDeveloperDataIdMesg(_ mesg: GimKit.DeveloperDataIdMesg)
  public func didReadDiveSummaryMesg(_ mesg: GimKit.DiveSummaryMesg)
}
public protocol ServiceObserver : AnyObject {
  func didModifyServices(from peripheral: GimKit.PeripheralIdentifier, invalidatedServices: [GimKit.ServiceIdentifier])
}
public class CapabilitiesMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Languages
    case Sports
    case WorkoutsSupported
    case ConnectivitySupported
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getNumLanguages() -> Swift.Int
  public func getLanguages(_ index: Swift.Int) -> Swift.UInt8?
  public func setLanguages(_ index: Swift.Int, _ languages: Swift.UInt8)
  public func getNumSports() -> Swift.Int
  public func getSports(_ index: Swift.Int) -> Swift.UInt8?
  public func setSports(_ index: Swift.Int, _ sports: Swift.UInt8)
  public func getWorkoutsSupported() -> Swift.UInt32?
  public func setWorkoutsSupported(_ workoutsSupported: Swift.UInt32)
  public func getConnectivitySupported() -> Swift.UInt32?
  public func setConnectivitySupported(_ connectivitySupported: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum BikeLightNetworkConfigType : Swift.UInt8 {
  case Auto
  case Individual
  case HighVisibility
  case Trail
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Checksum {
  public static let Clear: Swift.UInt8
  public static let Ok: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum ActivityType : Swift.UInt8 {
  case Generic
  case Running
  case Cycling
  case Transition
  case FitnessEquipment
  case Swimming
  case Walking
  case Sedentary
  case All
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class ConnectivityMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case BluetoothEnabled
    case BluetoothLeEnabled
    case AntEnabled
    case Name
    case LiveTrackingEnabled
    case WeatherConditionsEnabled
    case WeatherAlertsEnabled
    case AutoActivityUploadEnabled
    case CourseDownloadEnabled
    case WorkoutDownloadEnabled
    case GpsEphemerisDownloadEnabled
    case IncidentDetectionEnabled
    case GrouptrackEnabled
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getBluetoothEnabled() -> GimKit.FitBool?
  public func setBluetoothEnabled(_ bluetoothEnabled: GimKit.FitBool)
  public func getBluetoothLeEnabled() -> GimKit.FitBool?
  public func setBluetoothLeEnabled(_ bluetoothLeEnabled: GimKit.FitBool)
  public func getAntEnabled() -> GimKit.FitBool?
  public func setAntEnabled(_ antEnabled: GimKit.FitBool)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getLiveTrackingEnabled() -> GimKit.FitBool?
  public func setLiveTrackingEnabled(_ liveTrackingEnabled: GimKit.FitBool)
  public func getWeatherConditionsEnabled() -> GimKit.FitBool?
  public func setWeatherConditionsEnabled(_ weatherConditionsEnabled: GimKit.FitBool)
  public func getWeatherAlertsEnabled() -> GimKit.FitBool?
  public func setWeatherAlertsEnabled(_ weatherAlertsEnabled: GimKit.FitBool)
  public func getAutoActivityUploadEnabled() -> GimKit.FitBool?
  public func setAutoActivityUploadEnabled(_ autoActivityUploadEnabled: GimKit.FitBool)
  public func getCourseDownloadEnabled() -> GimKit.FitBool?
  public func setCourseDownloadEnabled(_ courseDownloadEnabled: GimKit.FitBool)
  public func getWorkoutDownloadEnabled() -> GimKit.FitBool?
  public func setWorkoutDownloadEnabled(_ workoutDownloadEnabled: GimKit.FitBool)
  public func getGpsEphemerisDownloadEnabled() -> GimKit.FitBool?
  public func setGpsEphemerisDownloadEnabled(_ gpsEphemerisDownloadEnabled: GimKit.FitBool)
  public func getIncidentDetectionEnabled() -> GimKit.FitBool?
  public func setIncidentDetectionEnabled(_ incidentDetectionEnabled: GimKit.FitBool)
  public func getGrouptrackEnabled() -> GimKit.FitBool?
  public func setGrouptrackEnabled(_ grouptrackEnabled: GimKit.FitBool)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class MesgConverters : GimKit.DecodeDelegate {
  weak public var delegate: GimKit.MesgConvertersDelegate?
  public init()
  public func didReadMesg(mesg: GimKit.Mesg)
  public func didReadMesgDefinition(mesgDef: GimKit.MesgDefinition)
  public func didReadDeveloperFieldDescription(fieldDesc: GimKit.DeveloperFieldDescription)
  @objc deinit
}
public struct SportBits4 {
  public static let Sailing: Swift.UInt8
  public static let IceSkating: Swift.UInt8
  public static let SkyDiving: Swift.UInt8
  public static let Snowshoeing: Swift.UInt8
  public static let Snowmobiling: Swift.UInt8
  public static let StandUpPaddleboarding: Swift.UInt8
  public static let Surfing: Swift.UInt8
  public static let Wakeboarding: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum ExdQualifiers : Swift.UInt8 {
  case NoQualifier
  case Instantaneous
  case Average
  case Lap
  case Maximum
  case MaximumAverage
  case MaximumLap
  case LastLap
  case AverageLap
  case ToDestination
  case ToGo
  case ToNext
  case NextCoursePoint
  case Total
  case ThreeSecondAverage
  case TenSecondAverage
  case ThirtySecondAverage
  case PercentMaximum
  case PercentMaximumAverage
  case LapPercentMaximum
  case Elapsed
  case Sunrise
  case Sunset
  case ComparedToVirtualPartner
  case Maximum24h
  case Minimum24h
  case Minimum
  case First
  case Second
  case Third
  case Shifter
  case LastSport
  case Moving
  case Stopped
  case EstimatedTotal
  case Zone9
  case Zone8
  case Zone7
  case Zone6
  case Zone5
  case Zone4
  case Zone3
  case Zone2
  case Zone1
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct BridgeHolder {
  public var listener: Swift.AnyObject
  public var slipMachine: Swift.OpaquePointer?
}
extension CBPeripheral {
  public func service(with uuid: CoreBluetooth.CBUUID) -> CoreBluetooth.CBService?
}
public enum ScanAction {
  case `continue`
  case blacklist
  case stop
  case connect(GimKit.GimKitDevice, GimKit.Timeout, GimKit.WarningOptions, (GimKit.ConnectionResult) -> Swift.Void)
}
public class WorkoutMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Sport
    case Capabilities
    case NumValidSteps
    case WktName
    case SubSport
    case PoolLength
    case PoolLengthUnit
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getCapabilities() -> Swift.UInt32?
  public func setCapabilities(_ capabilities: Swift.UInt32)
  public func getNumValidSteps() -> Swift.UInt16?
  public func setNumValidSteps(_ numValidSteps: Swift.UInt16)
  public func getWktName() -> [Swift.UInt8]?
  public func getWktNameAsString() -> Swift.String?
  public func setWktName(_ wktName: Swift.String)
  public func setWktName(_ wktName: [Swift.UInt8])
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getPoolLength() -> Swift.Float32?
  public func setPoolLength(_ poolLength: Swift.Float32)
  public func getPoolLengthUnit() -> GimKit.DisplayMeasure?
  public func setPoolLengthUnit(_ poolLengthUnit: GimKit.DisplayMeasure)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct SportBits6 {
  public static let FloorClimbing: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public class MagnetometerDataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case SampleTimeOffset
    case MagX
    case MagY
    case MagZ
    case CalibratedMagX
    case CalibratedMagY
    case CalibratedMagZ
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumSampleTimeOffset() -> Swift.Int
  public func getSampleTimeOffset(_ index: Swift.Int) -> Swift.UInt16?
  public func setSampleTimeOffset(_ index: Swift.Int, _ sampleTimeOffset: Swift.UInt16)
  public func getNumMagX() -> Swift.Int
  public func getMagX(_ index: Swift.Int) -> Swift.UInt16?
  public func setMagX(_ index: Swift.Int, _ magX: Swift.UInt16)
  public func getNumMagY() -> Swift.Int
  public func getMagY(_ index: Swift.Int) -> Swift.UInt16?
  public func setMagY(_ index: Swift.Int, _ magY: Swift.UInt16)
  public func getNumMagZ() -> Swift.Int
  public func getMagZ(_ index: Swift.Int) -> Swift.UInt16?
  public func setMagZ(_ index: Swift.Int, _ magZ: Swift.UInt16)
  public func getNumCalibratedMagX() -> Swift.Int
  public func getCalibratedMagX(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedMagX(_ index: Swift.Int, _ calibratedMagX: Swift.Float32)
  public func getNumCalibratedMagY() -> Swift.Int
  public func getCalibratedMagY(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedMagY(_ index: Swift.Int, _ calibratedMagY: Swift.Float32)
  public func getNumCalibratedMagZ() -> Swift.Int
  public func getCalibratedMagZ(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedMagZ(_ index: Swift.Int, _ calibratedMagZ: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct WorkoutCapabilities {
  public static let Interval: Swift.UInt32
  public static let Custom: Swift.UInt32
  public static let FitnessEquipment: Swift.UInt32
  public static let Firstbeat: Swift.UInt32
  public static let NewLeaf: Swift.UInt32
  public static let Tcx: Swift.UInt32
  public static let Speed: Swift.UInt32
  public static let HeartRate: Swift.UInt32
  public static let Distance: Swift.UInt32
  public static let Cadence: Swift.UInt32
  public static let Power: Swift.UInt32
  public static let Grade: Swift.UInt32
  public static let Resistance: Swift.UInt32
  public static let Protected: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public class WeatherConditionsMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case WeatherReport
    case Temperature
    case Condition
    case WindDirection
    case WindSpeed
    case PrecipitationProbability
    case TemperatureFeelsLike
    case RelativeHumidity
    case Location
    case ObservedAtTime
    case ObservedLocationLat
    case ObservedLocationLong
    case DayOfWeek
    case HighTemperature
    case LowTemperature
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getWeatherReport() -> GimKit.WeatherReport?
  public func setWeatherReport(_ weatherReport: GimKit.WeatherReport)
  public func getTemperature() -> Swift.Int8?
  public func setTemperature(_ temperature: Swift.Int8)
  public func getCondition() -> GimKit.WeatherStatus?
  public func setCondition(_ condition: GimKit.WeatherStatus)
  public func getWindDirection() -> Swift.UInt16?
  public func setWindDirection(_ windDirection: Swift.UInt16)
  public func getWindSpeed() -> Swift.Float32?
  public func setWindSpeed(_ windSpeed: Swift.Float32)
  public func getPrecipitationProbability() -> Swift.UInt8?
  public func setPrecipitationProbability(_ precipitationProbability: Swift.UInt8)
  public func getTemperatureFeelsLike() -> Swift.Int8?
  public func setTemperatureFeelsLike(_ temperatureFeelsLike: Swift.Int8)
  public func getRelativeHumidity() -> Swift.UInt8?
  public func setRelativeHumidity(_ relativeHumidity: Swift.UInt8)
  public func getLocation() -> [Swift.UInt8]?
  public func getLocationAsString() -> Swift.String?
  public func setLocation(_ location: Swift.String)
  public func setLocation(_ location: [Swift.UInt8])
  public func getObservedAtTime() -> GimKit.FitDateTime?
  public func setObservedAtTime(_ observedAtTime: GimKit.FitDateTime)
  public func getObservedLocationLat() -> Swift.Int32?
  public func setObservedLocationLat(_ observedLocationLat: Swift.Int32)
  public func getObservedLocationLong() -> Swift.Int32?
  public func setObservedLocationLong(_ observedLocationLong: Swift.Int32)
  public func getDayOfWeek() -> GimKit.DayOfWeek?
  public func setDayOfWeek(_ dayOfWeek: GimKit.DayOfWeek)
  public func getHighTemperature() -> Swift.Int8?
  public func setHighTemperature(_ highTemperature: Swift.Int8)
  public func getLowTemperature() -> Swift.Int8?
  public func setLowTemperature(_ lowTemperature: Swift.Int8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum FitTimeZone : Swift.UInt8 {
  case Almaty
  case Bangkok
  case Bombay
  case Brasilia
  case Cairo
  case CapeVerdeIs
  case Darwin
  case Eniwetok
  case Fiji
  case HongKong
  case Islamabad
  case Kabul
  case Magadan
  case MidAtlantic
  case Moscow
  case Muscat
  case Newfoundland
  case Samoa
  case Sydney
  case Tehran
  case Tokyo
  case UsAlaska
  case UsAtlantic
  case UsCentral
  case UsEastern
  case UsHawaii
  case UsMountain
  case UsPacific
  case Other
  case Auckland
  case Kathmandu
  case EuropeWesternWet
  case EuropeCentralCet
  case EuropeEasternEet
  case Jakarta
  case Perth
  case Adelaide
  case Brisbane
  case Tasmania
  case Iceland
  case Amsterdam
  case Athens
  case Barcelona
  case Berlin
  case Brussels
  case Budapest
  case Copenhagen
  case Dublin
  case Helsinki
  case Lisbon
  case London
  case Madrid
  case Munich
  case Oslo
  case Paris
  case Prague
  case Reykjavik
  case Rome
  case Stockholm
  case Vienna
  case Warsaw
  case Zurich
  case Quebec
  case Ontario
  case Manitoba
  case Saskatchewan
  case Alberta
  case BritishColumbia
  case Boise
  case Boston
  case Chicago
  case Dallas
  case Denver
  case KansasCity
  case LasVegas
  case LosAngeles
  case Miami
  case Minneapolis
  case NewYork
  case NewOrleans
  case Phoenix
  case SantaFe
  case Seattle
  case WashingtonDc
  case UsArizona
  case Chita
  case Ekaterinburg
  case Irkutsk
  case Kaliningrad
  case Krasnoyarsk
  case Novosibirsk
  case PetropavlovskKamchatskiy
  case Samara
  case Vladivostok
  case MexicoCentral
  case MexicoMountain
  case MexicoPacific
  case CapeTown
  case Winkhoek
  case Lagos
  case Riyahd
  case Venezuela
  case AustraliaLh
  case Santiago
  case Manual
  case Automatic
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PeripheralIdentifier {
  public let uuid: Foundation.UUID
  public let name: Swift.String
  public var mac: Swift.String?
  public var description: Swift.String {
    get
  }
  public init(uuid: Foundation.UUID, name: Swift.String?)
}
extension PeripheralIdentifier : Swift.Hashable {
  public static func == (lhs: GimKit.PeripheralIdentifier, rhs: GimKit.PeripheralIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DigitalWatchfaceLayout : Swift.UInt8 {
  case Traditional
  case Modern
  case Bold
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol _Transformable : GimKit._Measurable {
}
public class VideoFrameMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case FrameNumber
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getFrameNumber() -> Swift.UInt32?
  public func setFrameNumber(_ frameNumber: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct GimKitDeviceInfoInternal {
  public let address: Swift.Int
  public let type: Swift.Int16
  public let hardwareVersion: Swift.Int16
  public let flashVersion: Swift.Int16
  public let eepromVersion: Swift.Int16
  public let sn: [Swift.UInt8]
}
public struct WorkoutPower {
  public static let WattsOffset: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public class SportMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Sport
    case SubSport
    case Name
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class CadenceZoneMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HighValue
    case Name
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHighValue() -> Swift.UInt8?
  public func setHighValue(_ highValue: Swift.UInt8)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SensorType : Swift.UInt8 {
  case Accelerometer
  case Gyroscope
  case Compass
  case Barometer
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class AccelerometerDataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case SampleTimeOffset
    case AccelX
    case AccelY
    case AccelZ
    case CalibratedAccelX
    case CalibratedAccelY
    case CalibratedAccelZ
    case CompressedCalibratedAccelX
    case CompressedCalibratedAccelY
    case CompressedCalibratedAccelZ
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumSampleTimeOffset() -> Swift.Int
  public func getSampleTimeOffset(_ index: Swift.Int) -> Swift.UInt16?
  public func setSampleTimeOffset(_ index: Swift.Int, _ sampleTimeOffset: Swift.UInt16)
  public func getNumAccelX() -> Swift.Int
  public func getAccelX(_ index: Swift.Int) -> Swift.UInt16?
  public func setAccelX(_ index: Swift.Int, _ accelX: Swift.UInt16)
  public func getNumAccelY() -> Swift.Int
  public func getAccelY(_ index: Swift.Int) -> Swift.UInt16?
  public func setAccelY(_ index: Swift.Int, _ accelY: Swift.UInt16)
  public func getNumAccelZ() -> Swift.Int
  public func getAccelZ(_ index: Swift.Int) -> Swift.UInt16?
  public func setAccelZ(_ index: Swift.Int, _ accelZ: Swift.UInt16)
  public func getNumCalibratedAccelX() -> Swift.Int
  public func getCalibratedAccelX(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedAccelX(_ index: Swift.Int, _ calibratedAccelX: Swift.Float32)
  public func getNumCalibratedAccelY() -> Swift.Int
  public func getCalibratedAccelY(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedAccelY(_ index: Swift.Int, _ calibratedAccelY: Swift.Float32)
  public func getNumCalibratedAccelZ() -> Swift.Int
  public func getCalibratedAccelZ(_ index: Swift.Int) -> Swift.Float32?
  public func setCalibratedAccelZ(_ index: Swift.Int, _ calibratedAccelZ: Swift.Float32)
  public func getNumCompressedCalibratedAccelX() -> Swift.Int
  public func getCompressedCalibratedAccelX(_ index: Swift.Int) -> Swift.Int16?
  public func setCompressedCalibratedAccelX(_ index: Swift.Int, _ compressedCalibratedAccelX: Swift.Int16)
  public func getNumCompressedCalibratedAccelY() -> Swift.Int
  public func getCompressedCalibratedAccelY(_ index: Swift.Int) -> Swift.Int16?
  public func setCompressedCalibratedAccelY(_ index: Swift.Int, _ compressedCalibratedAccelY: Swift.Int16)
  public func getNumCompressedCalibratedAccelZ() -> Swift.Int
  public func getCompressedCalibratedAccelZ(_ index: Swift.Int) -> Swift.Int16?
  public func setCompressedCalibratedAccelZ(_ index: Swift.Int, _ compressedCalibratedAccelZ: Swift.Int16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum FitFileType : Swift.UInt8 {
  case Device
  case Settings
  case Sport
  case Activity
  case Workout
  case Course
  case Schedules
  case Weight
  case Totals
  case Goals
  case BloodPressure
  case MonitoringA
  case ActivitySummary
  case MonitoringDaily
  case MonitoringB
  case Segment
  case SegmentList
  case ExdConfiguration
  case MfgRangeMin
  case MfgRangeMax
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class SessionMesg : GimKit.Mesg {
  public enum TotalCyclesSubfield : Swift.UInt16 {
    case TotalStrides
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum AvgCadenceSubfield : Swift.UInt16 {
    case AvgRunningCadence
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum MaxCadenceSubfield : Swift.UInt16 {
    case MaxRunningCadence
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case Event
    case EventType
    case StartTime
    case StartPositionLat
    case StartPositionLong
    case Sport
    case SubSport
    case TotalElapsedTime
    case TotalTimerTime
    case TotalDistance
    case TotalCycles
    case TotalCalories
    case TotalFatCalories
    case AvgSpeed
    case MaxSpeed
    case AvgHeartRate
    case MaxHeartRate
    case AvgCadence
    case MaxCadence
    case AvgPower
    case MaxPower
    case TotalAscent
    case TotalDescent
    case TotalTrainingEffect
    case FirstLapIndex
    case NumLaps
    case EventGroup
    case Trigger
    case NecLat
    case NecLong
    case SwcLat
    case SwcLong
    case NormalizedPower
    case TrainingStressScore
    case IntensityFactor
    case LeftRightBalance
    case AvgStrokeCount
    case AvgStrokeDistance
    case SwimStroke
    case PoolLength
    case ThresholdPower
    case PoolLengthUnit
    case NumActiveLengths
    case TotalWork
    case AvgAltitude
    case MaxAltitude
    case GpsAccuracy
    case AvgGrade
    case AvgPosGrade
    case AvgNegGrade
    case MaxPosGrade
    case MaxNegGrade
    case AvgTemperature
    case MaxTemperature
    case TotalMovingTime
    case AvgPosVerticalSpeed
    case AvgNegVerticalSpeed
    case MaxPosVerticalSpeed
    case MaxNegVerticalSpeed
    case MinHeartRate
    case TimeInHrZone
    case TimeInSpeedZone
    case TimeInCadenceZone
    case TimeInPowerZone
    case AvgLapTime
    case BestLapIndex
    case MinAltitude
    case PlayerScore
    case OpponentScore
    case OpponentName
    case StrokeCount
    case ZoneCount
    case MaxBallSpeed
    case AvgBallSpeed
    case AvgVerticalOscillation
    case AvgStanceTimePercent
    case AvgStanceTime
    case AvgFractionalCadence
    case MaxFractionalCadence
    case TotalFractionalCycles
    case AvgTotalHemoglobinConc
    case MinTotalHemoglobinConc
    case MaxTotalHemoglobinConc
    case AvgSaturatedHemoglobinPercent
    case MinSaturatedHemoglobinPercent
    case MaxSaturatedHemoglobinPercent
    case AvgLeftTorqueEffectiveness
    case AvgRightTorqueEffectiveness
    case AvgLeftPedalSmoothness
    case AvgRightPedalSmoothness
    case AvgCombinedPedalSmoothness
    case SportIndex
    case TimeStanding
    case StandCount
    case AvgLeftPco
    case AvgRightPco
    case AvgLeftPowerPhase
    case AvgLeftPowerPhasePeak
    case AvgRightPowerPhase
    case AvgRightPowerPhasePeak
    case AvgPowerPosition
    case MaxPowerPosition
    case AvgCadencePosition
    case MaxCadencePosition
    case EnhancedAvgSpeed
    case EnhancedMaxSpeed
    case EnhancedAvgAltitude
    case EnhancedMinAltitude
    case EnhancedMaxAltitude
    case AvgLevMotorPower
    case MaxLevMotorPower
    case LevBatteryConsumption
    case AvgVerticalRatio
    case AvgStanceTimeBalance
    case AvgStepLength
    case TotalAnaerobicTrainingEffect
    case AvgVam
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getStartTime() -> GimKit.FitDateTime?
  public func setStartTime(_ startTime: GimKit.FitDateTime)
  public func getStartPositionLat() -> Swift.Int32?
  public func setStartPositionLat(_ startPositionLat: Swift.Int32)
  public func getStartPositionLong() -> Swift.Int32?
  public func setStartPositionLong(_ startPositionLong: Swift.Int32)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getTotalElapsedTime() -> Swift.Float32?
  public func setTotalElapsedTime(_ totalElapsedTime: Swift.Float32)
  public func getTotalTimerTime() -> Swift.Float32?
  public func setTotalTimerTime(_ totalTimerTime: Swift.Float32)
  public func getTotalDistance() -> Swift.Float32?
  public func setTotalDistance(_ totalDistance: Swift.Float32)
  public func getTotalCycles() -> Swift.UInt32?
  public func setTotalCycles(_ totalCycles: Swift.UInt32)
  public func getTotalStrides() -> Swift.UInt32?
  public func setTotalStrides(_ totalStrides: Swift.UInt32)
  public func getTotalCalories() -> Swift.UInt16?
  public func setTotalCalories(_ totalCalories: Swift.UInt16)
  public func getTotalFatCalories() -> Swift.UInt16?
  public func setTotalFatCalories(_ totalFatCalories: Swift.UInt16)
  public func getAvgSpeed() -> Swift.Float32?
  public func setAvgSpeed(_ avgSpeed: Swift.Float32)
  public func getMaxSpeed() -> Swift.Float32?
  public func setMaxSpeed(_ maxSpeed: Swift.Float32)
  public func getAvgHeartRate() -> Swift.UInt8?
  public func setAvgHeartRate(_ avgHeartRate: Swift.UInt8)
  public func getMaxHeartRate() -> Swift.UInt8?
  public func setMaxHeartRate(_ maxHeartRate: Swift.UInt8)
  public func getAvgCadence() -> Swift.UInt8?
  public func setAvgCadence(_ avgCadence: Swift.UInt8)
  public func getAvgRunningCadence() -> Swift.UInt8?
  public func setAvgRunningCadence(_ avgRunningCadence: Swift.UInt8)
  public func getMaxCadence() -> Swift.UInt8?
  public func setMaxCadence(_ maxCadence: Swift.UInt8)
  public func getMaxRunningCadence() -> Swift.UInt8?
  public func setMaxRunningCadence(_ maxRunningCadence: Swift.UInt8)
  public func getAvgPower() -> Swift.UInt16?
  public func setAvgPower(_ avgPower: Swift.UInt16)
  public func getMaxPower() -> Swift.UInt16?
  public func setMaxPower(_ maxPower: Swift.UInt16)
  public func getTotalAscent() -> Swift.UInt16?
  public func setTotalAscent(_ totalAscent: Swift.UInt16)
  public func getTotalDescent() -> Swift.UInt16?
  public func setTotalDescent(_ totalDescent: Swift.UInt16)
  public func getTotalTrainingEffect() -> Swift.Float32?
  public func setTotalTrainingEffect(_ totalTrainingEffect: Swift.Float32)
  public func getFirstLapIndex() -> Swift.UInt16?
  public func setFirstLapIndex(_ firstLapIndex: Swift.UInt16)
  public func getNumLaps() -> Swift.UInt16?
  public func setNumLaps(_ numLaps: Swift.UInt16)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  public func getTrigger() -> GimKit.SessionTrigger?
  public func setTrigger(_ trigger: GimKit.SessionTrigger)
  public func getNecLat() -> Swift.Int32?
  public func setNecLat(_ necLat: Swift.Int32)
  public func getNecLong() -> Swift.Int32?
  public func setNecLong(_ necLong: Swift.Int32)
  public func getSwcLat() -> Swift.Int32?
  public func setSwcLat(_ swcLat: Swift.Int32)
  public func getSwcLong() -> Swift.Int32?
  public func setSwcLong(_ swcLong: Swift.Int32)
  public func getNormalizedPower() -> Swift.UInt16?
  public func setNormalizedPower(_ normalizedPower: Swift.UInt16)
  public func getTrainingStressScore() -> Swift.Float32?
  public func setTrainingStressScore(_ trainingStressScore: Swift.Float32)
  public func getIntensityFactor() -> Swift.Float32?
  public func setIntensityFactor(_ intensityFactor: Swift.Float32)
  public func getLeftRightBalance() -> Swift.UInt16?
  public func setLeftRightBalance(_ leftRightBalance: Swift.UInt16)
  public func getAvgStrokeCount() -> Swift.Float32?
  public func setAvgStrokeCount(_ avgStrokeCount: Swift.Float32)
  public func getAvgStrokeDistance() -> Swift.Float32?
  public func setAvgStrokeDistance(_ avgStrokeDistance: Swift.Float32)
  public func getSwimStroke() -> GimKit.SwimStroke?
  public func setSwimStroke(_ swimStroke: GimKit.SwimStroke)
  public func getPoolLength() -> Swift.Float32?
  public func setPoolLength(_ poolLength: Swift.Float32)
  public func getThresholdPower() -> Swift.UInt16?
  public func setThresholdPower(_ thresholdPower: Swift.UInt16)
  public func getPoolLengthUnit() -> GimKit.DisplayMeasure?
  public func setPoolLengthUnit(_ poolLengthUnit: GimKit.DisplayMeasure)
  public func getNumActiveLengths() -> Swift.UInt16?
  public func setNumActiveLengths(_ numActiveLengths: Swift.UInt16)
  public func getTotalWork() -> Swift.UInt32?
  public func setTotalWork(_ totalWork: Swift.UInt32)
  public func getAvgAltitude() -> Swift.Float32?
  public func setAvgAltitude(_ avgAltitude: Swift.Float32)
  public func getMaxAltitude() -> Swift.Float32?
  public func setMaxAltitude(_ maxAltitude: Swift.Float32)
  public func getGpsAccuracy() -> Swift.UInt8?
  public func setGpsAccuracy(_ gpsAccuracy: Swift.UInt8)
  public func getAvgGrade() -> Swift.Float32?
  public func setAvgGrade(_ avgGrade: Swift.Float32)
  public func getAvgPosGrade() -> Swift.Float32?
  public func setAvgPosGrade(_ avgPosGrade: Swift.Float32)
  public func getAvgNegGrade() -> Swift.Float32?
  public func setAvgNegGrade(_ avgNegGrade: Swift.Float32)
  public func getMaxPosGrade() -> Swift.Float32?
  public func setMaxPosGrade(_ maxPosGrade: Swift.Float32)
  public func getMaxNegGrade() -> Swift.Float32?
  public func setMaxNegGrade(_ maxNegGrade: Swift.Float32)
  public func getAvgTemperature() -> Swift.Int8?
  public func setAvgTemperature(_ avgTemperature: Swift.Int8)
  public func getMaxTemperature() -> Swift.Int8?
  public func setMaxTemperature(_ maxTemperature: Swift.Int8)
  public func getTotalMovingTime() -> Swift.Float32?
  public func setTotalMovingTime(_ totalMovingTime: Swift.Float32)
  public func getAvgPosVerticalSpeed() -> Swift.Float32?
  public func setAvgPosVerticalSpeed(_ avgPosVerticalSpeed: Swift.Float32)
  public func getAvgNegVerticalSpeed() -> Swift.Float32?
  public func setAvgNegVerticalSpeed(_ avgNegVerticalSpeed: Swift.Float32)
  public func getMaxPosVerticalSpeed() -> Swift.Float32?
  public func setMaxPosVerticalSpeed(_ maxPosVerticalSpeed: Swift.Float32)
  public func getMaxNegVerticalSpeed() -> Swift.Float32?
  public func setMaxNegVerticalSpeed(_ maxNegVerticalSpeed: Swift.Float32)
  public func getMinHeartRate() -> Swift.UInt8?
  public func setMinHeartRate(_ minHeartRate: Swift.UInt8)
  public func getNumTimeInHrZone() -> Swift.Int
  public func getTimeInHrZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInHrZone(_ index: Swift.Int, _ timeInHrZone: Swift.Float32)
  public func getNumTimeInSpeedZone() -> Swift.Int
  public func getTimeInSpeedZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInSpeedZone(_ index: Swift.Int, _ timeInSpeedZone: Swift.Float32)
  public func getNumTimeInCadenceZone() -> Swift.Int
  public func getTimeInCadenceZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInCadenceZone(_ index: Swift.Int, _ timeInCadenceZone: Swift.Float32)
  public func getNumTimeInPowerZone() -> Swift.Int
  public func getTimeInPowerZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInPowerZone(_ index: Swift.Int, _ timeInPowerZone: Swift.Float32)
  public func getAvgLapTime() -> Swift.Float32?
  public func setAvgLapTime(_ avgLapTime: Swift.Float32)
  public func getBestLapIndex() -> Swift.UInt16?
  public func setBestLapIndex(_ bestLapIndex: Swift.UInt16)
  public func getMinAltitude() -> Swift.Float32?
  public func setMinAltitude(_ minAltitude: Swift.Float32)
  public func getPlayerScore() -> Swift.UInt16?
  public func setPlayerScore(_ playerScore: Swift.UInt16)
  public func getOpponentScore() -> Swift.UInt16?
  public func setOpponentScore(_ opponentScore: Swift.UInt16)
  public func getOpponentName() -> [Swift.UInt8]?
  public func getOpponentNameAsString() -> Swift.String?
  public func setOpponentName(_ opponentName: Swift.String)
  public func setOpponentName(_ opponentName: [Swift.UInt8])
  public func getNumStrokeCount() -> Swift.Int
  public func getStrokeCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setStrokeCount(_ index: Swift.Int, _ strokeCount: Swift.UInt16)
  public func getNumZoneCount() -> Swift.Int
  public func getZoneCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setZoneCount(_ index: Swift.Int, _ zoneCount: Swift.UInt16)
  public func getMaxBallSpeed() -> Swift.Float32?
  public func setMaxBallSpeed(_ maxBallSpeed: Swift.Float32)
  public func getAvgBallSpeed() -> Swift.Float32?
  public func setAvgBallSpeed(_ avgBallSpeed: Swift.Float32)
  public func getAvgVerticalOscillation() -> Swift.Float32?
  public func setAvgVerticalOscillation(_ avgVerticalOscillation: Swift.Float32)
  public func getAvgStanceTimePercent() -> Swift.Float32?
  public func setAvgStanceTimePercent(_ avgStanceTimePercent: Swift.Float32)
  public func getAvgStanceTime() -> Swift.Float32?
  public func setAvgStanceTime(_ avgStanceTime: Swift.Float32)
  public func getAvgFractionalCadence() -> Swift.Float32?
  public func setAvgFractionalCadence(_ avgFractionalCadence: Swift.Float32)
  public func getMaxFractionalCadence() -> Swift.Float32?
  public func setMaxFractionalCadence(_ maxFractionalCadence: Swift.Float32)
  public func getTotalFractionalCycles() -> Swift.Float32?
  public func setTotalFractionalCycles(_ totalFractionalCycles: Swift.Float32)
  public func getNumAvgTotalHemoglobinConc() -> Swift.Int
  public func getAvgTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgTotalHemoglobinConc(_ index: Swift.Int, _ avgTotalHemoglobinConc: Swift.Float32)
  public func getNumMinTotalHemoglobinConc() -> Swift.Int
  public func getMinTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setMinTotalHemoglobinConc(_ index: Swift.Int, _ minTotalHemoglobinConc: Swift.Float32)
  public func getNumMaxTotalHemoglobinConc() -> Swift.Int
  public func getMaxTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setMaxTotalHemoglobinConc(_ index: Swift.Int, _ maxTotalHemoglobinConc: Swift.Float32)
  public func getNumAvgSaturatedHemoglobinPercent() -> Swift.Int
  public func getAvgSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgSaturatedHemoglobinPercent(_ index: Swift.Int, _ avgSaturatedHemoglobinPercent: Swift.Float32)
  public func getNumMinSaturatedHemoglobinPercent() -> Swift.Int
  public func getMinSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setMinSaturatedHemoglobinPercent(_ index: Swift.Int, _ minSaturatedHemoglobinPercent: Swift.Float32)
  public func getNumMaxSaturatedHemoglobinPercent() -> Swift.Int
  public func getMaxSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setMaxSaturatedHemoglobinPercent(_ index: Swift.Int, _ maxSaturatedHemoglobinPercent: Swift.Float32)
  public func getAvgLeftTorqueEffectiveness() -> Swift.Float32?
  public func setAvgLeftTorqueEffectiveness(_ avgLeftTorqueEffectiveness: Swift.Float32)
  public func getAvgRightTorqueEffectiveness() -> Swift.Float32?
  public func setAvgRightTorqueEffectiveness(_ avgRightTorqueEffectiveness: Swift.Float32)
  public func getAvgLeftPedalSmoothness() -> Swift.Float32?
  public func setAvgLeftPedalSmoothness(_ avgLeftPedalSmoothness: Swift.Float32)
  public func getAvgRightPedalSmoothness() -> Swift.Float32?
  public func setAvgRightPedalSmoothness(_ avgRightPedalSmoothness: Swift.Float32)
  public func getAvgCombinedPedalSmoothness() -> Swift.Float32?
  public func setAvgCombinedPedalSmoothness(_ avgCombinedPedalSmoothness: Swift.Float32)
  public func getSportIndex() -> Swift.UInt8?
  public func setSportIndex(_ sportIndex: Swift.UInt8)
  public func getTimeStanding() -> Swift.Float32?
  public func setTimeStanding(_ timeStanding: Swift.Float32)
  public func getStandCount() -> Swift.UInt16?
  public func setStandCount(_ standCount: Swift.UInt16)
  public func getAvgLeftPco() -> Swift.Int8?
  public func setAvgLeftPco(_ avgLeftPco: Swift.Int8)
  public func getAvgRightPco() -> Swift.Int8?
  public func setAvgRightPco(_ avgRightPco: Swift.Int8)
  public func getNumAvgLeftPowerPhase() -> Swift.Int
  public func getAvgLeftPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgLeftPowerPhase(_ index: Swift.Int, _ avgLeftPowerPhase: Swift.Float32)
  public func getNumAvgLeftPowerPhasePeak() -> Swift.Int
  public func getAvgLeftPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgLeftPowerPhasePeak(_ index: Swift.Int, _ avgLeftPowerPhasePeak: Swift.Float32)
  public func getNumAvgRightPowerPhase() -> Swift.Int
  public func getAvgRightPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhase(_ index: Swift.Int, _ avgRightPowerPhase: Swift.Float32)
  public func getNumAvgRightPowerPhasePeak() -> Swift.Int
  public func getAvgRightPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhasePeak(_ index: Swift.Int, _ avgRightPowerPhasePeak: Swift.Float32)
  public func getNumAvgPowerPosition() -> Swift.Int
  public func getAvgPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setAvgPowerPosition(_ index: Swift.Int, _ avgPowerPosition: Swift.UInt16)
  public func getNumMaxPowerPosition() -> Swift.Int
  public func getMaxPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setMaxPowerPosition(_ index: Swift.Int, _ maxPowerPosition: Swift.UInt16)
  public func getNumAvgCadencePosition() -> Swift.Int
  public func getAvgCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setAvgCadencePosition(_ index: Swift.Int, _ avgCadencePosition: Swift.UInt8)
  public func getNumMaxCadencePosition() -> Swift.Int
  public func getMaxCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setMaxCadencePosition(_ index: Swift.Int, _ maxCadencePosition: Swift.UInt8)
  public func getEnhancedAvgSpeed() -> Swift.Float32?
  public func setEnhancedAvgSpeed(_ enhancedAvgSpeed: Swift.Float32)
  public func getEnhancedMaxSpeed() -> Swift.Float32?
  public func setEnhancedMaxSpeed(_ enhancedMaxSpeed: Swift.Float32)
  public func getEnhancedAvgAltitude() -> Swift.Float32?
  public func setEnhancedAvgAltitude(_ enhancedAvgAltitude: Swift.Float32)
  public func getEnhancedMinAltitude() -> Swift.UInt32?
  public func setEnhancedMinAltitude(_ enhancedMinAltitude: Swift.Float32)
  public func getEnhancedMaxAltitude() -> Swift.Float32?
  public func setEnhancedMaxAltitude(_ enhancedMaxAltitude: Swift.Float32)
  public func getAvgLevMotorPower() -> Swift.UInt16?
  public func setAvgLevMotorPower(_ avgLevMotorPower: Swift.UInt16)
  public func getMaxLevMotorPower() -> Swift.UInt16?
  public func setMaxLevMotorPower(_ maxLevMotorPower: Swift.UInt16)
  public func getLevBatteryConsumption() -> Swift.Float32?
  public func setLevBatteryConsumption(_ levBatteryConsumption: Swift.Float32)
  public func getAvgVerticalRatio() -> Swift.Float32?
  public func setAvgVerticalRatio(_ avgVerticalRatio: Swift.Float32)
  public func getAvgStanceTimeBalance() -> Swift.Float32?
  public func setAvgStanceTimeBalance(_ avgStanceTimeBalance: Swift.Float32)
  public func getAvgStepLength() -> Swift.Float32?
  public func setAvgStepLength(_ avgStepLength: Swift.Float32)
  public func getTotalAnaerobicTrainingEffect() -> Swift.Float32?
  public func setTotalAnaerobicTrainingEffect(_ totalAnaerobicTrainingEffect: Swift.Float32)
  public func getAvgVam() -> Swift.Float32?
  public func setAvgVam(_ avgVam: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct DeserializeOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let caseInsensitive: GimKit.DeserializeOptions
  public static let defaultOptions: GimKit.DeserializeOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = GimKit.DeserializeOptions
  public typealias Element = GimKit.DeserializeOptions
  public typealias RawValue = Swift.Int
}
public enum DebugMode : Swift.Int {
  case verbose
  case debug
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct HandyJSONConfiguration {
  public static var debugMode: GimKit.DebugMode {
    get
    set
  }
  public static var deserializeOptions: GimKit.DeserializeOptions
}
public enum Tone : Swift.UInt8 {
  case Off
  case Tone
  case Vibrate
  case ToneAndVibrate
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct AttitudeValidity {
  public static let TrackAngleHeadingValid: Swift.UInt16
  public static let PitchValid: Swift.UInt16
  public static let RollValid: Swift.UInt16
  public static let LateralBodyAccelValid: Swift.UInt16
  public static let NormalBodyAccelValid: Swift.UInt16
  public static let TurnRateValid: Swift.UInt16
  public static let HwFail: Swift.UInt16
  public static let MagInvalid: Swift.UInt16
  public static let NoGps: Swift.UInt16
  public static let GpsInvalid: Swift.UInt16
  public static let SolutionCoasting: Swift.UInt16
  public static let TrueTrackAngle: Swift.UInt16
  public static let MagneticHeading: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct WarningOptions {
  public static let `default`: GimKit.WarningOptions
  public init(notifyOnConnection: Swift.Bool, notifyOnDisconnection: Swift.Bool, notifyOnNotification: Swift.Bool)
}
public enum BacklightMode : Swift.UInt8 {
  case Off
  case Manual
  case KeyAndMessages
  case AutoBrightness
  case SmartNotifications
  case KeyAndMessagesNight
  case KeyAndMessagesAndSmartNotifications
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol GimKitMethodDecodedListener : AnyObject {
  func onForwardFrameRequest(frame: [Swift.UInt8], count: Swift.Int)
  func onReceivedMethodCrcError(frame: [Swift.UInt8], crcReceived: Swift.Int, crcCalculated: Swift.Int)
  func onReceivedMethodProtocolError(frame: [Swift.UInt8])
  func onMethodDisconnectBleInvoke()
  func onMethodNotifyKeyEventInvoke(keyEvent: [GimKit.GimKitKeyEvent])
  func onMethodNotifyBrakeEventInvoke()
  func onMethodNotifyGimKitDataInvoke(cadence: Swift.UInt16, speed: Swift.UInt16, power: Swift.UInt16, distance: Swift.UInt32, state: Swift.UInt16, gear: Swift.UInt8, torque: Swift.UInt8, bpm: Swift.UInt8, calorie: Swift.UInt32, motor: Swift.UInt16, temperature: Swift.UInt16)
  func onMethodNotifyKnobRotationInvoke(rotation: Swift.Int)
  func onMethodHandshakeReply(random: [Swift.UInt8])
  func onMethodHandshakeReply(error: Swift.Int)
  func onMethodVerifyMd5Reply(result: Swift.Bool)
  func onMethodVerifyMd5Reply(error: Swift.Int, md5: [Swift.UInt8])
  func onMethodGetProtocolRevisionReply(revision: Swift.UInt8)
  func onMethodGetProtocolRevisionReply(error: Swift.Int)
  func onMethodGetComponentSnReply(deviceInfoInternalList: [GimKit.GimKitDeviceInfoInternal])
  func onMethodGetComponentSnReply(error: Swift.Int)
  func onMethodSetTorqueReply(torque: Swift.Int)
  func onMethodSetTorqueReply(error: Swift.Int, torque: Swift.Int)
  func onMethodGetDeviceIdReply(deviceId: Swift.UInt32)
  func onMethodGetDeviceIdReply(error: Swift.Int)
  func onMethodStatBikeReply(type: Swift.UInt8, voltage: Swift.UInt8, temperature: Swift.UInt8, power: Swift.UInt8)
  func onMethodStatBikeReply(error: Swift.Int)
  func onMethodSwitchServiceModeReply(mode: Swift.UInt16)
  func onMethodSwitchServiceModeReply(error: Swift.Int, mode: Swift.UInt16)
  func onMethodSetConsoleStateReply(state: Swift.Int)
  func onMethodSetConsoleStateReply(error: Swift.Int, state: Swift.Int)
  func onMethodSeizeKnobControlReply(mode: Swift.Bool)
  func onMethodSeizeKnobControlReply(error: Swift.Int, mode: Swift.Bool)
  func onMethodSetKnobDisplayModeReply(mode: Swift.UInt8)
  func onMethodSetKnobDisplayModeReply(error: Swift.Int, mode: Swift.UInt8)
  func onMethodSetErgModeReply(erg: Swift.Bool)
  func onMethodSetErgModeReply(error: Swift.Int, erg: Swift.Bool)
  func onMethodNotifyStrengthDataInvoke(flag: Swift.Int, tension: Swift.Int, speed: Swift.Int, power: Swift.Int, position: Swift.Int, mcStatus: Swift.Int, mcTemperature: Swift.Int)
  func onMethodSetStrengthEquipmentModeReply(data: [Swift.UInt8])
  func onMethodSetStrengthEquipmentModeReplyError(error: Swift.Int, data: [Swift.UInt8])
  func onMethodNotifyRowermDataInvoke(flag: Swift.UInt64, torqueSet: Swift.Int, mode: Swift.UInt16, level: Swift.UInt16, torqueRT: Swift.Int, force: Swift.Int, direction: Swift.UInt16, drawstringDistance: Swift.Int, lastPullTime: Swift.Int, lastPushTime: Swift.Int, strokeRate: Swift.Int, shipSpeed: Swift.Int, power: Swift.Int, EMCSpeed: Swift.Int, EMCCurrent: Swift.Int, EMCVoltage: Swift.Int, EMCTemperature: Swift.Int, status: Swift.Int)
  func onMethodSetRowermModeReply(data: [Swift.UInt8])
  func onMethodSetRowermModeReplyError(error: Swift.Int, data: [Swift.UInt8])
  func onMethodNotifyXbikeDataInvoke(flag: Swift.UInt32, cadence: Swift.Int, power: Swift.Int, torque: Swift.Int, heartRate: Swift.UInt16, totalDistance: Swift.UInt32, totalCalorie: Swift.UInt32, battStatus: Swift.UInt16, intensity: Swift.UInt16)
}
public class AviationAttitudeMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case SystemTime
    case Pitch
    case Roll
    case AccelLateral
    case AccelNormal
    case TurnRate
    case Stage
    case AttitudeStageComplete
    case Track
    case Validity
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumSystemTime() -> Swift.Int
  public func getSystemTime(_ index: Swift.Int) -> Swift.UInt32?
  public func setSystemTime(_ index: Swift.Int, _ systemTime: Swift.UInt32)
  public func getNumPitch() -> Swift.Int
  public func getPitch(_ index: Swift.Int) -> Swift.Float32?
  public func setPitch(_ index: Swift.Int, _ pitch: Swift.Float32)
  public func getNumRoll() -> Swift.Int
  public func getRoll(_ index: Swift.Int) -> Swift.Float32?
  public func setRoll(_ index: Swift.Int, _ roll: Swift.Float32)
  public func getNumAccelLateral() -> Swift.Int
  public func getAccelLateral(_ index: Swift.Int) -> Swift.Float32?
  public func setAccelLateral(_ index: Swift.Int, _ accelLateral: Swift.Float32)
  public func getNumAccelNormal() -> Swift.Int
  public func getAccelNormal(_ index: Swift.Int) -> Swift.Float32?
  public func setAccelNormal(_ index: Swift.Int, _ accelNormal: Swift.Float32)
  public func getNumTurnRate() -> Swift.Int
  public func getTurnRate(_ index: Swift.Int) -> Swift.Float32?
  public func setTurnRate(_ index: Swift.Int, _ turnRate: Swift.Float32)
  public func getNumStage() -> Swift.Int
  public func getStage(_ index: Swift.Int) -> GimKit.AttitudeStage?
  public func setStage(_ index: Swift.Int, _ stage: GimKit.AttitudeStage)
  public func getNumAttitudeStageComplete() -> Swift.Int
  public func getAttitudeStageComplete(_ index: Swift.Int) -> Swift.UInt8?
  public func setAttitudeStageComplete(_ index: Swift.Int, _ attitudeStageComplete: Swift.UInt8)
  public func getNumTrack() -> Swift.Int
  public func getTrack(_ index: Swift.Int) -> Swift.Float32?
  public func setTrack(_ index: Swift.Int, _ track: Swift.Float32)
  public func getNumValidity() -> Swift.Int
  public func getValidity(_ index: Swift.Int) -> Swift.UInt16?
  public func setValidity(_ index: Swift.Int, _ validity: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CRC {
  public static func get16(crc: Swift.UInt16, data: Swift.UInt8) -> Swift.UInt16
  public static func calc16(dataBlock: [Swift.UInt8], size: Swift.Int) -> Swift.UInt16
  @objc deinit
}
public enum HrZoneCalc : Swift.UInt8 {
  case Custom
  case PercentMaxHr
  case PercentHrr
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct LanguageBits3 {
  public static let Bulgarian: Swift.UInt8
  public static let Romanian: Swift.UInt8
  public static let Chinese: Swift.UInt8
  public static let Japanese: Swift.UInt8
  public static let Korean: Swift.UInt8
  public static let Taiwanese: Swift.UInt8
  public static let Thai: Swift.UInt8
  public static let Hebrew: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public struct SquatExerciseName {
  public static let LegPress: Swift.UInt16
  public static let BackSquatWithBodyBar: Swift.UInt16
  public static let BackSquats: Swift.UInt16
  public static let WeightedBackSquats: Swift.UInt16
  public static let BalancingSquat: Swift.UInt16
  public static let WeightedBalancingSquat: Swift.UInt16
  public static let BarbellBackSquat: Swift.UInt16
  public static let BarbellBoxSquat: Swift.UInt16
  public static let BarbellFrontSquat: Swift.UInt16
  public static let BarbellHackSquat: Swift.UInt16
  public static let BarbellHangSquatSnatch: Swift.UInt16
  public static let BarbellLateralStepUp: Swift.UInt16
  public static let BarbellQuarterSquat: Swift.UInt16
  public static let BarbellSiffSquat: Swift.UInt16
  public static let BarbellSquatSnatch: Swift.UInt16
  public static let BarbellSquatWithHeelsRaised: Swift.UInt16
  public static let BarbellStepover: Swift.UInt16
  public static let BarbellStepUp: Swift.UInt16
  public static let BenchSquatWithRotationalChop: Swift.UInt16
  public static let WeightedBenchSquatWithRotationalChop: Swift.UInt16
  public static let BodyWeightWallSquat: Swift.UInt16
  public static let WeightedWallSquat: Swift.UInt16
  public static let BoxStepSquat: Swift.UInt16
  public static let WeightedBoxStepSquat: Swift.UInt16
  public static let BracedSquat: Swift.UInt16
  public static let CrossedArmBarbellFrontSquat: Swift.UInt16
  public static let CrossoverDumbbellStepUp: Swift.UInt16
  public static let DumbbellFrontSquat: Swift.UInt16
  public static let DumbbellSplitSquat: Swift.UInt16
  public static let DumbbellSquat: Swift.UInt16
  public static let DumbbellSquatClean: Swift.UInt16
  public static let DumbbellStepover: Swift.UInt16
  public static let DumbbellStepUp: Swift.UInt16
  public static let ElevatedSingleLegSquat: Swift.UInt16
  public static let WeightedElevatedSingleLegSquat: Swift.UInt16
  public static let FigureFourSquats: Swift.UInt16
  public static let WeightedFigureFourSquats: Swift.UInt16
  public static let GobletSquat: Swift.UInt16
  public static let KettlebellSquat: Swift.UInt16
  public static let KettlebellSwingOverhead: Swift.UInt16
  public static let KettlebellSwingWithFlipToSquat: Swift.UInt16
  public static let LateralDumbbellStepUp: Swift.UInt16
  public static let OneLeggedSquat: Swift.UInt16
  public static let OverheadDumbbellSquat: Swift.UInt16
  public static let OverheadSquat: Swift.UInt16
  public static let PartialSingleLegSquat: Swift.UInt16
  public static let WeightedPartialSingleLegSquat: Swift.UInt16
  public static let PistolSquat: Swift.UInt16
  public static let WeightedPistolSquat: Swift.UInt16
  public static let PlieSlides: Swift.UInt16
  public static let WeightedPlieSlides: Swift.UInt16
  public static let PlieSquat: Swift.UInt16
  public static let WeightedPlieSquat: Swift.UInt16
  public static let PrisonerSquat: Swift.UInt16
  public static let WeightedPrisonerSquat: Swift.UInt16
  public static let SingleLegBenchGetUp: Swift.UInt16
  public static let WeightedSingleLegBenchGetUp: Swift.UInt16
  public static let SingleLegBenchSquat: Swift.UInt16
  public static let WeightedSingleLegBenchSquat: Swift.UInt16
  public static let SingleLegSquatOnSwissBall: Swift.UInt16
  public static let WeightedSingleLegSquatOnSwissBall: Swift.UInt16
  public static let Squat: Swift.UInt16
  public static let WeightedSquat: Swift.UInt16
  public static let SquatsWithBand: Swift.UInt16
  public static let StaggeredSquat: Swift.UInt16
  public static let WeightedStaggeredSquat: Swift.UInt16
  public static let StepUp: Swift.UInt16
  public static let WeightedStepUp: Swift.UInt16
  public static let SuitcaseSquats: Swift.UInt16
  public static let SumoSquat: Swift.UInt16
  public static let SumoSquatSlideIn: Swift.UInt16
  public static let WeightedSumoSquatSlideIn: Swift.UInt16
  public static let SumoSquatToHighPull: Swift.UInt16
  public static let SumoSquatToStand: Swift.UInt16
  public static let WeightedSumoSquatToStand: Swift.UInt16
  public static let SumoSquatWithRotation: Swift.UInt16
  public static let WeightedSumoSquatWithRotation: Swift.UInt16
  public static let SwissBallBodyWeightWallSquat: Swift.UInt16
  public static let WeightedSwissBallWallSquat: Swift.UInt16
  public static let Thrusters: Swift.UInt16
  public static let UnevenSquat: Swift.UInt16
  public static let WeightedUnevenSquat: Swift.UInt16
  public static let WaistSlimmingSquat: Swift.UInt16
  public static let WallBall: Swift.UInt16
  public static let WideStanceBarbellSquat: Swift.UInt16
  public static let WideStanceGobletSquat: Swift.UInt16
  public static let ZercherSquat: Swift.UInt16
  public static let KbsOverhead: Swift.UInt16
  public static let SquatAndSideKick: Swift.UInt16
  public static let SquatJumpsInNOut: Swift.UInt16
  public static let PilatesPlieSquatsParallelTurnedOutFlatAndHeels: Swift.UInt16
  public static let ReleveStraightLegAndKneeBentWithOneLegVariation: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class Header {
  public var size: Swift.UInt8 {
    get
    set
  }
  public var protocolVersion: Swift.UInt8
  public var profileVersion: Swift.UInt16
  public var dataSize: Swift.UInt32
  public var crc: Swift.UInt16
  public init(version: GimKit.ProtocolVersion)
  public init(fitData: GimKit.PositionableData)
  public func isValid() -> Swift.Bool
  public func read(fitData: GimKit.PositionableData)
  public func write(fitData: GimKit.PositionableData)
  public func updateCRC()
  @objc deinit
}
open class EnumTransform<T> : GimKit.TransformType where T : Swift.RawRepresentable {
  public typealias Object = T
  public typealias JSON = T.RawValue
  public init()
  open func transformFromJSON(_ value: Any?) -> T?
  open func transformToJSON(_ value: T?) -> T.RawValue?
  @objc deinit
}
public class PositionableData {
  public var data: [Swift.UInt8] {
    get
  }
  public var position: Swift.Int
  public var count: Swift.Int {
    get
  }
  public var canRead: Swift.Bool {
    get
  }
  public init()
  public init(data: [Swift.UInt8], position: Swift.Int = 0)
  public func read() -> Swift.UInt8
  public func read(count: Swift.Int) -> [Swift.UInt8]
  public func write(_ byte: Swift.UInt8)
  public func write(_ bytes: [Swift.UInt8])
  @objc deinit
}
public struct LanguageBits4 {
  public static let BrazilianPortuguese: Swift.UInt8
  public static let Indonesian: Swift.UInt8
  public static let Malaysian: Swift.UInt8
  public static let Vietnamese: Swift.UInt8
  public static let Burmese: Swift.UInt8
  public static let Mongolian: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public struct SportBits0 {
  public static let Generic: Swift.UInt8
  public static let Running: Swift.UInt8
  public static let Cycling: Swift.UInt8
  public static let Transition: Swift.UInt8
  public static let FitnessEquipment: Swift.UInt8
  public static let Swimming: Swift.UInt8
  public static let Basketball: Swift.UInt8
  public static let Soccer: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum SessionTrigger : Swift.UInt8 {
  case ActivityEnd
  case Manual
  case AutoMultiSport
  case FitnessEquipment
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class AccumulatedField {
  public var mesgNum: Swift.Int32
  public var destFieldNum: Swift.Int32
  public init(mesgNum: Swift.Int32, destFieldNum: Swift.Int32)
  public func accumulate(value: Swift.Int64, bits: Swift.Int) -> Swift.Int64
  public func set(value: Swift.Int64) -> Swift.Int64
  @objc deinit
}
open class URLTransform : GimKit.TransformType {
  public typealias Object = Foundation.URL
  public typealias JSON = Swift.String
  public init(shouldEncodeURLString: Swift.Bool = true)
  open func transformFromJSON(_ value: Any?) -> Foundation.URL?
  open func transformToJSON(_ value: Foundation.URL?) -> Swift.String?
  @objc deinit
}
public enum DecodeMode {
  case Normal
  case InvalidHeader
  case DataOnly
  public static func == (a: GimKit.DecodeMode, b: GimKit.DecodeMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class BarometerDataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case SampleTimeOffset
    case BaroPres
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumSampleTimeOffset() -> Swift.Int
  public func getSampleTimeOffset(_ index: Swift.Int) -> Swift.UInt16?
  public func setSampleTimeOffset(_ index: Swift.Int, _ sampleTimeOffset: Swift.UInt16)
  public func getNumBaroPres() -> Swift.Int
  public func getBaroPres(_ index: Swift.Int) -> Swift.UInt32?
  public func setBaroPres(_ index: Swift.Int, _ baroPres: Swift.UInt32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct LanguageBits0 {
  public static let English: Swift.UInt8
  public static let French: Swift.UInt8
  public static let Italian: Swift.UInt8
  public static let German: Swift.UInt8
  public static let Spanish: Swift.UInt8
  public static let Croatian: Swift.UInt8
  public static let Czech: Swift.UInt8
  public static let Danish: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum Schedule : Swift.UInt8 {
  case Workout
  case Course
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class SoftwareMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Version
    case PartNumber
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getVersion() -> Swift.Float32?
  public func setVersion(_ version: Swift.Float32)
  public func getPartNumber() -> [Swift.UInt8]?
  public func getPartNumberAsString() -> Swift.String?
  public func setPartNumber(_ partNumber: Swift.String)
  public func setPartNumber(_ partNumber: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum AutolapTrigger : Swift.UInt8 {
  case Time
  case Distance
  case PositionStart
  case PositionLap
  case PositionWaypoint
  case PositionMarked
  case Off
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct CrunchExerciseName {
  public static let BicycleCrunch: Swift.UInt16
  public static let CableCrunch: Swift.UInt16
  public static let CircularArmCrunch: Swift.UInt16
  public static let CrossedArmsCrunch: Swift.UInt16
  public static let WeightedCrossedArmsCrunch: Swift.UInt16
  public static let CrossLegReverseCrunch: Swift.UInt16
  public static let WeightedCrossLegReverseCrunch: Swift.UInt16
  public static let CrunchChop: Swift.UInt16
  public static let WeightedCrunchChop: Swift.UInt16
  public static let DoubleCrunch: Swift.UInt16
  public static let WeightedDoubleCrunch: Swift.UInt16
  public static let ElbowToKneeCrunch: Swift.UInt16
  public static let WeightedElbowToKneeCrunch: Swift.UInt16
  public static let FlutterKicks: Swift.UInt16
  public static let WeightedFlutterKicks: Swift.UInt16
  public static let FoamRollerReverseCrunchOnBench: Swift.UInt16
  public static let WeightedFoamRollerReverseCrunchOnBench: Swift.UInt16
  public static let FoamRollerReverseCrunchWithDumbbell: Swift.UInt16
  public static let FoamRollerReverseCrunchWithMedicineBall: Swift.UInt16
  public static let FrogPress: Swift.UInt16
  public static let HangingKneeRaiseObliqueCrunch: Swift.UInt16
  public static let WeightedHangingKneeRaiseObliqueCrunch: Swift.UInt16
  public static let HipCrossover: Swift.UInt16
  public static let WeightedHipCrossover: Swift.UInt16
  public static let HollowRock: Swift.UInt16
  public static let WeightedHollowRock: Swift.UInt16
  public static let InclineReverseCrunch: Swift.UInt16
  public static let WeightedInclineReverseCrunch: Swift.UInt16
  public static let KneelingCableCrunch: Swift.UInt16
  public static let KneelingCrossCrunch: Swift.UInt16
  public static let WeightedKneelingCrossCrunch: Swift.UInt16
  public static let KneelingObliqueCableCrunch: Swift.UInt16
  public static let KneesToElbow: Swift.UInt16
  public static let LegExtensions: Swift.UInt16
  public static let WeightedLegExtensions: Swift.UInt16
  public static let LegLevers: Swift.UInt16
  public static let McgillCurlUp: Swift.UInt16
  public static let WeightedMcgillCurlUp: Swift.UInt16
  public static let ModifiedPilatesRollUpWithBall: Swift.UInt16
  public static let WeightedModifiedPilatesRollUpWithBall: Swift.UInt16
  public static let PilatesCrunch: Swift.UInt16
  public static let WeightedPilatesCrunch: Swift.UInt16
  public static let PilatesRollUpWithBall: Swift.UInt16
  public static let WeightedPilatesRollUpWithBall: Swift.UInt16
  public static let RaisedLegsCrunch: Swift.UInt16
  public static let WeightedRaisedLegsCrunch: Swift.UInt16
  public static let ReverseCrunch: Swift.UInt16
  public static let WeightedReverseCrunch: Swift.UInt16
  public static let ReverseCrunchOnABench: Swift.UInt16
  public static let WeightedReverseCrunchOnABench: Swift.UInt16
  public static let ReverseCurlAndLift: Swift.UInt16
  public static let WeightedReverseCurlAndLift: Swift.UInt16
  public static let RotationalLift: Swift.UInt16
  public static let WeightedRotationalLift: Swift.UInt16
  public static let SeatedAlternatingReverseCrunch: Swift.UInt16
  public static let WeightedSeatedAlternatingReverseCrunch: Swift.UInt16
  public static let SeatedLegU: Swift.UInt16
  public static let WeightedSeatedLegU: Swift.UInt16
  public static let SideToSideCrunchAndWeave: Swift.UInt16
  public static let WeightedSideToSideCrunchAndWeave: Swift.UInt16
  public static let SingleLegReverseCrunch: Swift.UInt16
  public static let WeightedSingleLegReverseCrunch: Swift.UInt16
  public static let SkaterCrunchCross: Swift.UInt16
  public static let WeightedSkaterCrunchCross: Swift.UInt16
  public static let StandingCableCrunch: Swift.UInt16
  public static let StandingSideCrunch: Swift.UInt16
  public static let StepClimb: Swift.UInt16
  public static let WeightedStepClimb: Swift.UInt16
  public static let SwissBallCrunch: Swift.UInt16
  public static let SwissBallReverseCrunch: Swift.UInt16
  public static let WeightedSwissBallReverseCrunch: Swift.UInt16
  public static let SwissBallRussianTwist: Swift.UInt16
  public static let WeightedSwissBallRussianTwist: Swift.UInt16
  public static let SwissBallSideCrunch: Swift.UInt16
  public static let WeightedSwissBallSideCrunch: Swift.UInt16
  public static let ThoracicCrunchesOnFoamRoller: Swift.UInt16
  public static let WeightedThoracicCrunchesOnFoamRoller: Swift.UInt16
  public static let TricepsCrunch: Swift.UInt16
  public static let WeightedBicycleCrunch: Swift.UInt16
  public static let WeightedCrunch: Swift.UInt16
  public static let WeightedSwissBallCrunch: Swift.UInt16
  public static let ToesToBar: Swift.UInt16
  public static let WeightedToesToBar: Swift.UInt16
  public static let Crunch: Swift.UInt16
  public static let StraightLegCrunchWithBall: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
extension BinaryInteger {
  public func toBluetoothData() -> Foundation.Data
  public init(bluetoothData: Foundation.Data)
}
extension Int64 : GimKit.Sendable, GimKit.Receivable {
}
extension Int32 : GimKit.Sendable, GimKit.Receivable {
}
extension Int16 : GimKit.Sendable, GimKit.Receivable {
}
extension Int8 : GimKit.Sendable, GimKit.Receivable {
}
extension UInt64 : GimKit.Sendable, GimKit.Receivable {
}
extension UInt32 : GimKit.Sendable, GimKit.Receivable {
}
extension UInt16 : GimKit.Sendable, GimKit.Receivable {
}
extension UInt8 : GimKit.Sendable, GimKit.Receivable {
}
@_hasMissingDesignatedInitializers public class DateTime {
  public static func stringToDate(dateTime: Swift.String, fromTemplate: Swift.String = "yyyyMMMdd") -> Foundation.Date
  public static func stringToDate(dateTime: Swift.String, format: Swift.String) -> Foundation.Date
  public static func dateToString(dateTime: Foundation.Date, fromTemplate: Swift.String = "yyyyMMMdd") -> Swift.String
  public static func dateToString(dateTime: Foundation.Date, format: Swift.String) -> Swift.String
  public static func timeStampToString(timeStamp: Swift.Int, fromTemplate: Swift.String = "yyyyMMMdd") -> Swift.String
  public static func timeStampToString(timeStamp: Swift.Int, format: Swift.String) -> Swift.String
  public static func formatPlayTime(sec: Swift.Int) -> Swift.String
  public static func getUnitFormat(sec: Swift.Int) -> Swift.String
  public static func getCurrentTimeZone() -> Swift.Int
  public static func getTimeStrWithString(str: Swift.String, format: Swift.String? = "yyyy-MM-dd HH:mm:ss") -> Foundation.TimeInterval
  public static func getYesterday(today: Swift.String) -> Swift.String
  @objc deinit
}
public class LengthMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case Event
    case EventType
    case StartTime
    case TotalElapsedTime
    case TotalTimerTime
    case TotalStrokes
    case AvgSpeed
    case SwimStroke
    case AvgSwimmingCadence
    case EventGroup
    case TotalCalories
    case LengthType
    case PlayerScore
    case OpponentScore
    case StrokeCount
    case ZoneCount
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getStartTime() -> GimKit.FitDateTime?
  public func setStartTime(_ startTime: GimKit.FitDateTime)
  public func getTotalElapsedTime() -> Swift.Float32?
  public func setTotalElapsedTime(_ totalElapsedTime: Swift.Float32)
  public func getTotalTimerTime() -> Swift.Float32?
  public func setTotalTimerTime(_ totalTimerTime: Swift.Float32)
  public func getTotalStrokes() -> Swift.UInt16?
  public func setTotalStrokes(_ totalStrokes: Swift.UInt16)
  public func getAvgSpeed() -> Swift.Float32?
  public func setAvgSpeed(_ avgSpeed: Swift.Float32)
  public func getSwimStroke() -> GimKit.SwimStroke?
  public func setSwimStroke(_ swimStroke: GimKit.SwimStroke)
  public func getAvgSwimmingCadence() -> Swift.UInt8?
  public func setAvgSwimmingCadence(_ avgSwimmingCadence: Swift.UInt8)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  public func getTotalCalories() -> Swift.UInt16?
  public func setTotalCalories(_ totalCalories: Swift.UInt16)
  public func getLengthType() -> GimKit.LengthType?
  public func setLengthType(_ lengthType: GimKit.LengthType)
  public func getPlayerScore() -> Swift.UInt16?
  public func setPlayerScore(_ playerScore: Swift.UInt16)
  public func getOpponentScore() -> Swift.UInt16?
  public func setOpponentScore(_ opponentScore: Swift.UInt16)
  public func getNumStrokeCount() -> Swift.Int
  public func getStrokeCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setStrokeCount(_ index: Swift.Int, _ strokeCount: Swift.UInt16)
  public func getNumZoneCount() -> Swift.Int
  public func getZoneCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setZoneCount(_ index: Swift.Int, _ zoneCount: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum DisplayOrientation : Swift.UInt8 {
  case Auto
  case Portrait
  case Landscape
  case PortraitFlipped
  case LandscapeFlipped
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class MonitoringInfoMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case LocalTimestamp
    case ActivityType
    case CyclesToDistance
    case CyclesToCalories
    case RestingMetabolicRate
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getLocalTimestamp() -> Swift.UInt32?
  public func setLocalTimestamp(_ localTimestamp: Swift.UInt32)
  public func getNumActivityType() -> Swift.Int
  public func getActivityType(_ index: Swift.Int) -> GimKit.ActivityType?
  public func setActivityType(_ index: Swift.Int, _ activityType: GimKit.ActivityType)
  public func getNumCyclesToDistance() -> Swift.Int
  public func getCyclesToDistance(_ index: Swift.Int) -> Swift.Float32?
  public func setCyclesToDistance(_ index: Swift.Int, _ cyclesToDistance: Swift.Float32)
  public func getNumCyclesToCalories() -> Swift.Int
  public func getCyclesToCalories(_ index: Swift.Int) -> Swift.Float32?
  public func setCyclesToCalories(_ index: Swift.Int, _ cyclesToCalories: Swift.Float32)
  public func getRestingMetabolicRate() -> Swift.UInt16?
  public func setRestingMetabolicRate(_ restingMetabolicRate: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
extension Data {
  public func extract<T>(start: Swift.Int, length: Swift.Int) throws -> T
}
public class SwiftTimer {
  final public let repeats: Swift.Bool
  public typealias SwiftTimerHandler = (Swift.UInt32) -> Swift.Void
  public init(interval: Dispatch.DispatchTimeInterval, repeats: Swift.Bool = false, leeway: Dispatch.DispatchTimeInterval = .seconds(0), queue: Dispatch.DispatchQueue = .main, handler: @escaping GimKit.SwiftTimer.SwiftTimerHandler, onStarted: @escaping () -> Swift.Void)
  public static func repeaticTimer(interval: Dispatch.DispatchTimeInterval, leeway: Dispatch.DispatchTimeInterval = .seconds(0), queue: Dispatch.DispatchQueue = .main, onTicked: @escaping GimKit.SwiftTimer.SwiftTimerHandler, onStarted: @escaping () -> Swift.Void) -> GimKit.SwiftTimer
  @objc deinit
  public func fire()
  public func start()
  public func resume()
  public func suspend()
  public func cancel()
  public func rescheduleRepeating(interval: Dispatch.DispatchTimeInterval)
  public func rescheduleHandler(handler: @escaping GimKit.SwiftTimer.SwiftTimerHandler)
}
extension SwiftTimer {
  public static func debounce(interval: Dispatch.DispatchTimeInterval, identifier: Swift.String, queue: Dispatch.DispatchQueue = .main, handler: @escaping () -> Swift.Void)
  public static func throttle(interval: Dispatch.DispatchTimeInterval, identifier: Swift.String, queue: Dispatch.DispatchQueue = .main, handler: @escaping () -> Swift.Void)
  public static func cancelThrottlingTimer(identifier: Swift.String)
}
public enum DisplayHeart : Swift.UInt8 {
  case Bpm
  case Max
  case Reserve
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class AntTxMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case FractionalTimestamp
    case MesgId
    case MesgData
    case ChannelNumber
    case Data
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getFractionalTimestamp() -> Swift.Float32?
  public func setFractionalTimestamp(_ fractionalTimestamp: Swift.Float32)
  public func getMesgId() -> Swift.UInt8?
  public func setMesgId(_ mesgId: Swift.UInt8)
  public func getNumMesgData() -> Swift.Int
  public func getMesgData(_ index: Swift.Int) -> Swift.UInt8?
  public func setMesgData(_ index: Swift.Int, _ mesgData: Swift.UInt8)
  public func getChannelNumber() -> Swift.UInt8?
  public func setChannelNumber(_ channelNumber: Swift.UInt8)
  public func getNumData() -> Swift.Int
  public func getData(_ index: Swift.Int) -> Swift.UInt8?
  public func setData(_ index: Swift.Int, _ data: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct GarminProduct {
  public static let Hrm1: Swift.UInt16
  public static let Axh01: Swift.UInt16
  public static let Axb01: Swift.UInt16
  public static let Axb02: Swift.UInt16
  public static let Hrm2ss: Swift.UInt16
  public static let DsiAlf02: Swift.UInt16
  public static let Hrm3ss: Swift.UInt16
  public static let HrmRunSingleByteProductId: Swift.UInt16
  public static let Bsm: Swift.UInt16
  public static let Bcm: Swift.UInt16
  public static let Axs01: Swift.UInt16
  public static let HrmTriSingleByteProductId: Swift.UInt16
  public static let Fr225SingleByteProductId: Swift.UInt16
  public static let Fr301China: Swift.UInt16
  public static let Fr301Japan: Swift.UInt16
  public static let Fr301Korea: Swift.UInt16
  public static let Fr301Taiwan: Swift.UInt16
  public static let Fr405: Swift.UInt16
  public static let Fr50: Swift.UInt16
  public static let Fr405Japan: Swift.UInt16
  public static let Fr60: Swift.UInt16
  public static let DsiAlf01: Swift.UInt16
  public static let Fr310xt: Swift.UInt16
  public static let Edge500: Swift.UInt16
  public static let Fr110: Swift.UInt16
  public static let Edge800: Swift.UInt16
  public static let Edge500Taiwan: Swift.UInt16
  public static let Edge500Japan: Swift.UInt16
  public static let Chirp: Swift.UInt16
  public static let Fr110Japan: Swift.UInt16
  public static let Edge200: Swift.UInt16
  public static let Fr910xt: Swift.UInt16
  public static let Edge800Taiwan: Swift.UInt16
  public static let Edge800Japan: Swift.UInt16
  public static let Alf04: Swift.UInt16
  public static let Fr610: Swift.UInt16
  public static let Fr210Japan: Swift.UInt16
  public static let VectorSs: Swift.UInt16
  public static let VectorCp: Swift.UInt16
  public static let Edge800China: Swift.UInt16
  public static let Edge500China: Swift.UInt16
  public static let Fr610Japan: Swift.UInt16
  public static let Edge500Korea: Swift.UInt16
  public static let Fr70: Swift.UInt16
  public static let Fr310xt4t: Swift.UInt16
  public static let Amx: Swift.UInt16
  public static let Fr10: Swift.UInt16
  public static let Edge800Korea: Swift.UInt16
  public static let Swim: Swift.UInt16
  public static let Fr910xtChina: Swift.UInt16
  public static let Fenix: Swift.UInt16
  public static let Edge200Taiwan: Swift.UInt16
  public static let Edge510: Swift.UInt16
  public static let Edge810: Swift.UInt16
  public static let Tempe: Swift.UInt16
  public static let Fr910xtJapan: Swift.UInt16
  public static let Fr620: Swift.UInt16
  public static let Fr220: Swift.UInt16
  public static let Fr910xtKorea: Swift.UInt16
  public static let Fr10Japan: Swift.UInt16
  public static let Edge810Japan: Swift.UInt16
  public static let VirbElite: Swift.UInt16
  public static let EdgeTouring: Swift.UInt16
  public static let Edge510Japan: Swift.UInt16
  public static let HrmTri: Swift.UInt16
  public static let HrmRun: Swift.UInt16
  public static let Fr920xt: Swift.UInt16
  public static let Edge510Asia: Swift.UInt16
  public static let Edge810China: Swift.UInt16
  public static let Edge810Taiwan: Swift.UInt16
  public static let Edge1000: Swift.UInt16
  public static let VivoFit: Swift.UInt16
  public static let VirbRemote: Swift.UInt16
  public static let VivoKi: Swift.UInt16
  public static let Fr15: Swift.UInt16
  public static let VivoActive: Swift.UInt16
  public static let Edge510Korea: Swift.UInt16
  public static let Fr620Japan: Swift.UInt16
  public static let Fr620China: Swift.UInt16
  public static let Fr220Japan: Swift.UInt16
  public static let Fr220China: Swift.UInt16
  public static let ApproachS6: Swift.UInt16
  public static let VivoSmart: Swift.UInt16
  public static let Fenix2: Swift.UInt16
  public static let Epix: Swift.UInt16
  public static let Fenix3: Swift.UInt16
  public static let Edge1000Taiwan: Swift.UInt16
  public static let Edge1000Japan: Swift.UInt16
  public static let Fr15Japan: Swift.UInt16
  public static let Edge520: Swift.UInt16
  public static let Edge1000China: Swift.UInt16
  public static let Fr620Russia: Swift.UInt16
  public static let Fr220Russia: Swift.UInt16
  public static let VectorS: Swift.UInt16
  public static let Edge1000Korea: Swift.UInt16
  public static let Fr920xtTaiwan: Swift.UInt16
  public static let Fr920xtChina: Swift.UInt16
  public static let Fr920xtJapan: Swift.UInt16
  public static let Virbx: Swift.UInt16
  public static let VivoSmartApac: Swift.UInt16
  public static let EtrexTouch: Swift.UInt16
  public static let Edge25: Swift.UInt16
  public static let Fr25: Swift.UInt16
  public static let VivoFit2: Swift.UInt16
  public static let Fr225: Swift.UInt16
  public static let Fr630: Swift.UInt16
  public static let Fr230: Swift.UInt16
  public static let VivoActiveApac: Swift.UInt16
  public static let Vector2: Swift.UInt16
  public static let Vector2s: Swift.UInt16
  public static let Virbxe: Swift.UInt16
  public static let Fr620Taiwan: Swift.UInt16
  public static let Fr220Taiwan: Swift.UInt16
  public static let Truswing: Swift.UInt16
  public static let Fenix3China: Swift.UInt16
  public static let Fenix3Twn: Swift.UInt16
  public static let VariaHeadlight: Swift.UInt16
  public static let VariaTaillightOld: Swift.UInt16
  public static let EdgeExplore1000: Swift.UInt16
  public static let Fr225Asia: Swift.UInt16
  public static let VariaRadarTaillight: Swift.UInt16
  public static let VariaRadarDisplay: Swift.UInt16
  public static let Edge20: Swift.UInt16
  public static let D2Bravo: Swift.UInt16
  public static let ApproachS20: Swift.UInt16
  public static let VariaRemote: Swift.UInt16
  public static let Hrm4Run: Swift.UInt16
  public static let VivoActiveHr: Swift.UInt16
  public static let VivoSmartGpsHr: Swift.UInt16
  public static let VivoSmartHr: Swift.UInt16
  public static let VivoMove: Swift.UInt16
  public static let VariaVision: Swift.UInt16
  public static let VivoFit3: Swift.UInt16
  public static let Fenix3Hr: Swift.UInt16
  public static let VirbUltra30: Swift.UInt16
  public static let IndexSmartScale: Swift.UInt16
  public static let Fr235: Swift.UInt16
  public static let Fenix3Chronos: Swift.UInt16
  public static let Oregon7xx: Swift.UInt16
  public static let Rino7xx: Swift.UInt16
  public static let Nautix: Swift.UInt16
  public static let Edge820: Swift.UInt16
  public static let EdgeExplore820: Swift.UInt16
  public static let Fenix5s: Swift.UInt16
  public static let D2BravoTitanium: Swift.UInt16
  public static let VariaUt800: Swift.UInt16
  public static let RunningDynamicsPod: Swift.UInt16
  public static let Fenix5x: Swift.UInt16
  public static let VivoFitJr: Swift.UInt16
  public static let Fr935: Swift.UInt16
  public static let Fenix5: Swift.UInt16
  public static let Sdm4: Swift.UInt16
  public static let EdgeRemote: Swift.UInt16
  public static let TrainingCenter: Swift.UInt16
  public static let ConnectiqSimulator: Swift.UInt16
  public static let AndroidAntplusPlugin: Swift.UInt16
  public static let Connect: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct RunExerciseName {
  public static let Run: Swift.UInt16
  public static let Walk: Swift.UInt16
  public static let Jog: Swift.UInt16
  public static let Sprint: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class TrainingFileMesg : GimKit.Mesg {
  public enum ProductSubfield : Swift.UInt16 {
    case GarminProduct
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case `Type`
    case Manufacturer
    case Product
    case SerialNumber
    case TimeCreated
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getType() -> GimKit.FitFileType?
  public func setType(_ type: GimKit.FitFileType)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  public func getProduct() -> Swift.UInt16?
  public func setProduct(_ product: Swift.UInt16)
  public func getGarminProduct() -> Swift.UInt16?
  public func setGarminProduct(_ garminProduct: Swift.UInt16)
  public func getSerialNumber() -> Swift.UInt32?
  public func setSerialNumber(_ serialNumber: Swift.UInt32)
  public func getTimeCreated() -> GimKit.FitDateTime?
  public func setTimeCreated(_ timeCreated: GimKit.FitDateTime)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class SpeedZoneMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case HighValue
    case Name
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getHighValue() -> Swift.Float32?
  public func setHighValue(_ highValue: Swift.Float32)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum Timeout {
  case seconds(Foundation.TimeInterval)
  case none
}
public struct TimeIntoDay {
  public static let Invalid: Swift.UInt32
}
public struct MesgNum {
  public static let FileId: Swift.UInt16
  public static let Capabilities: Swift.UInt16
  public static let DeviceSettings: Swift.UInt16
  public static let UserProfile: Swift.UInt16
  public static let HrmProfile: Swift.UInt16
  public static let SdmProfile: Swift.UInt16
  public static let BikeProfile: Swift.UInt16
  public static let ZonesTarget: Swift.UInt16
  public static let HrZone: Swift.UInt16
  public static let PowerZone: Swift.UInt16
  public static let MetZone: Swift.UInt16
  public static let Sport: Swift.UInt16
  public static let Goal: Swift.UInt16
  public static let Session: Swift.UInt16
  public static let Lap: Swift.UInt16
  public static let Record: Swift.UInt16
  public static let Event: Swift.UInt16
  public static let DeviceInfo: Swift.UInt16
  public static let Workout: Swift.UInt16
  public static let WorkoutStep: Swift.UInt16
  public static let Schedule: Swift.UInt16
  public static let WeightScale: Swift.UInt16
  public static let Course: Swift.UInt16
  public static let CoursePoint: Swift.UInt16
  public static let Totals: Swift.UInt16
  public static let Activity: Swift.UInt16
  public static let Software: Swift.UInt16
  public static let FileCapabilities: Swift.UInt16
  public static let MesgCapabilities: Swift.UInt16
  public static let FieldCapabilities: Swift.UInt16
  public static let FileCreator: Swift.UInt16
  public static let BloodPressure: Swift.UInt16
  public static let SpeedZone: Swift.UInt16
  public static let Monitoring: Swift.UInt16
  public static let TrainingFile: Swift.UInt16
  public static let Hrv: Swift.UInt16
  public static let AntRx: Swift.UInt16
  public static let AntTx: Swift.UInt16
  public static let AntChannelId: Swift.UInt16
  public static let Length: Swift.UInt16
  public static let MonitoringInfo: Swift.UInt16
  public static let Pad: Swift.UInt16
  public static let SlaveDevice: Swift.UInt16
  public static let Connectivity: Swift.UInt16
  public static let WeatherConditions: Swift.UInt16
  public static let WeatherAlert: Swift.UInt16
  public static let CadenceZone: Swift.UInt16
  public static let Hr: Swift.UInt16
  public static let SegmentLap: Swift.UInt16
  public static let MemoGlob: Swift.UInt16
  public static let SegmentId: Swift.UInt16
  public static let SegmentLeaderboardEntry: Swift.UInt16
  public static let SegmentPoint: Swift.UInt16
  public static let SegmentFile: Swift.UInt16
  public static let WorkoutSession: Swift.UInt16
  public static let WatchfaceSettings: Swift.UInt16
  public static let GpsMetadata: Swift.UInt16
  public static let CameraEvent: Swift.UInt16
  public static let TimestampCorrelation: Swift.UInt16
  public static let GyroscopeData: Swift.UInt16
  public static let AccelerometerData: Swift.UInt16
  public static let ThreeDSensorCalibration: Swift.UInt16
  public static let VideoFrame: Swift.UInt16
  public static let ObdiiData: Swift.UInt16
  public static let NmeaSentence: Swift.UInt16
  public static let AviationAttitude: Swift.UInt16
  public static let Video: Swift.UInt16
  public static let VideoTitle: Swift.UInt16
  public static let VideoDescription: Swift.UInt16
  public static let VideoClip: Swift.UInt16
  public static let OhrSettings: Swift.UInt16
  public static let ExdScreenConfiguration: Swift.UInt16
  public static let ExdDataFieldConfiguration: Swift.UInt16
  public static let ExdDataConceptConfiguration: Swift.UInt16
  public static let FieldDescription: Swift.UInt16
  public static let DeveloperDataId: Swift.UInt16
  public static let MagnetometerData: Swift.UInt16
  public static let BarometerData: Swift.UInt16
  public static let OneDSensorCalibration: Swift.UInt16
  public static let Set: Swift.UInt16
  public static let StressLevel: Swift.UInt16
  public static let DiveSettings: Swift.UInt16
  public static let DiveGas: Swift.UInt16
  public static let DiveAlarm: Swift.UInt16
  public static let ExerciseTitle: Swift.UInt16
  public static let DiveSummary: Swift.UInt16
  public static let MfgRangeMin: Swift.UInt16
  public static let MfgRangeMax: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class ExdScreenConfigurationMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ScreenIndex
    case FieldCount
    case Layout
    case ScreenEnabled
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getScreenIndex() -> Swift.UInt8?
  public func setScreenIndex(_ screenIndex: Swift.UInt8)
  public func getFieldCount() -> Swift.UInt8?
  public func setFieldCount(_ fieldCount: Swift.UInt8)
  public func getLayout() -> GimKit.ExdLayout?
  public func setLayout(_ layout: GimKit.ExdLayout)
  public func getScreenEnabled() -> GimKit.FitBool?
  public func setScreenEnabled(_ screenEnabled: GimKit.FitBool)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BleUtils {
  public static func getNexgimDeviceMainService(type: GimKit.GimKitDeviceType) -> CoreBluetooth.CBUUID
  public static func getNexgimDeviceDataCommandChar(type: GimKit.GimKitDeviceType) -> CoreBluetooth.CBUUID
  @objc deinit
}
public enum GimKitDeviceConnectionStatus : Swift.Int {
  case FAILED
  case CONNECTING
  case DISCONNECTED
  case CONNECTED
  case DISCONNECTING
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BenchPressExerciseName {
  public static let AlternatingDumbbellChestPressOnSwissBall: Swift.UInt16
  public static let BarbellBenchPress: Swift.UInt16
  public static let BarbellBoardBenchPress: Swift.UInt16
  public static let BarbellFloorPress: Swift.UInt16
  public static let CloseGripBarbellBenchPress: Swift.UInt16
  public static let DeclineDumbbellBenchPress: Swift.UInt16
  public static let DumbbellBenchPress: Swift.UInt16
  public static let DumbbellFloorPress: Swift.UInt16
  public static let InclineBarbellBenchPress: Swift.UInt16
  public static let InclineDumbbellBenchPress: Swift.UInt16
  public static let InclineSmithMachineBenchPress: Swift.UInt16
  public static let IsometricBarbellBenchPress: Swift.UInt16
  public static let KettlebellChestPress: Swift.UInt16
  public static let NeutralGripDumbbellBenchPress: Swift.UInt16
  public static let NeutralGripDumbbellInclineBenchPress: Swift.UInt16
  public static let OneArmFloorPress: Swift.UInt16
  public static let WeightedOneArmFloorPress: Swift.UInt16
  public static let PartialLockout: Swift.UInt16
  public static let ReverseGripBarbellBenchPress: Swift.UInt16
  public static let ReverseGripInclineBenchPress: Swift.UInt16
  public static let SingleArmCableChestPress: Swift.UInt16
  public static let SingleArmDumbbellBenchPress: Swift.UInt16
  public static let SmithMachineBenchPress: Swift.UInt16
  public static let SwissBallDumbbellChestPress: Swift.UInt16
  public static let TripleStopBarbellBenchPress: Swift.UInt16
  public static let WideGripBarbellBenchPress: Swift.UInt16
  public static let AlternatingDumbbellChestPress: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum DisplayPosition : Swift.UInt8 {
  case Degree
  case DegreeMinute
  case DegreeMinuteSecond
  case AustrianGrid
  case BritishGrid
  case DutchGrid
  case HungarianGrid
  case FinnishGrid
  case GermanGrid
  case IcelandicGrid
  case IndonesianEquatorial
  case IndonesianIrian
  case IndonesianSouthern
  case IndiaZone0
  case IndiaZoneIA
  case IndiaZoneIB
  case IndiaZoneIIA
  case IndiaZoneIIB
  case IndiaZoneIIIA
  case IndiaZoneIIIB
  case IndiaZoneIVA
  case IndiaZoneIVB
  case IrishTransverse
  case IrishGrid
  case Loran
  case MaidenheadGrid
  case MgrsGrid
  case NewZealandGrid
  case NewZealandTransverse
  case QatarGrid
  case ModifiedSwedishGrid
  case SwedishGrid
  case SouthAfricanGrid
  case SwissGrid
  case TaiwanGrid
  case UnitedStatesGrid
  case UtmUpsGrid
  case WestMalayan
  case BorneoRso
  case EstonianGrid
  case LatvianGrid
  case SwedishRef99Grid
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum FitEvent : Swift.UInt8 {
  case Timer
  case Workout
  case WorkoutStep
  case PowerDown
  case PowerUp
  case OffCourse
  case Session
  case Lap
  case CoursePoint
  case Battery
  case VirtualPartnerPace
  case HrHighAlert
  case HrLowAlert
  case SpeedHighAlert
  case SpeedLowAlert
  case CadHighAlert
  case CadLowAlert
  case PowerHighAlert
  case PowerLowAlert
  case RecoveryHr
  case BatteryLow
  case TimeDurationAlert
  case DistanceDurationAlert
  case CalorieDurationAlert
  case Activity
  case FitnessEquipment
  case Length
  case UserMarker
  case SportPoint
  case Calibration
  case FrontGearChange
  case RearGearChange
  case RiderPositionChange
  case ElevHighAlert
  case ElevLowAlert
  case CommTimeout
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct FitDateTime {
  public var fractionalTimeStamp: Swift.Float64 {
    get
  }
  public var timeStamp: Swift.UInt32 {
    get
  }
  public static var offset: Foundation.Date {
    get
  }
  public init(timeStamp: Swift.UInt32)
  public init(timeStamp: Swift.UInt32, fractionalTimeStamp: Swift.Float64)
  public init(date: Foundation.Date)
  public init(fitDateTime: GimKit.FitDateTime)
  public mutating func convertSystemTimeToUTC(systemTimeOffset: Swift.UInt32)
  public func getDate() -> Foundation.Date
}
public enum GimKitDeviceConnectionError : Swift.Int {
  case NORMAL
  case POWER_OFF
  case TIME_OUT
  case REQUEST_DISCONNECT_BLE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class ObdiiDataMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case TimeOffset
    case Pid
    case RawData
    case PidDataSize
    case SystemTime
    case StartTimestamp
    case StartTimestampMs
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getNumTimeOffset() -> Swift.Int
  public func getTimeOffset(_ index: Swift.Int) -> Swift.UInt16?
  public func setTimeOffset(_ index: Swift.Int, _ timeOffset: Swift.UInt16)
  public func getPid() -> Swift.UInt8?
  public func setPid(_ pid: Swift.UInt8)
  public func getNumRawData() -> Swift.Int
  public func getRawData(_ index: Swift.Int) -> Swift.UInt8?
  public func setRawData(_ index: Swift.Int, _ rawData: Swift.UInt8)
  public func getNumPidDataSize() -> Swift.Int
  public func getPidDataSize(_ index: Swift.Int) -> Swift.UInt8?
  public func setPidDataSize(_ index: Swift.Int, _ pidDataSize: Swift.UInt8)
  public func getNumSystemTime() -> Swift.Int
  public func getSystemTime(_ index: Swift.Int) -> Swift.UInt32?
  public func setSystemTime(_ index: Swift.Int, _ systemTime: Swift.UInt32)
  public func getStartTimestamp() -> GimKit.FitDateTime?
  public func setStartTimestamp(_ startTimestamp: GimKit.FitDateTime)
  public func getStartTimestampMs() -> Swift.UInt16?
  public func setStartTimestampMs(_ startTimestampMs: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum GimKitDiscoveryStatus : Swift.Int {
  case IN_PROGRESS
  case COMPLETED
  case ERROR_MISC
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct PushUpExerciseName {
  public static let ChestPressWithBand: Swift.UInt16
  public static let AlternatingStaggeredPushUp: Swift.UInt16
  public static let WeightedAlternatingStaggeredPushUp: Swift.UInt16
  public static let AlternatingHandsMedicineBallPushUp: Swift.UInt16
  public static let WeightedAlternatingHandsMedicineBallPushUp: Swift.UInt16
  public static let BosuBallPushUp: Swift.UInt16
  public static let WeightedBosuBallPushUp: Swift.UInt16
  public static let ClappingPushUp: Swift.UInt16
  public static let WeightedClappingPushUp: Swift.UInt16
  public static let CloseGripMedicineBallPushUp: Swift.UInt16
  public static let WeightedCloseGripMedicineBallPushUp: Swift.UInt16
  public static let CloseHandsPushUp: Swift.UInt16
  public static let WeightedCloseHandsPushUp: Swift.UInt16
  public static let DeclinePushUp: Swift.UInt16
  public static let WeightedDeclinePushUp: Swift.UInt16
  public static let DiamondPushUp: Swift.UInt16
  public static let WeightedDiamondPushUp: Swift.UInt16
  public static let ExplosiveCrossoverPushUp: Swift.UInt16
  public static let WeightedExplosiveCrossoverPushUp: Swift.UInt16
  public static let ExplosivePushUp: Swift.UInt16
  public static let WeightedExplosivePushUp: Swift.UInt16
  public static let FeetElevatedSideToSidePushUp: Swift.UInt16
  public static let WeightedFeetElevatedSideToSidePushUp: Swift.UInt16
  public static let HandReleasePushUp: Swift.UInt16
  public static let WeightedHandReleasePushUp: Swift.UInt16
  public static let HandstandPushUp: Swift.UInt16
  public static let WeightedHandstandPushUp: Swift.UInt16
  public static let InclinePushUp: Swift.UInt16
  public static let WeightedInclinePushUp: Swift.UInt16
  public static let IsometricExplosivePushUp: Swift.UInt16
  public static let WeightedIsometricExplosivePushUp: Swift.UInt16
  public static let JudoPushUp: Swift.UInt16
  public static let WeightedJudoPushUp: Swift.UInt16
  public static let KneelingPushUp: Swift.UInt16
  public static let WeightedKneelingPushUp: Swift.UInt16
  public static let MedicineBallChestPass: Swift.UInt16
  public static let MedicineBallPushUp: Swift.UInt16
  public static let WeightedMedicineBallPushUp: Swift.UInt16
  public static let OneArmPushUp: Swift.UInt16
  public static let WeightedOneArmPushUp: Swift.UInt16
  public static let WeightedPushUp: Swift.UInt16
  public static let PushUpAndRow: Swift.UInt16
  public static let WeightedPushUpAndRow: Swift.UInt16
  public static let PushUpPlus: Swift.UInt16
  public static let WeightedPushUpPlus: Swift.UInt16
  public static let PushUpWithFeetOnSwissBall: Swift.UInt16
  public static let WeightedPushUpWithFeetOnSwissBall: Swift.UInt16
  public static let PushUpWithOneHandOnMedicineBall: Swift.UInt16
  public static let WeightedPushUpWithOneHandOnMedicineBall: Swift.UInt16
  public static let ShoulderPushUp: Swift.UInt16
  public static let WeightedShoulderPushUp: Swift.UInt16
  public static let SingleArmMedicineBallPushUp: Swift.UInt16
  public static let WeightedSingleArmMedicineBallPushUp: Swift.UInt16
  public static let SpidermanPushUp: Swift.UInt16
  public static let WeightedSpidermanPushUp: Swift.UInt16
  public static let StackedFeetPushUp: Swift.UInt16
  public static let WeightedStackedFeetPushUp: Swift.UInt16
  public static let StaggeredHandsPushUp: Swift.UInt16
  public static let WeightedStaggeredHandsPushUp: Swift.UInt16
  public static let SuspendedPushUp: Swift.UInt16
  public static let WeightedSuspendedPushUp: Swift.UInt16
  public static let SwissBallPushUp: Swift.UInt16
  public static let WeightedSwissBallPushUp: Swift.UInt16
  public static let SwissBallPushUpPlus: Swift.UInt16
  public static let WeightedSwissBallPushUpPlus: Swift.UInt16
  public static let TPushUp: Swift.UInt16
  public static let WeightedTPushUp: Swift.UInt16
  public static let TripleStopPushUp: Swift.UInt16
  public static let WeightedTripleStopPushUp: Swift.UInt16
  public static let WideHandsPushUp: Swift.UInt16
  public static let WeightedWideHandsPushUp: Swift.UInt16
  public static let ParalletteHandstandPushUp: Swift.UInt16
  public static let WeightedParalletteHandstandPushUp: Swift.UInt16
  public static let RingHandstandPushUp: Swift.UInt16
  public static let WeightedRingHandstandPushUp: Swift.UInt16
  public static let RingPushUp: Swift.UInt16
  public static let WeightedRingPushUp: Swift.UInt16
  public static let PushUp: Swift.UInt16
  public static let PilatesPushup: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum SubSport : Swift.UInt8 {
  case Generic
  case Treadmill
  case Street
  case Trail
  case Track
  case Spin
  case IndoorCycling
  case Road
  case Mountain
  case Downhill
  case Recumbent
  case Cyclocross
  case HandCycling
  case TrackCycling
  case IndoorRowing
  case Elliptical
  case StairClimbing
  case LapSwimming
  case OpenWater
  case FlexibilityTraining
  case StrengthTraining
  case WarmUp
  case Match
  case Exercise
  case Challenge
  case IndoorSkiing
  case CardioTraining
  case IndoorWalking
  case EBikeFitness
  case Bmx
  case CasualWalking
  case SpeedWalking
  case BikeToRunTransition
  case RunToBikeTransition
  case SwimToBikeTransition
  case Atv
  case Motocross
  case Backcountry
  case Resort
  case RcDrone
  case Wingsuit
  case Whitewater
  case SkateSkiing
  case Yoga
  case Pilates
  case IndoorRunning
  case GravelCycling
  case EBikeMountain
  case Commuting
  case MixedSurface
  case Navigate
  case TrackMe
  case Map
  case SingleGasDiving
  case MultiGasDiving
  case GaugeDiving
  case ApneaDiving
  case ApneaHunting
  case VirtualActivity
  case Obstacle
  case All
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public typealias AudioPlayerMetadata = [AVFoundation.AVMetadataItem]
public protocol AudioPlayerDelegate : AnyObject {
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didChangeStateFrom from: GimKit.AudioPlayerState, to state: GimKit.AudioPlayerState)
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, shouldStartPlaying item: GimKit.AudioItem) -> Swift.Bool
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, willStartPlaying item: GimKit.AudioItem)
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didUpdateProgressionTo time: Foundation.TimeInterval, percentageRead: Swift.Float)
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didFindDuration duration: Foundation.TimeInterval, for item: GimKit.AudioItem)
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didUpdateEmptyMetadataOn item: GimKit.AudioItem, withData data: GimKit.AudioPlayerMetadata)
  func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didLoad range: GimKit.TimeRange, for item: GimKit.AudioItem)
}
extension AudioPlayerDelegate {
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didChangeStateFrom from: GimKit.AudioPlayerState, to state: GimKit.AudioPlayerState)
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, shouldStartPlaying item: GimKit.AudioItem) -> Swift.Bool
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, willStartPlaying item: GimKit.AudioItem)
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didUpdateProgressionTo time: Foundation.TimeInterval, percentageRead: Swift.Float)
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didFindDuration duration: Foundation.TimeInterval, for item: GimKit.AudioItem)
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didUpdateEmptyMetadataOn item: GimKit.AudioItem, withData data: GimKit.AudioPlayerMetadata)
  public func audioPlayer(_ audioPlayer: GimKit.AudioPlayer, didLoad range: GimKit.TimeRange, for item: GimKit.AudioItem)
}
public enum Switch : Swift.UInt8 {
  case Off
  case On
  case Auto
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum AttitudeStage : Swift.UInt8 {
  case Failed
  case Aligning
  case Degraded
  case Valid
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension HandyJSON {
  public static func deserialize(from dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> Self?
}
extension Array where Element : GimKit.HandyJSON {
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> [Element?]?
  public static func deserialize(from array: Foundation.NSArray?) -> [Element?]?
  public static func deserialize(from array: [Any]?) -> [Element?]?
}
@_hasMissingDesignatedInitializers public class JSONDeserializer<T> where T : GimKit.HandyJSON {
  public static func deserializeFrom(dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> T?
  public static func update(object: inout T, from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil)
  public static func update(object: inout T, from json: Swift.String?, designatedPath: Swift.String? = nil)
  public static func deserializeModelArrayFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> [T?]?
  public static func deserializeModelArrayFrom(array: Foundation.NSArray?) -> [T?]?
  public static func deserializeModelArrayFrom(array: [Any]?) -> [T?]?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GimKitManager : ObjectiveC.NSObject {
  public static let shared: GimKit.GimKitManager
  public var isBluetoothAvailable: Swift.Bool {
    get
  }
  public var isConnecting: Swift.Bool {
    get
  }
  public var isScanning: Swift.Bool {
    get
  }
  public var defaultWarningOptions: GimKit.WarningOptions {
    get
  }
  public func startDiscovery(_ duration: Foundation.TimeInterval = 10, _ types: [GimKit.GimKitDeviceType], listener: GimKit.GimKitDiscoveryListener)
  public func stopDiscovery()
  public func register(device: GimKit.GimKitDevice, observer: GimKit.GimKitDeviceObserver)
  public func unregister(device: GimKit.GimKitDevice, observer: GimKit.GimKitDeviceObserver)
  public func connect(_ device: GimKit.GimKitDevice, _ deviceType: GimKit.GimKitDeviceType = .EXERCISE_BIKE)
  public func getPersistentId() -> Swift.String?
  public func connect(pid: Swift.String, listener: GimKit.GimKitDiscoveryListener) -> GimKit.GimKitDevice?
  public func disconnect(_ device: GimKit.GimKitDevice)
  public func setTorque(_ device: GimKit.GimKitDevice, _ torque: Swift.Double)
  public func isConnected(_ device: GimKit.GimKitDevice) -> Swift.Bool
  public func getDeviceID(_ device: GimKit.GimKitDevice)
  public func switchServiceMode(_ device: GimKit.GimKitDevice)
  public func setConsoleStatus(device: GimKit.GimKitDevice, state: Swift.UInt16)
  public func setKnobDisplayMode(device: GimKit.GimKitDevice, mode: Swift.UInt8)
  public func setKnobControl(device: GimKit.GimKitDevice, mode: Swift.Bool)
  public func setErgMode(device: GimKit.GimKitDevice, mode: Swift.Bool)
  public func setGear(device: GimKit.GimKitDevice, gear: Swift.Int8)
  public func getDeviceModel(_ device: GimKit.GimKitDevice)
  public func parseFitData(_ fitPath: Swift.String) -> Swift.Dictionary<Swift.String, [Any]>?
  public func clearCache() -> Swift.Bool
  @objc deinit
}
public struct LegRaiseExerciseName {
  public static let HangingKneeRaise: Swift.UInt16
  public static let HangingLegRaise: Swift.UInt16
  public static let WeightedHangingLegRaise: Swift.UInt16
  public static let HangingSingleLegRaise: Swift.UInt16
  public static let WeightedHangingSingleLegRaise: Swift.UInt16
  public static let KettlebellLegRaises: Swift.UInt16
  public static let LegLoweringDrill: Swift.UInt16
  public static let WeightedLegLoweringDrill: Swift.UInt16
  public static let LyingStraightLegRaise: Swift.UInt16
  public static let WeightedLyingStraightLegRaise: Swift.UInt16
  public static let MedicineBallLegDrops: Swift.UInt16
  public static let QuadrupedLegRaise: Swift.UInt16
  public static let WeightedQuadrupedLegRaise: Swift.UInt16
  public static let ReverseLegRaise: Swift.UInt16
  public static let WeightedReverseLegRaise: Swift.UInt16
  public static let ReverseLegRaiseOnSwissBall: Swift.UInt16
  public static let WeightedReverseLegRaiseOnSwissBall: Swift.UInt16
  public static let SingleLegLoweringDrill: Swift.UInt16
  public static let WeightedSingleLegLoweringDrill: Swift.UInt16
  public static let WeightedHangingKneeRaise: Swift.UInt16
  public static let LateralStepover: Swift.UInt16
  public static let WeightedLateralStepover: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class DiveSettingsMesg : GimKit.Mesg {
  public enum HeartRateSourceSubfield : Swift.UInt16 {
    case HeartRateAntplusDeviceType
    case HeartRateLocalDeviceType
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Name
    case Model
    case GfLow
    case GfHigh
    case WaterType
    case WaterDensity
    case Po2Warn
    case Po2Critical
    case Po2Deco
    case SafetyStopEnabled
    case BottomDepth
    case BottomTime
    case ApneaCountdownEnabled
    case ApneaCountdownTime
    case BacklightMode
    case BacklightBrightness
    case BacklightTimeout
    case RepeatDiveInterval
    case SafetyStopTime
    case HeartRateSourceType
    case HeartRateSource
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getModel() -> GimKit.TissueModelType?
  public func setModel(_ model: GimKit.TissueModelType)
  public func getGfLow() -> Swift.UInt8?
  public func setGfLow(_ gfLow: Swift.UInt8)
  public func getGfHigh() -> Swift.UInt8?
  public func setGfHigh(_ gfHigh: Swift.UInt8)
  public func getWaterType() -> GimKit.WaterType?
  public func setWaterType(_ waterType: GimKit.WaterType)
  public func getWaterDensity() -> Swift.Float32?
  public func setWaterDensity(_ waterDensity: Swift.Float32)
  public func getPo2Warn() -> Swift.Float32?
  public func setPo2Warn(_ po2Warn: Swift.Float32)
  public func getPo2Critical() -> Swift.Float32?
  public func setPo2Critical(_ po2Critical: Swift.Float32)
  public func getPo2Deco() -> Swift.Float32?
  public func setPo2Deco(_ po2Deco: Swift.Float32)
  public func getSafetyStopEnabled() -> GimKit.FitBool?
  public func setSafetyStopEnabled(_ safetyStopEnabled: GimKit.FitBool)
  public func getBottomDepth() -> Swift.Float32?
  public func setBottomDepth(_ bottomDepth: Swift.Float32)
  public func getBottomTime() -> Swift.UInt32?
  public func setBottomTime(_ bottomTime: Swift.UInt32)
  public func getApneaCountdownEnabled() -> GimKit.FitBool?
  public func setApneaCountdownEnabled(_ apneaCountdownEnabled: GimKit.FitBool)
  public func getApneaCountdownTime() -> Swift.UInt32?
  public func setApneaCountdownTime(_ apneaCountdownTime: Swift.UInt32)
  public func getBacklightMode() -> GimKit.DiveBacklightMode?
  public func setBacklightMode(_ backlightMode: GimKit.DiveBacklightMode)
  public func getBacklightBrightness() -> Swift.UInt8?
  public func setBacklightBrightness(_ backlightBrightness: Swift.UInt8)
  public func getBacklightTimeout() -> Swift.UInt8?
  public func setBacklightTimeout(_ backlightTimeout: Swift.UInt8)
  public func getRepeatDiveInterval() -> Swift.UInt16?
  public func setRepeatDiveInterval(_ repeatDiveInterval: Swift.UInt16)
  public func getSafetyStopTime() -> Swift.UInt16?
  public func setSafetyStopTime(_ safetyStopTime: Swift.UInt16)
  public func getHeartRateSourceType() -> GimKit.SourceType?
  public func setHeartRateSourceType(_ heartRateSourceType: GimKit.SourceType)
  public func getHeartRateSource() -> Swift.UInt8?
  public func setHeartRateSource(_ heartRateSource: Swift.UInt8)
  public func getHeartRateAntplusDeviceType() -> Swift.UInt8?
  public func setHeartRateAntplusDeviceType(_ heartRateAntplusDeviceType: Swift.UInt8)
  public func getHeartRateLocalDeviceType() -> Swift.UInt8?
  public func setHeartRateLocalDeviceType(_ heartRateLocalDeviceType: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct TotalBodyExerciseName {
  public static let Burpee: Swift.UInt16
  public static let WeightedBurpee: Swift.UInt16
  public static let BurpeeBoxJump: Swift.UInt16
  public static let WeightedBurpeeBoxJump: Swift.UInt16
  public static let HighPullBurpee: Swift.UInt16
  public static let ManMakers: Swift.UInt16
  public static let OneArmBurpee: Swift.UInt16
  public static let SquatThrusts: Swift.UInt16
  public static let WeightedSquatThrusts: Swift.UInt16
  public static let SquatPlankPushUp: Swift.UInt16
  public static let WeightedSquatPlankPushUp: Swift.UInt16
  public static let StandingTRotationBalance: Swift.UInt16
  public static let WeightedStandingTRotationBalance: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct TricepsExtensionExerciseName {
  public static let BenchDip: Swift.UInt16
  public static let WeightedBenchDip: Swift.UInt16
  public static let BodyWeightDip: Swift.UInt16
  public static let CableKickback: Swift.UInt16
  public static let CableLyingTricepsExtension: Swift.UInt16
  public static let CableOverheadTricepsExtension: Swift.UInt16
  public static let DumbbellKickback: Swift.UInt16
  public static let DumbbellLyingTricepsExtension: Swift.UInt16
  public static let EzBarOverheadTricepsExtension: Swift.UInt16
  public static let InclineDip: Swift.UInt16
  public static let WeightedInclineDip: Swift.UInt16
  public static let InclineEzBarLyingTricepsExtension: Swift.UInt16
  public static let LyingDumbbellPulloverToExtension: Swift.UInt16
  public static let LyingEzBarTricepsExtension: Swift.UInt16
  public static let LyingTricepsExtensionToCloseGripBenchPress: Swift.UInt16
  public static let OverheadDumbbellTricepsExtension: Swift.UInt16
  public static let RecliningTricepsPress: Swift.UInt16
  public static let ReverseGripPressdown: Swift.UInt16
  public static let ReverseGripTricepsPressdown: Swift.UInt16
  public static let RopePressdown: Swift.UInt16
  public static let SeatedBarbellOverheadTricepsExtension: Swift.UInt16
  public static let SeatedDumbbellOverheadTricepsExtension: Swift.UInt16
  public static let SeatedEzBarOverheadTricepsExtension: Swift.UInt16
  public static let SeatedSingleArmOverheadDumbbellExtension: Swift.UInt16
  public static let SingleArmDumbbellOverheadTricepsExtension: Swift.UInt16
  public static let SingleDumbbellSeatedOverheadTricepsExtension: Swift.UInt16
  public static let SingleLegBenchDipAndKick: Swift.UInt16
  public static let WeightedSingleLegBenchDipAndKick: Swift.UInt16
  public static let SingleLegDip: Swift.UInt16
  public static let WeightedSingleLegDip: Swift.UInt16
  public static let StaticLyingTricepsExtension: Swift.UInt16
  public static let SuspendedDip: Swift.UInt16
  public static let WeightedSuspendedDip: Swift.UInt16
  public static let SwissBallDumbbellLyingTricepsExtension: Swift.UInt16
  public static let SwissBallEzBarLyingTricepsExtension: Swift.UInt16
  public static let SwissBallEzBarOverheadTricepsExtension: Swift.UInt16
  public static let TabletopDip: Swift.UInt16
  public static let WeightedTabletopDip: Swift.UInt16
  public static let TricepsExtensionOnFloor: Swift.UInt16
  public static let TricepsPressdown: Swift.UInt16
  public static let WeightedDip: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct ShoulderPressExerciseName {
  public static let AlternatingDumbbellShoulderPress: Swift.UInt16
  public static let ArnoldPress: Swift.UInt16
  public static let BarbellFrontSquatToPushPress: Swift.UInt16
  public static let BarbellPushPress: Swift.UInt16
  public static let BarbellShoulderPress: Swift.UInt16
  public static let DeadCurlPress: Swift.UInt16
  public static let DumbbellAlternatingShoulderPressAndTwist: Swift.UInt16
  public static let DumbbellHammerCurlToLungeToPress: Swift.UInt16
  public static let DumbbellPushPress: Swift.UInt16
  public static let FloorInvertedShoulderPress: Swift.UInt16
  public static let WeightedFloorInvertedShoulderPress: Swift.UInt16
  public static let InvertedShoulderPress: Swift.UInt16
  public static let WeightedInvertedShoulderPress: Swift.UInt16
  public static let OneArmPushPress: Swift.UInt16
  public static let OverheadBarbellPress: Swift.UInt16
  public static let OverheadDumbbellPress: Swift.UInt16
  public static let SeatedBarbellShoulderPress: Swift.UInt16
  public static let SeatedDumbbellShoulderPress: Swift.UInt16
  public static let SingleArmDumbbellShoulderPress: Swift.UInt16
  public static let SingleArmStepUpAndPress: Swift.UInt16
  public static let SmithMachineOverheadPress: Swift.UInt16
  public static let SplitStanceHammerCurlToPress: Swift.UInt16
  public static let SwissBallDumbbellShoulderPress: Swift.UInt16
  public static let WeightPlateFrontRaise: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum Side : Swift.UInt8 {
  case Right
  case Left
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BpStatus : Swift.UInt8 {
  case NoError
  case ErrorIncompleteData
  case ErrorNoMeasurement
  case ErrorDataOutOfRange
  case ErrorIrregularHeartRate
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct LanguageBits2 {
  public static let Slovenian: Swift.UInt8
  public static let Swedish: Swift.UInt8
  public static let Russian: Swift.UInt8
  public static let Turkish: Swift.UInt8
  public static let Latvian: Swift.UInt8
  public static let Ukrainian: Swift.UInt8
  public static let Arabic: Swift.UInt8
  public static let Farsi: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public class WeatherAlertMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case ReportId
    case IssueTime
    case ExpireTime
    case Severity
    case `Type`
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getReportId() -> [Swift.UInt8]?
  public func getReportIdAsString() -> Swift.String?
  public func setReportId(_ reportId: Swift.String)
  public func setReportId(_ reportId: [Swift.UInt8])
  public func getIssueTime() -> GimKit.FitDateTime?
  public func setIssueTime(_ issueTime: GimKit.FitDateTime)
  public func getExpireTime() -> GimKit.FitDateTime?
  public func setExpireTime(_ expireTime: GimKit.FitDateTime)
  public func getSeverity() -> GimKit.WeatherSeverity?
  public func setSeverity(_ severity: GimKit.WeatherSeverity)
  public func getType() -> GimKit.WeatherSevereType?
  public func setType(_ type: GimKit.WeatherSevereType)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct SportBits1 {
  public static let Tennis: Swift.UInt8
  public static let AmericanFootball: Swift.UInt8
  public static let Training: Swift.UInt8
  public static let Walking: Swift.UInt8
  public static let CrossCountrySkiing: Swift.UInt8
  public static let AlpineSkiing: Swift.UInt8
  public static let Snowboarding: Swift.UInt8
  public static let Rowing: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public class CameraEventMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case TimestampMs
    case CameraEventType
    case CameraFileUuid
    case CameraOrientation
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getTimestampMs() -> Swift.UInt16?
  public func setTimestampMs(_ timestampMs: Swift.UInt16)
  public func getCameraEventType() -> GimKit.CameraEventType?
  public func setCameraEventType(_ cameraEventType: GimKit.CameraEventType)
  public func getCameraFileUuid() -> [Swift.UInt8]?
  public func getCameraFileUuidAsString() -> Swift.String?
  public func setCameraFileUuid(_ cameraFileUuid: Swift.String)
  public func setCameraFileUuid(_ cameraFileUuid: [Swift.UInt8])
  public func getCameraOrientation() -> GimKit.CameraOrientationType?
  public func setCameraOrientation(_ cameraOrientation: GimKit.CameraOrientationType)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum WktStepTarget : Swift.UInt8 {
  case Speed
  case HeartRate
  case Open
  case Cadence
  case Power
  case Grade
  case Resistance
  case Power3s
  case Power10s
  case Power30s
  case PowerLap
  case SwimStroke
  case SpeedLap
  case HeartRateLap
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum AutoSyncFrequency : Swift.UInt8 {
  case Never
  case Occasionally
  case Frequent
  case OnceADay
  case Remote
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct BikeLightBeamAngleMode {
  public static let Manual: Swift.UInt8
  public static let Auto: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
@_hasMissingDesignatedInitializers public class MesgDefinition {
  public var globalMesgNum: Swift.UInt16
  public var localMesgNum: Swift.UInt8 {
    get
    set
  }
  public var numDevFields: Swift.UInt8 {
    get
  }
  public var numFields: Swift.UInt8
  public var isBigEndian: Swift.Bool {
    get
  }
  convenience public init(fitSource: GimKit.PositionableData)
  convenience public init(mesg: GimKit.Mesg)
  convenience public init(mesgDef: GimKit.MesgDefinition)
  public func write(fitDest: GimKit.PositionableData)
  public func getMesgSize() -> Swift.Int
  public func addField(field: GimKit.FieldDefinition)
  public func clearFields()
  public func getNumFields() -> Swift.Int
  public func getFields() -> Swift.Array<GimKit.FieldDefinition>
  public func getField(num: Swift.UInt8) -> GimKit.FieldDefinition?
  public func supports(mesg: GimKit.Mesg) -> Swift.Bool
  public func supports(mesgDef: GimKit.MesgDefinition?) -> Swift.Bool
  @objc deinit
}
public enum TissueModelType : Swift.UInt8 {
  case Zhl16c
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class VideoDescriptionMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case MessageCount
    case Text
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getMessageCount() -> Swift.UInt16?
  public func setMessageCount(_ messageCount: Swift.UInt16)
  public func getText() -> [Swift.UInt8]?
  public func getTextAsString() -> Swift.String?
  public func setText(_ text: Swift.String)
  public func setText(_ text: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol FieldBase {
  var values: Swift.Array<Any> { get set }
  var name: Swift.String? { get }
  var type: Swift.UInt8 { get }
  var scale: Swift.Float64 { get }
  var offset: Swift.Float64 { get }
  var units: Swift.String? { get }
  func getSubfield(subfieldName: Swift.String) -> GimKit.Subfield?
  func getSubfield(subfieldIndex: Swift.UInt16) -> GimKit.Subfield?
  init()
}
extension FieldBase {
  public func getName() -> Swift.String?
  public func getName(subfieldIndex: Swift.UInt16) -> Swift.String?
  public func getName(subFieldName: Swift.String) -> Swift.String?
  public func getType() -> Swift.UInt8
  public func getType(subfieldIndex: Swift.UInt16) -> Swift.UInt8
  public func getType(subFieldName: Swift.String) -> Swift.UInt8
  public func getUnits() -> Swift.String?
  public func getUnits(subfieldIndex: Swift.UInt16) -> Swift.String?
  public func getUnits(subFieldName: Swift.String) -> Swift.String?
  public func getSize() -> Swift.UInt8
  public mutating func addValue(value: Any)
  public func getNumValues() -> Swift.Int
  public func getBitsValue(offset: Swift.Int, bits: Swift.Int, componentType: Swift.UInt8) -> Swift.Int64?
  public func getValue() -> Any?
  public func getValue(index: Swift.Int) -> Any?
  public func getValue(index: Swift.Int, subfieldIndex: Swift.UInt16) -> Any?
  public func getValue(index: Swift.Int, subfieldName: Swift.String) -> Any?
  public func getValue(index: Swift.Int, subfield: GimKit.Subfield?) -> Any?
  public mutating func setValue(value: Any)
  public mutating func setValue(value: Any, subfieldIndex: Swift.UInt16)
  public mutating func setValue(value: Any, subfieldName: Swift.String)
  public mutating func setValue(index: Swift.Int, value: Any)
  public mutating func setValue(index: Swift.Int, value: Any, subfieldIndex: Swift.UInt16)
  public mutating func setValue(index: Swift.Int, value: Any, subfieldName: Swift.String)
  public mutating func setValue(index: Swift.Int, value: Any, subfield: GimKit.Subfield?)
  public mutating func setRawValue(index: Swift.Int, value: Any)
  public func getRawValue(index: Swift.Int) -> Any?
  public func isNumeric() -> Swift.Bool
}
public class LapMesg : GimKit.Mesg {
  public enum TotalCyclesSubfield : Swift.UInt16 {
    case TotalStrides
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum AvgCadenceSubfield : Swift.UInt16 {
    case AvgRunningCadence
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum MaxCadenceSubfield : Swift.UInt16 {
    case MaxRunningCadence
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Timestamp
    case Event
    case EventType
    case StartTime
    case StartPositionLat
    case StartPositionLong
    case EndPositionLat
    case EndPositionLong
    case TotalElapsedTime
    case TotalTimerTime
    case TotalDistance
    case TotalCycles
    case TotalCalories
    case TotalFatCalories
    case AvgSpeed
    case MaxSpeed
    case AvgHeartRate
    case MaxHeartRate
    case AvgCadence
    case MaxCadence
    case AvgPower
    case MaxPower
    case TotalAscent
    case TotalDescent
    case Intensity
    case LapTrigger
    case Sport
    case EventGroup
    case NumLengths
    case NormalizedPower
    case LeftRightBalance
    case FirstLengthIndex
    case AvgStrokeDistance
    case SwimStroke
    case SubSport
    case NumActiveLengths
    case TotalWork
    case AvgAltitude
    case MaxAltitude
    case GpsAccuracy
    case AvgGrade
    case AvgPosGrade
    case AvgNegGrade
    case MaxPosGrade
    case MaxNegGrade
    case AvgTemperature
    case MaxTemperature
    case TotalMovingTime
    case AvgPosVerticalSpeed
    case AvgNegVerticalSpeed
    case MaxPosVerticalSpeed
    case MaxNegVerticalSpeed
    case TimeInHrZone
    case TimeInSpeedZone
    case TimeInCadenceZone
    case TimeInPowerZone
    case RepetitionNum
    case MinAltitude
    case MinHeartRate
    case WktStepIndex
    case OpponentScore
    case StrokeCount
    case ZoneCount
    case AvgVerticalOscillation
    case AvgStanceTimePercent
    case AvgStanceTime
    case AvgFractionalCadence
    case MaxFractionalCadence
    case TotalFractionalCycles
    case PlayerScore
    case AvgTotalHemoglobinConc
    case MinTotalHemoglobinConc
    case MaxTotalHemoglobinConc
    case AvgSaturatedHemoglobinPercent
    case MinSaturatedHemoglobinPercent
    case MaxSaturatedHemoglobinPercent
    case AvgLeftTorqueEffectiveness
    case AvgRightTorqueEffectiveness
    case AvgLeftPedalSmoothness
    case AvgRightPedalSmoothness
    case AvgCombinedPedalSmoothness
    case TimeStanding
    case StandCount
    case AvgLeftPco
    case AvgRightPco
    case AvgLeftPowerPhase
    case AvgLeftPowerPhasePeak
    case AvgRightPowerPhase
    case AvgRightPowerPhasePeak
    case AvgPowerPosition
    case MaxPowerPosition
    case AvgCadencePosition
    case MaxCadencePosition
    case EnhancedAvgSpeed
    case EnhancedMaxSpeed
    case EnhancedAvgAltitude
    case EnhancedMinAltitude
    case EnhancedMaxAltitude
    case AvgLevMotorPower
    case MaxLevMotorPower
    case LevBatteryConsumption
    case AvgVerticalRatio
    case AvgStanceTimeBalance
    case AvgStepLength
    case AvgVam
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEvent() -> GimKit.FitEvent?
  public func setEvent(_ event: GimKit.FitEvent)
  public func getEventType() -> GimKit.EventType?
  public func setEventType(_ eventType: GimKit.EventType)
  public func getStartTime() -> GimKit.FitDateTime?
  public func setStartTime(_ startTime: GimKit.FitDateTime)
  public func getStartPositionLat() -> Swift.Int32?
  public func setStartPositionLat(_ startPositionLat: Swift.Int32)
  public func getStartPositionLong() -> Swift.Int32?
  public func setStartPositionLong(_ startPositionLong: Swift.Int32)
  public func getEndPositionLat() -> Swift.Int32?
  public func setEndPositionLat(_ endPositionLat: Swift.Int32)
  public func getEndPositionLong() -> Swift.Int32?
  public func setEndPositionLong(_ endPositionLong: Swift.Int32)
  public func getTotalElapsedTime() -> Swift.Float32?
  public func setTotalElapsedTime(_ totalElapsedTime: Swift.Float32)
  public func getTotalTimerTime() -> Swift.Float32?
  public func setTotalTimerTime(_ totalTimerTime: Swift.Float32)
  public func getTotalDistance() -> Swift.Float32?
  public func setTotalDistance(_ totalDistance: Swift.Float32)
  public func getTotalCycles() -> Swift.UInt32?
  public func setTotalCycles(_ totalCycles: Swift.UInt32)
  public func getTotalCalories() -> Swift.UInt16?
  public func setTotalCalories(_ totalCalories: Swift.UInt16)
  public func getTotalFatCalories() -> Swift.UInt16?
  public func setTotalFatCalories(_ totalFatCalories: Swift.UInt16)
  public func getAvgSpeed() -> Swift.Float32?
  public func setAvgSpeed(_ avgSpeed: Swift.Float32)
  public func getMaxSpeed() -> Swift.Float32?
  public func setMaxSpeed(_ maxSpeed: Swift.Float32)
  public func getAvgHeartRate() -> Swift.UInt8?
  public func setAvgHeartRate(_ avgHeartRate: Swift.UInt8)
  public func getMaxHeartRate() -> Swift.UInt8?
  public func setMaxHeartRate(_ maxHeartRate: Swift.UInt8)
  public func getAvgCadence() -> Swift.UInt8?
  public func setAvgCadence(_ avgCadence: Swift.UInt8)
  public func getAvgRunningCadence() -> Swift.UInt8?
  public func setAvgRunningCadence(_ avgRunningCadence: Swift.UInt8)
  public func getMaxCadence() -> Swift.UInt8?
  public func setMaxCadence(_ maxCadence: Swift.UInt8)
  public func getMaxRunningCadence() -> Swift.UInt8?
  public func setMaxRunningCadence(_ maxCadence: Swift.UInt8)
  public func getAvgPower() -> Swift.UInt16?
  public func setAvgPower(_ avgPower: Swift.UInt16)
  public func getMaxPower() -> Swift.UInt16?
  public func setMaxPower(_ maxPower: Swift.UInt16)
  public func getTotalAscent() -> Swift.UInt16?
  public func setTotalAscent(_ totalAscent: Swift.UInt16)
  public func getTotalDescent() -> Swift.UInt16?
  public func setTotalDescent(_ totalDescent: Swift.UInt16)
  public func getIntensity() -> GimKit.Intensity?
  public func setIntensity(_ intensity: GimKit.Intensity)
  public func getLapTrigger() -> GimKit.LapTrigger?
  public func setLapTrigger(_ lapTrigger: GimKit.LapTrigger)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getEventGroup() -> Swift.UInt8?
  public func setEventGroup(_ eventGroup: Swift.UInt8)
  public func getNumLengths() -> Swift.UInt16?
  public func setNumLengths(_ numLengths: Swift.UInt16)
  public func getNormalizedPower() -> Swift.UInt16?
  public func setNormalizedPower(_ normalizedPower: Swift.UInt16)
  public func getLeftRightBalance() -> Swift.UInt16?
  public func setLeftRightBalance(_ leftRightBalance: Swift.UInt16)
  public func getFirstLengthIndex() -> Swift.UInt16?
  public func setFirstLengthIndex(_ firstLengthIndex: Swift.UInt16)
  public func getAvgStrokeDistance() -> Swift.Float32?
  public func setAvgStrokeDistance(_ avgStrokeDistance: Swift.Float32)
  public func getSwimStroke() -> GimKit.SwimStroke?
  public func setSwimStroke(_ swimStroke: GimKit.SwimStroke)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getNumActiveLengths() -> Swift.UInt16?
  public func setNumActiveLengths(_ numActiveLengths: Swift.UInt16)
  public func getTotalWork() -> Swift.UInt32?
  public func setTotalWork(_ totalWork: Swift.UInt32)
  public func getAvgAltitude() -> Swift.Float32?
  public func setAvgAltitude(_ avgAltitude: Swift.Float32)
  public func getMaxAltitude() -> Swift.Float32?
  public func setMaxAltitude(_ maxAltitude: Swift.Float32)
  public func getGpsAccuracy() -> Swift.UInt8?
  public func setGpsAccuracy(_ gpsAccuracy: Swift.UInt8)
  public func getAvgGrade() -> Swift.Float32?
  public func setAvgGrade(_ avgGrade: Swift.Float32)
  public func getAvgPosGrade() -> Swift.Float32?
  public func setAvgPosGrade(_ avgPosGrade: Swift.Float32)
  public func getAvgNegGrade() -> Swift.Float32?
  public func setAvgNegGrade(_ avgNegGrade: Swift.Float32)
  public func getMaxPosGrade() -> Swift.Float32?
  public func setMaxPosGrade(_ maxPosGrade: Swift.Float32)
  public func getMaxNegGrade() -> Swift.Float32?
  public func setMaxNegGrade(_ maxNegGrade: Swift.Float32)
  public func getAvgTemperature() -> Swift.Int8?
  public func setAvgTemperature(_ avgTemperature: Swift.Int8)
  public func getMaxTemperature() -> Swift.Int8?
  public func setMaxTemperature(_ maxTemperature: Swift.Int8)
  public func getTotalMovingTime() -> Swift.Float32?
  public func setTotalMovingTime(_ totalMovingTime: Swift.Float32)
  public func getAvgPosVerticalSpeed() -> Swift.Float32?
  public func setAvgPosVerticalSpeed(_ avgPosVerticalSpeed: Swift.Float32)
  public func getAvgNegVerticalSpeed() -> Swift.Float32?
  public func setAvgNegVerticalSpeed(_ avgNegVerticalSpeed: Swift.Float32)
  public func getMaxPosVerticalSpeed() -> Swift.Float32?
  public func setMaxPosVerticalSpeed(_ maxPosVerticalSpeed: Swift.Float32)
  public func getMaxNegVerticalSpeed() -> Swift.Float32?
  public func setMaxNegVerticalSpeed(_ maxNegVerticalSpeed: Swift.Float32)
  public func getNumTimeInHrZone() -> Swift.Int
  public func getTimeInHrZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInHrZone(_ index: Swift.Int, _ timeInHrZone: Swift.Float32)
  public func getNumTimeInSpeedZone() -> Swift.Int
  public func getTimeInSpeedZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInSpeedZone(_ index: Swift.Int, _ timeInSpeedZone: Swift.Float32)
  public func getNumTimeInCadenceZone() -> Swift.Int
  public func getTimeInCadenceZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInCadenceZone(_ index: Swift.Int, _ timeInCadenceZone: Swift.Float32)
  public func getNumTimeInPowerZone() -> Swift.Int
  public func getTimeInPowerZone(_ index: Swift.Int) -> Swift.Float32?
  public func setTimeInPowerZone(_ index: Swift.Int, _ timeInPowerZone: Swift.Float32)
  public func getRepetitionNum() -> Swift.UInt16?
  public func setRepetitionNum(_ repetitionNum: Swift.UInt16)
  public func getMinAltitude() -> Swift.Float32?
  public func setMinAltitude(_ minAltitude: Swift.Float32)
  public func getMinHeartRate() -> Swift.UInt8?
  public func setMinHeartRate(_ minHeartRate: Swift.UInt8)
  public func getWktStepIndex() -> Swift.UInt16?
  public func setWktStepIndex(_ wktStepIndex: Swift.UInt16)
  public func getOpponentScore() -> Swift.UInt16?
  public func setOpponentScore(_ opponentScore: Swift.UInt16)
  public func getNumStrokeCount() -> Swift.Int
  public func getStrokeCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setStrokeCount(_ index: Swift.Int, _ strokeCount: Swift.UInt16)
  public func getNumZoneCount() -> Swift.Int
  public func getZoneCount(_ index: Swift.Int) -> Swift.UInt16?
  public func setZoneCount(_ index: Swift.Int, _ zoneCount: Swift.UInt16)
  public func getAvgVerticalOscillation() -> Swift.Float32?
  public func setAvgVerticalOscillation(_ avgVerticalOscillation: Swift.Float32)
  public func getAvgStanceTimePercent() -> Swift.Float32?
  public func setAvgStanceTimePercent(_ avgStanceTimePercent: Swift.Float32)
  public func getAvgStanceTime() -> Swift.Float32?
  public func setAvgStanceTime(_ avgStanceTime: Swift.Float32)
  public func getAvgFractionalCadence() -> Swift.Float32?
  public func setAvgFractionalCadence(_ avgFractionalCadence: Swift.Float32)
  public func getMaxFractionalCadence() -> Swift.Float32?
  public func setMaxFractionalCadence(_ maxFractionalCadence: Swift.Float32)
  public func getTotalFractionalCycles() -> Swift.Float32?
  public func setTotalFractionalCycles(_ totalFractionalCycles: Swift.Float32)
  public func getPlayerScore() -> Swift.UInt16?
  public func setPlayerScore(_ playerScore: Swift.UInt16)
  public func getNumAvgTotalHemoglobinConc() -> Swift.Int
  public func getAvgTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgTotalHemoglobinConc(_ index: Swift.Int, _ avgTotalHemoglobinConc: Swift.Float32)
  public func getNumMinTotalHemoglobinConc() -> Swift.Int
  public func getMinTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setMinTotalHemoglobinConc(_ index: Swift.Int, _ minTotalHemoglobinConc: Swift.Float32)
  public func getNumMaxTotalHemoglobinConc() -> Swift.Int
  public func getMaxTotalHemoglobinConc(_ index: Swift.Int) -> Swift.Float32?
  public func setMaxTotalHemoglobinConc(_ index: Swift.Int, _ maxTotalHemoglobinConc: Swift.Float32)
  public func getNumAvgSaturatedHemoglobinPercent() -> Swift.Int
  public func getAvgSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgSaturatedHemoglobinPercent(_ index: Swift.Int, _ avgSaturatedHemoglobinPercent: Swift.Float32)
  public func getNumMinSaturatedHemoglobinPercent() -> Swift.Int
  public func getMinSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setMinSaturatedHemoglobinPercent(_ index: Swift.Int, _ minSaturatedHemoglobinPercent: Swift.Float32)
  public func getNumMaxSaturatedHemoglobinPercent() -> Swift.Int
  public func getMaxSaturatedHemoglobinPercent(_ index: Swift.Int) -> Swift.Float32?
  public func setMaxSaturatedHemoglobinPercent(_ index: Swift.Int, _ maxSaturatedHemoglobinPercent: Swift.Float32)
  public func getAvgLeftTorqueEffectiveness() -> Swift.Float32?
  public func setAvgLeftTorqueEffectiveness(_ avgLeftTorqueEffectiveness: Swift.Float32)
  public func getAvgRightTorqueEffectiveness() -> Swift.Float32?
  public func setAvgRightTorqueEffectiveness(_ avgRightTorqueEffectiveness: Swift.Float32)
  public func getAvgLeftPedalSmoothness() -> Swift.Float32?
  public func setAvgLeftPedalSmoothness(_ avgLeftPedalSmoothness: Swift.Float32)
  public func getAvgRightPedalSmoothness() -> Swift.Float32?
  public func setAvgRightPedalSmoothness(_ avgRightPedalSmoothness: Swift.Float32)
  public func getAvgCombinedPedalSmoothness() -> Swift.Float32?
  public func setAvgCombinedPedalSmoothness(_ avgCombinedPedalSmoothness: Swift.Float32)
  public func getTimeStanding() -> Swift.Float32?
  public func setTimeStanding(_ timeStanding: Swift.Float32)
  public func getStandCount() -> Swift.UInt16?
  public func setStandCount(_ standCount: Swift.UInt16)
  public func getAvgLeftPco() -> Swift.Int8?
  public func setAvgLeftPco(_ avgLeftPco: Swift.Int8)
  public func getAvgRightPco() -> Swift.Int8?
  public func setAvgRightPco(_ avgRightPco: Swift.Int8)
  public func getAvgLeftPowerPhase() -> Swift.Float32?
  public func setAvgLeftPowerPhase(_ avgLeftPowerPhase: Swift.Float32)
  public func getNumAvgLeftPowerPhasePeak() -> Swift.Int
  public func getAvgLeftPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgLeftPowerPhasePeak(_ index: Swift.Int, _ avgLeftPowerPhasePeak: Swift.Float32)
  public func getNumAvgRightPowerPhase() -> Swift.Int
  public func getAvgRightPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhase(_ index: Swift.Int, _ avgRightPowerPhase: Swift.Float32)
  public func getNumAvgRightPowerPhasePeak() -> Swift.Int
  public func getAvgRightPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setAvgRightPowerPhasePeak(_ index: Swift.Int, _ avgRightPowerPhasePeak: Swift.Float32)
  public func getNumAvgPowerPosition() -> Swift.Int
  public func getAvgPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setAvgPowerPosition(_ index: Swift.Int, _ avgPowerPosition: Swift.UInt16)
  public func getNumMaxPowerPosition() -> Swift.Int
  public func getMaxPowerPosition(_ index: Swift.Int) -> Swift.UInt16?
  public func setMaxPowerPosition(_ index: Swift.Int, _ maxPowerPosition: Swift.UInt16)
  public func getNumAvgCadencePosition() -> Swift.Int
  public func getAvgCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setAvgCadencePosition(_ index: Swift.Int, _ avgCadencePosition: Swift.UInt8)
  public func getNumMaxCadencePosition() -> Swift.Int
  public func getMaxCadencePosition(_ index: Swift.Int) -> Swift.UInt8?
  public func setMaxCadencePosition(_ index: Swift.Int, _ maxCadencePosition: Swift.UInt8)
  public func getEnhancedAvgSpeed() -> Swift.Float32?
  public func setEnhancedAvgSpeed(_ enhancedAvgSpeed: Swift.Float32)
  public func getEnhancedMaxSpeed() -> Swift.Float32?
  public func setEnhancedMaxSpeed(_ enhancedMaxSpeed: Swift.Float32)
  public func getEnhancedAvgAltitude() -> Swift.Float32?
  public func setEnhancedAvgAltitude(_ enhancedAvgAltitude: Swift.Float32)
  public func getEnhancedMinAltitude() -> Swift.Float32?
  public func setEnhancedMinAltitude(_ enhancedMinAltitude: Swift.Float32)
  public func getEnhancedMaxAltitude() -> Swift.Float32?
  public func setEnhancedMaxAltitude(_ enhancedMaxAltitude: Swift.Float32)
  public func getAvgLevMotorPower() -> Swift.UInt16?
  public func setAvgLevMotorPower(_ avgLevMotorPower: Swift.UInt16)
  public func getMaxLevMotorPower() -> Swift.UInt16?
  public func setMaxLevMotorPower(_ maxLevMotorPower: Swift.UInt16)
  public func getLevBatteryConsumption() -> Swift.Float32?
  public func setLevBatteryConsumption(_ levBatteryConsumption: Swift.Float32)
  public func getAvgVerticalRatio() -> Swift.Float32?
  public func setAvgVerticalRatio(_ avgVerticalRatio: Swift.Float32)
  public func getAvgStanceTimeBalance() -> Swift.Float32?
  public func setAvgStanceTimeBalance(_ avgStanceTimeBalance: Swift.Float32)
  public func getAvgStepLength() -> Swift.Float32?
  public func setAvgStepLength(_ avgStepLength: Swift.Float32)
  public func getAvgVam() -> Swift.Float32?
  public func setAvgVam(_ avgVam: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
open class NSDecimalNumberTransform : GimKit.TransformType {
  public typealias Object = Foundation.NSDecimalNumber
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.NSDecimalNumber?
  open func transformToJSON(_ value: Foundation.NSDecimalNumber?) -> Swift.String?
  @objc deinit
}
public enum FitGender : Swift.UInt8 {
  case Female
  case Male
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct BatteryStatus {
  public static let New: Swift.UInt8
  public static let Good: Swift.UInt8
  public static let Ok: Swift.UInt8
  public static let Low: Swift.UInt8
  public static let Critical: Swift.UInt8
  public static let Charging: Swift.UInt8
  public static let Unknown: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public class ThreeDSensorCalibrationMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case SensorType
    case CalibrationFactor
    case CalibrationDivisor
    case LevelShift
    case OffsetCal
    case OrientationMatrix
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getSensorType() -> GimKit.SensorType?
  public func setSensorType(_ sensorType: GimKit.SensorType)
  public func getCalibrationFactor() -> Swift.UInt32?
  public func setCalibrationFactor(_ calibrationFactor: Swift.UInt32)
  public func getCalibrationDivisor() -> Swift.UInt32?
  public func setCalibrationDivisor(_ calibrationDivisor: Swift.UInt32)
  public func getLevelShift() -> Swift.UInt32?
  public func setLevelShift(_ levelShift: Swift.UInt32)
  public func getNumOffsetCal() -> Swift.Int
  public func getOffsetCal(_ index: Swift.Int) -> Swift.Int32?
  public func setOffsetCal(_ index: Swift.Int, _ offsetCal: Swift.Int32)
  public func getNumOrientationMatrix() -> Swift.Int
  public func getOrientationMatrix(_ index: Swift.Int) -> Swift.Float32?
  public func setOrientationMatrix(_ index: Swift.Int, _ orientationMatrix: Swift.Float32)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol GimKitDiscoveryListener : AnyObject {
  func onDevicesFound(devices: [GimKit.GimKitDevice], code: Swift.Int)
}
public struct FitBaseUnit {
  public static let Other: Swift.UInt16
  public static let Kilogram: Swift.UInt16
  public static let Pound: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class StressLevelMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case StressLevelValue
    case StressLevelTime
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getStressLevelValue() -> Swift.Int16?
  public func setStressLevelValue(_ stressLevelValue: Swift.Int16)
  public func getStressLevelTime() -> GimKit.FitDateTime?
  public func setStressLevelTime(_ stressLevelTime: GimKit.FitDateTime)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class Accumulator {
  public init()
  public func set(mesgNum: Swift.Int32, destFieldNum: Swift.Int32, value: Swift.Int64)
  public func accumulate(mesgNum: Swift.Int32, destFieldNum: Swift.Int32, value: Swift.Int64, bits: Swift.Int) -> Swift.Int64
  @objc deinit
}
extension HandyJSON {
  public func toJSON() -> [Swift.String : Any]?
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
extension Collection where Self.Element : GimKit.HandyJSON {
  public func toJSON() -> [[Swift.String : Any]?]
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
public class BikeProfileMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case Name
    case Sport
    case SubSport
    case Odometer
    case BikeSpdAntId
    case BikeCadAntId
    case BikeSpdcadAntId
    case BikePowerAntId
    case CustomWheelsize
    case AutoWheelsize
    case BikeWeight
    case PowerCalFactor
    case AutoWheelCal
    case AutoPowerZero
    case Id
    case SpdEnabled
    case CadEnabled
    case SpdcadEnabled
    case PowerEnabled
    case CrankLength
    case Enabled
    case BikeSpdAntIdTransType
    case BikeCadAntIdTransType
    case BikeSpdcadAntIdTransType
    case BikePowerAntIdTransType
    case OdometerRollover
    case FrontGearNum
    case FrontGear
    case RearGearNum
    case RearGear
    case ShimanoDi2Enabled
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  public func getOdometer() -> Swift.Float32?
  public func setOdometer(_ odometer: Swift.Float32)
  public func getBikeSpdAntId() -> Swift.UInt16?
  public func setBikeSpdAntId(_ bikeSpdAntId: Swift.UInt16)
  public func getBikeCadAntId() -> Swift.UInt16?
  public func setBikeCadAntId(_ bikeCadAntId: Swift.UInt16)
  public func getBikeSpdcadAntId() -> Swift.UInt16?
  public func setBikeSpdcadAntId(_ bikeSpdcadAntId: Swift.UInt16)
  public func getBikePowerAntId() -> Swift.UInt16?
  public func setBikePowerAntId(_ bikePowerAntId: Swift.UInt16)
  public func getCustomWheelsize() -> Swift.Float32?
  public func setCustomWheelsize(_ customWheelsize: Swift.Float32)
  public func getAutoWheelsize() -> Swift.Float32?
  public func setAutoWheelsize(_ autoWheelsize: Swift.Float32)
  public func getBikeWeight() -> Swift.Float32?
  public func setBikeWeight(_ bikeWeight: Swift.Float32)
  public func getPowerCalFactor() -> Swift.Float32?
  public func setPowerCalFactor(_ powerCalFactor: Swift.Float32)
  public func getAutoWheelCal() -> GimKit.FitBool?
  public func setAutoWheelCal(_ autoWheelCal: GimKit.FitBool)
  public func getAutoPowerZero() -> GimKit.FitBool?
  public func setAutoPowerZero(_ autoPowerZero: GimKit.FitBool)
  public func getId() -> Swift.UInt8?
  public func setId(_ id: Swift.UInt8)
  public func getSpdEnabled() -> GimKit.FitBool?
  public func setSpdEnabled(_ spdEnabled: GimKit.FitBool)
  public func getCadEnabled() -> GimKit.FitBool?
  public func setCadEnabled(_ cadEnabled: GimKit.FitBool)
  public func getSpdcadEnabled() -> GimKit.FitBool?
  public func setSpdcadEnabled(_ spdcadEnabled: GimKit.FitBool)
  public func getPowerEnabled() -> GimKit.FitBool?
  public func setPowerEnabled(_ powerEnabled: GimKit.FitBool)
  public func getCrankLength() -> Swift.Float32?
  public func setCrankLength(_ crankLength: Swift.Float32)
  public func getEnabled() -> GimKit.FitBool?
  public func setEnabled(_ enabled: GimKit.FitBool)
  public func getBikeSpdAntIdTransType() -> Swift.UInt8?
  public func setBikeSpdAntIdTransType(_ bikeSpdAntIdTransType: Swift.UInt8)
  public func getBikeCadAntIdTransType() -> Swift.UInt8?
  public func setBikeCadAntIdTransType(_ bikeCadAntIdTransType: Swift.UInt8)
  public func getBikeSpdcadAntIdTransType() -> Swift.UInt8?
  public func setBikeSpdcadAntIdTransType(_ bikeSpdcadAntIdTransType: Swift.UInt8)
  public func getBikePowerAntIdTransType() -> Swift.UInt8?
  public func setBikePowerAntIdTransType(_ bikePowerAntIdTransType: Swift.UInt8)
  public func getOdometerRollover() -> Swift.UInt8?
  public func setOdometerRollover(_ odometerRollover: Swift.UInt8)
  public func getFrontGearNum() -> Swift.UInt8?
  public func setFrontGearNum(_ frontGearNum: Swift.UInt8)
  public func getNumFrontGear(_ index: Swift.Int) -> Swift.Int
  public func getFrontGear(_ index: Swift.Int) -> Swift.UInt8?
  public func setFrontGear(_ index: Swift.Int, _ frontGear: Swift.UInt8)
  public func getRearGearNum() -> Swift.UInt8?
  public func setRearGearNum(_ rearGearNum: Swift.UInt8)
  public func getNumRearGear() -> Swift.Int
  public func getRearGear(_ index: Swift.Int) -> Swift.UInt8?
  public func setRearGear(_ index: Swift.Int, _ rearGear: Swift.UInt8)
  public func getShimanoDi2Enabled() -> GimKit.FitBool?
  public func setShimanoDi2Enabled(_ shimanoDi2Enabled: GimKit.FitBool)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
extension Selector {
}
public struct SportBits3 {
  public static let Driving: Swift.UInt8
  public static let Golf: Swift.UInt8
  public static let HangGliding: Swift.UInt8
  public static let HorsebackRiding: Swift.UInt8
  public static let Hunting: Swift.UInt8
  public static let Fishing: Swift.UInt8
  public static let InlineSkating: Swift.UInt8
  public static let RockClimbing: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
public enum PowerPhaseType : Swift.UInt8 {
  case PowerPhaseStartAngle
  case PowerPhaseEndAngle
  case PowerPhaseArcLength
  case PowerPhaseCenter
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum ExdDescriptors : Swift.UInt8 {
  case BikeLightBatteryStatus
  case BeamAngleStatus
  case BateryLevel
  case LightNetworkMode
  case NumberLightsConnected
  case Cadence
  case Distance
  case EstimatedTimeOfArrival
  case Heading
  case Time
  case BatteryLevel
  case TrainerResistance
  case TrainerTargetPower
  case TimeSeated
  case TimeStanding
  case Elevation
  case Grade
  case Ascent
  case Descent
  case VerticalSpeed
  case Di2BatteryLevel
  case FrontGear
  case RearGear
  case GearRatio
  case HeartRate
  case HeartRateZone
  case TimeInHeartRateZone
  case HeartRateReserve
  case Calories
  case GpsAccuracy
  case GpsSignalStrength
  case Temperature
  case TimeOfDay
  case Balance
  case PedalSmoothness
  case Power
  case FunctionalThresholdPower
  case IntensityFactor
  case Work
  case PowerRatio
  case NormalizedPower
  case TrainingStressScore
  case TimeOnZone
  case Speed
  case Laps
  case Reps
  case WorkoutStep
  case CourseDistance
  case NavigationDistance
  case CourseEstimatedTimeOfArrival
  case NavigationEstimatedTimeOfArrival
  case CourseTime
  case NavigationTime
  case CourseHeading
  case NavigationHeading
  case PowerZone
  case TorqueEffectiveness
  case TimerTime
  case PowerWeightRatio
  case LeftPlatformCenterOffset
  case RightPlatformCenterOffset
  case LeftPowerPhaseStartAngle
  case RightPowerPhaseStartAngle
  case LeftPowerPhaseFinishAngle
  case RightPowerPhaseFinishAngle
  case Gears
  case Pace
  case TrainingEffect
  case VerticalOscillation
  case VerticalRatio
  case GroundContactTime
  case LeftGroundContactTimeBalance
  case RightGroundContactTimeBalance
  case StrideLength
  case RunningCadence
  case PerformanceCondition
  case CourseType
  case TimeInPowerZone
  case NavigationTurn
  case CourseLocation
  case NavigationLocation
  case Compass
  case GearCombo
  case MuscleOxygen
  case Icon
  case CompassHeading
  case GpsHeading
  case GpsElevation
  case AnaerobicTrainingEffect
  case Course
  case OffCourse
  case GlideRatio
  case VerticalDistance
  case Vmg
  case AmbientPressure
  case Pressure
  case Vam
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum WeatherStatus : Swift.UInt8 {
  case Clear
  case PartlyCloudy
  case MostlyCloudy
  case Rain
  case Snow
  case Windy
  case Thunderstorms
  case WintryMix
  case Fog
  case Hazy
  case Hail
  case ScatteredShowers
  case ScatteredThunderstorms
  case UnknownPrecipitation
  case LightRain
  case HeavyRain
  case LightSnow
  case HeavySnow
  case LightRainSnow
  case HeavyRainSnow
  case Cloudy
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum AudioPlayerBufferingStrategy : Swift.Int {
  case defaultBuffering = 0
  case playWhenPreferredBufferDurationFull = 1
  case playWhenBufferNotEmpty = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class TransformOf<ObjectType, JSONType> : GimKit.TransformType {
  public typealias Object = ObjectType
  public typealias JSON = JSONType
  public init(fromJSON: @escaping (JSONType?) -> ObjectType?, toJSON: @escaping (ObjectType?) -> JSONType?)
  open func transformFromJSON(_ value: Any?) -> ObjectType?
  open func transformToJSON(_ value: ObjectType?) -> JSONType?
  @objc deinit
}
public enum WorkoutEquipment : Swift.UInt8 {
  case None
  case SwimFins
  case SwimKickboard
  case SwimPaddles
  case SwimPullBuoy
  case SwimSnorkel
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct RowExerciseName {
  public static let BarbellStraightLegDeadliftToRow: Swift.UInt16
  public static let CableRowStanding: Swift.UInt16
  public static let DumbbellRow: Swift.UInt16
  public static let ElevatedFeetInvertedRow: Swift.UInt16
  public static let WeightedElevatedFeetInvertedRow: Swift.UInt16
  public static let FacePull: Swift.UInt16
  public static let FacePullWithExternalRotation: Swift.UInt16
  public static let InvertedRowWithFeetOnSwissBall: Swift.UInt16
  public static let WeightedInvertedRowWithFeetOnSwissBall: Swift.UInt16
  public static let KettlebellRow: Swift.UInt16
  public static let ModifiedInvertedRow: Swift.UInt16
  public static let WeightedModifiedInvertedRow: Swift.UInt16
  public static let NeutralGripAlternatingDumbbellRow: Swift.UInt16
  public static let OneArmBentOverRow: Swift.UInt16
  public static let OneLeggedDumbbellRow: Swift.UInt16
  public static let RenegadeRow: Swift.UInt16
  public static let ReverseGripBarbellRow: Swift.UInt16
  public static let RopeHandleCableRow: Swift.UInt16
  public static let SeatedCableRow: Swift.UInt16
  public static let SeatedDumbbellRow: Swift.UInt16
  public static let SingleArmCableRow: Swift.UInt16
  public static let SingleArmCableRowAndRotation: Swift.UInt16
  public static let SingleArmInvertedRow: Swift.UInt16
  public static let WeightedSingleArmInvertedRow: Swift.UInt16
  public static let SingleArmNeutralGripDumbbellRow: Swift.UInt16
  public static let SingleArmNeutralGripDumbbellRowAndRotation: Swift.UInt16
  public static let SuspendedInvertedRow: Swift.UInt16
  public static let WeightedSuspendedInvertedRow: Swift.UInt16
  public static let TBarRow: Swift.UInt16
  public static let TowelGripInvertedRow: Swift.UInt16
  public static let WeightedTowelGripInvertedRow: Swift.UInt16
  public static let UnderhandGripCableRow: Swift.UInt16
  public static let VGripCableRow: Swift.UInt16
  public static let WideGripSeatedCableRow: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct LeftRightBalance100 {
  public static let Mask: Swift.UInt16
  public static let Right: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public struct WorkoutHr {
  public static let BpmOffset: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public protocol _RawEnumProtocol : GimKit._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
extension RawRepresentable where Self : GimKit._RawEnumProtocol {
  public static func _transform(from object: Any) -> Self?
  public func _plainValue() -> Any?
}
public struct HipSwingExerciseName {
  public static let SingleArmKettlebellSwing: Swift.UInt16
  public static let SingleArmDumbbellSwing: Swift.UInt16
  public static let StepOutSwing: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public class WorkoutStepMesg : GimKit.Mesg {
  public enum DurationValueSubfield : Swift.UInt16 {
    case DurationTime
    case DurationDistance
    case DurationHr
    case DurationCalories
    case DurationStep
    case DurationPower
    case DurationReps
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum TargetValueSubfield : Swift.UInt16 {
    case TargetSpeedZone
    case TargetHrZone
    case TargetCadenceZone
    case TargetPowerZone
    case RepeatSteps
    case RepeatTime
    case RepeatDistance
    case RepeatCalories
    case RepeatHr
    case RepeatPower
    case TargetStrokeType
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum CustomTargetValueLowSubfield : Swift.UInt16 {
    case CustomTargetSpeedLow
    case CustomTargetHeartRateLow
    case CustomTargetCadenceLow
    case CustomTargetPowerLow
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum CustomTargetValueHighSubfield : Swift.UInt16 {
    case CustomTargetSpeedHigh
    case CustomTargetHeartRateHigh
    case CustomTargetCadenceHigh
    case CustomTargetPowerHigh
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case MessageIndex
    case WktStepName
    case DurationType
    case DurationValue
    case TargetType
    case TargetValue
    case CustomTargetValueLow
    case CustomTargetValueHigh
    case Intensity
    case Notes
    case Equipment
    case ExerciseCategory
    case ExerciseName
    case ExerciseWeight
    case WeightDisplayUnit
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getMessageIndex() -> Swift.UInt16?
  public func setMessageIndex(_ messageIndex: Swift.UInt16)
  public func getWktStepName() -> [Swift.UInt8]?
  public func getWktStepNameAsString() -> Swift.String?
  public func setWktStepName(_ wktStepName: Swift.String)
  public func setWktStepName(_ wktStepName: [Swift.UInt8])
  public func getDurationType() -> GimKit.WktStepDuration?
  public func setDurationType(_ durationType: GimKit.WktStepDuration)
  public func getDurationValue() -> Swift.UInt32?
  public func setDurationValue(_ durationValue: Swift.UInt32)
  public func getDurationTime() -> Swift.Float32?
  public func setDurationTime(_ durationTime: Swift.Float32)
  public func getDurationDistance() -> Swift.Float32?
  public func setDurationDistance(_ durationDistance: Swift.Float32)
  public func getDurationHr() -> Swift.UInt32?
  public func setDurationHr(_ durationHr: Swift.UInt32)
  public func getDurationCalories() -> Swift.UInt32?
  public func setDurationCalories(_ durationCalories: Swift.UInt32)
  public func getDurationStep() -> Swift.UInt32?
  public func setDurationStep(_ durationStep: Swift.UInt32)
  public func getDurationPower() -> Swift.UInt32?
  public func setDurationPower(_ durationPower: Swift.UInt32)
  public func getDurationReps() -> Swift.UInt32?
  public func setDurationReps(_ durationReps: Swift.UInt32)
  public func getTargetType() -> GimKit.WktStepTarget?
  public func setTargetType(_ targetType: GimKit.WktStepTarget)
  public func getTargetValue() -> Swift.UInt32?
  public func setTargetValue(_ targetValue: Swift.UInt32)
  public func getTargetSpeedZone() -> Swift.UInt32?
  public func setTargetSpeedZone(_ targetSpeedZone: Swift.UInt32)
  public func getTargetHrZone() -> Swift.UInt32?
  public func setTargetHrZone(_ targetHrZone: Swift.UInt32)
  public func getTargetCadenceZone() -> Swift.UInt32?
  public func setTargetCadenceZone(_ targetCadenceZone: Swift.UInt32)
  public func getTargetPowerZone() -> Swift.UInt32?
  public func setTargetPowerZone(_ targetPowerZone: Swift.UInt32)
  public func getRepeatSteps() -> Swift.UInt32?
  public func setRepeatSteps(_ repeatSteps: Swift.UInt32)
  public func getRepeatTime() -> Swift.Float32?
  public func setRepeatTime(_ repeatTime: Swift.Float32)
  public func getRepeatDistance() -> Swift.Float32?
  public func setRepeatDistance(_ repeatDistance: Swift.Float32)
  public func getRepeatCalories() -> Swift.UInt32?
  public func setRepeatCalories(_ repeatCalories: Swift.UInt32)
  public func getRepeatHr() -> Swift.UInt32?
  public func setRepeatHr(_ repeatHr: Swift.UInt32)
  public func getRepeatPower() -> Swift.UInt32?
  public func setRepeatPower(_ repeatPower: Swift.UInt32)
  public func getTargetStrokeType() -> GimKit.SwimStroke?
  public func setTargetStrokeType(_ targetStrokeType: Swift.UInt8)
  public func getCustomTargetValueLow() -> Swift.UInt32?
  public func setCustomTargetValueLow(_ customTargetValueLow: Swift.UInt32)
  public func getCustomTargetSpeedLow() -> Swift.Float32?
  public func setCustomTargetSpeedLow(_ customTargetSpeedLow: Swift.Float32)
  public func getCustomTargetHeartRateLow() -> Swift.UInt32?
  public func setCustomTargetHeartRateLow(_ customTargetHeartRateLow: Swift.UInt32)
  public func getCustomTargetCadenceLow() -> Swift.UInt32?
  public func setCustomTargetCadenceLow(_ customTargetCadenceLow: Swift.UInt32)
  public func getCustomTargetPowerLow() -> Swift.UInt32?
  public func setCustomTargetPowerLow(_ customTargetPowerLow: Swift.UInt32)
  public func getCustomTargetValueHigh() -> Swift.UInt32?
  public func setCustomTargetValueHigh(_ customTargetValueHigh: Swift.UInt32)
  public func getCustomTargetSpeedHigh() -> Swift.Float32?
  public func setCustomTargetSpeedHigh(_ customTargetSpeedHigh: Swift.Float32)
  public func getCustomTargetHeartRateHigh() -> Swift.UInt32?
  public func setCustomTargetHeartRateHigh(_ customTargetHeartRateHigh: Swift.UInt32)
  public func getCustomTargetCadenceHigh() -> Swift.UInt32?
  public func setCustomTargetCadenceHigh(_ customTargetCadenceHigh: Swift.UInt32)
  public func getCustomTargetPowerHigh() -> Swift.UInt32?
  public func setCustomTargetPowerHigh(_ customTargetPowerHigh: Swift.UInt32)
  public func getIntensity() -> GimKit.Intensity?
  public func setIntensity(_ intensity: GimKit.Intensity)
  public func getNotes() -> [Swift.UInt8]?
  public func getNotesAsString() -> Swift.String?
  public func setNotes(_ notes: Swift.String)
  public func setNotes(_ notes: [Swift.UInt8])
  public func getEquipment() -> GimKit.WorkoutEquipment?
  public func setEquipment(_ equipment: GimKit.WorkoutEquipment)
  public func getExerciseCategory() -> Swift.UInt16?
  public func setExerciseCategory(_ exerciseCategory: Swift.UInt16)
  public func getExerciseName() -> Swift.UInt16?
  public func setExerciseName(_ exerciseName: Swift.UInt16)
  public func getExerciseWeight() -> Swift.Float32?
  public func setExerciseWeight(_ exerciseWeight: Swift.Float32)
  public func getWeightDisplayUnit() -> Swift.UInt16?
  public func setWeightDisplayUnit(_ weightDisplayUnit: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class DeviceInfoMesg : GimKit.Mesg {
  public enum DeviceTypeSubfield : Swift.UInt16 {
    case AntplusDeviceType
    case AntDeviceType
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum ProductSubfield : Swift.UInt16 {
    case GarminProduct
    case Subfields
    case Active
    case MainField
    public init?(rawValue: Swift.UInt16)
    public typealias RawValue = Swift.UInt16
    public var rawValue: Swift.UInt16 {
      get
    }
  }
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case DeviceIndex
    case DeviceType
    case Manufacturer
    case SerialNumber
    case Product
    case SoftwareVersion
    case HardwareVersion
    case CumOperatingTime
    case BatteryVoltage
    case BatteryStatus
    case SensorPosition
    case Descriptor
    case AntTransmissionType
    case AntDeviceNumber
    case AntNetwork
    case SourceType
    case ProductName
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getDeviceIndex() -> Swift.UInt8?
  public func setDeviceIndex(_ deviceIndex: Swift.UInt8)
  public func getDeviceType() -> Swift.UInt8?
  public func setDeviceType(_ deviceType: Swift.UInt8)
  public func getAntplusDeviceType() -> Swift.UInt8?
  public func setAntplusDeviceType(_ antplusDeviceType: Swift.UInt8)
  public func getAntDeviceType() -> Swift.UInt8?
  public func setAntDeviceType(_ antplusDeviceType: Swift.UInt8)
  public func getManufacturer() -> Swift.UInt16?
  public func setManufacturer(_ manufacturer: Swift.UInt16)
  public func getSerialNumber() -> Swift.UInt32?
  public func setSerialNumber(_ serialNumber: Swift.UInt32)
  public func getProduct() -> Swift.UInt16?
  public func setProduct(_ product: Swift.UInt16)
  public func getGarminProduct() -> Swift.UInt16?
  public func setGarminProduct(_ garminProduct: Swift.UInt16)
  public func getSoftwareVersion() -> Swift.Float32?
  public func setSoftwareVersion(_ softwareVersion: Swift.Float32)
  public func getHardwareVersion() -> Swift.UInt8?
  public func setHardwareVersion(_ hardwareVersion: Swift.UInt8)
  public func getCumOperatingTime() -> Swift.UInt32?
  public func setCumOperatingTime(_ cumOperatingTime: Swift.UInt32)
  public func getBatteryVoltage() -> Swift.Float32?
  public func setBatteryVoltage(_ batteryVoltage: Swift.Float32)
  public func getBatteryStatus() -> Swift.UInt8?
  public func setBatteryStatus(_ batteryStatus: Swift.UInt8)
  public func getSensorPosition() -> GimKit.BodyLocation?
  public func setSensorPosition(_ sensorPosition: GimKit.BodyLocation)
  public func getDescriptor() -> [Swift.UInt8]?
  public func getDescriptorAsString() -> Swift.String?
  public func setDescriptor(_ descriptor: Swift.String)
  public func setDescriptor(_ descriptor: [Swift.UInt8])
  public func getAntTransmissionType() -> Swift.UInt8?
  public func setAntTransmissionType(_ antTransmissionType: Swift.UInt8)
  public func getAntDeviceNumber() -> Swift.UInt16?
  public func setAntDeviceNumber(_ antDeviceNumber: Swift.UInt16)
  public func getAntNetwork() -> GimKit.AntNetwork?
  public func setAntNetwork(_ antNetwork: GimKit.AntNetwork)
  public func getSourceType() -> GimKit.SourceType?
  public func setSourceType(_ sourceType: GimKit.SourceType)
  public func getProductName() -> [Swift.UInt8]?
  public func getProductNameAsString() -> Swift.String?
  public func setProductName(_ productName: Swift.String)
  public func setProductName(_ productName: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public class OhrSettingsMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case Enabled
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getEnabled() -> GimKit.Switch?
  public func setEnabled(_ enabled: GimKit.Switch)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct ConnectivityCapabilities {
  public static let Bluetooth: Swift.UInt32
  public static let BluetoothLe: Swift.UInt32
  public static let Ant: Swift.UInt32
  public static let ActivityUpload: Swift.UInt32
  public static let CourseDownload: Swift.UInt32
  public static let WorkoutDownload: Swift.UInt32
  public static let LiveTrack: Swift.UInt32
  public static let WeatherConditions: Swift.UInt32
  public static let WeatherAlerts: Swift.UInt32
  public static let GpsEphemerisDownload: Swift.UInt32
  public static let ExplicitArchive: Swift.UInt32
  public static let SetupIncomplete: Swift.UInt32
  public static let ContinueSyncAfterSoftwareUpdate: Swift.UInt32
  public static let ConnectIqAppDownload: Swift.UInt32
  public static let GolfCourseDownload: Swift.UInt32
  public static let DeviceInitiatesSync: Swift.UInt32
  public static let ConnectIqWatchAppDownload: Swift.UInt32
  public static let ConnectIqWidgetDownload: Swift.UInt32
  public static let ConnectIqWatchFaceDownload: Swift.UInt32
  public static let ConnectIqDataFieldDownload: Swift.UInt32
  public static let ConnectIqAppManagment: Swift.UInt32
  public static let SwingSensor: Swift.UInt32
  public static let SwingSensorRemote: Swift.UInt32
  public static let IncidentDetection: Swift.UInt32
  public static let AudioPrompts: Swift.UInt32
  public static let WifiVerification: Swift.UInt32
  public static let TrueUp: Swift.UInt32
  public static let FindMyWatch: Swift.UInt32
  public static let RemoteManualSync: Swift.UInt32
  public static let LiveTrackAutoStart: Swift.UInt32
  public static let LiveTrackMessaging: Swift.UInt32
  public static let InstantInput: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public struct LocalDateTime {
  public static let Min: Swift.UInt32
  public static let Invalid: Swift.UInt32
}
public class RecordMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case PositionLat
    case PositionLong
    case Altitude
    case HeartRate
    case Cadence
    case Distance
    case Speed
    case Power
    case CompressedSpeedDistance
    case Grade
    case Resistance
    case TimeFromCourse
    case CycleLength
    case Temperature
    case Speed1S
    case Cycles
    case TotalCycles
    case CompressedAccumulatedPower
    case AccumulatedPower
    case LeftRightBalance
    case GpsAccuracy
    case VerticalSpeed
    case Calories
    case VerticalOscillation
    case StanceTimePercent
    case StanceTime
    case ActivityType
    case LeftTorqueEffectiveness
    case RightTorqueEffectiveness
    case LeftPedalSmoothness
    case RightPedalSmoothness
    case CombinedPedalSmoothness
    case Time128
    case StrokeType
    case Zone
    case BallSpeed
    case Cadence256
    case FractionalCadence
    case TotalHemoglobinConc
    case TotalHemoglobinConcMin
    case TotalHemoglobinConcMax
    case SaturatedHemoglobinPercent
    case SaturatedHemoglobinPercentMin
    case SaturatedHemoglobinPercentMax
    case DeviceIndex
    case LeftPco
    case RightPco
    case LeftPowerPhase
    case LeftPowerPhasePeak
    case RightPowerPhase
    case RightPowerPhasePeak
    case EnhancedSpeed
    case EnhancedAltitude
    case BatterySoc
    case MotorPower
    case VerticalRatio
    case StanceTimeBalance
    case StepLength
    case AbsolutePressure
    case Depth
    case NextStopDepth
    case NextStopTime
    case TimeToSurface
    case NdlTime
    case CnsLoad
    case N2Load
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getPositionLat() -> Swift.Int32?
  public func setPositionLat(_ positionLat: Swift.Int32)
  public func getPositionLong() -> Swift.Int32?
  public func setPositionLong(_ positionLong: Swift.Int32)
  public func getAltitude() -> Swift.Float32?
  public func setAltitude(_ altitude: Swift.Float32)
  public func getHeartRate() -> Swift.UInt8?
  public func setHeartRate(_ heartRate: Swift.UInt8)
  public func getCadence() -> Swift.UInt8?
  public func setCadence(_ cadence: Swift.UInt8)
  public func getDistance() -> Swift.Float32?
  public func setDistance(_ distance: Swift.Float32)
  public func getSpeed() -> Swift.Float32?
  public func setSpeed(_ speed: Swift.Float32)
  public func getPower() -> Swift.UInt16?
  public func setPower(_ power: Swift.UInt16)
  public func getNumCompressedSpeedDistance() -> Swift.Int
  public func getCompressedSpeedDistance(_ index: Swift.Int) -> Swift.UInt8?
  public func setCompressedSpeedDistance(_ index: Swift.Int, _ compressedSpeedDistance: Swift.UInt8)
  public func getGrade() -> Swift.Float32?
  public func setGrade(_ grade: Swift.Float32)
  public func getResistance() -> Swift.UInt8?
  public func setResistance(_ resistance: Swift.UInt8)
  public func getTimeFromCourse() -> Swift.Float32?
  public func setTimeFromCourse(_ timeFromCourse: Swift.Float32)
  public func getCycleLength() -> Swift.Float32?
  public func setCycleLength(_ cycleLength: Swift.Float32)
  public func getTemperature() -> Swift.Int8?
  public func setTemperature(_ temperature: Swift.Int8)
  public func getNumSpeed1S() -> Swift.Int
  public func getSpeed1S(_ index: Swift.Int) -> Swift.Float32?
  public func setSpeed1S(_ index: Swift.Int, _ speed1S: Swift.Float32)
  public func getCycles() -> Swift.UInt8?
  public func setCycles(_ cycles: Swift.UInt8)
  public func getTotalCycles() -> Swift.UInt32?
  public func setTotalCycles(_ totalCycles: Swift.UInt32)
  public func getCompressedAccumulatedPower() -> Swift.UInt16?
  public func setCompressedAccumulatedPower(_ compressedAccumulatedPower: Swift.UInt16)
  public func getAccumulatedPower() -> Swift.UInt32?
  public func setAccumulatedPower(_ accumulatedPower: Swift.UInt32)
  public func getLeftRightBalance() -> Swift.UInt8?
  public func setLeftRightBalance(_ leftRightBalance: Swift.UInt8)
  public func getGpsAccuracy() -> Swift.UInt8?
  public func setGpsAccuracy(_ gpsAccuracy: Swift.UInt8)
  public func getVerticalSpeed() -> Swift.Float32?
  public func setVerticalSpeed(_ verticalSpeed: Swift.Float32)
  public func getCalories() -> Swift.UInt16?
  public func setCalories(_ calories: Swift.UInt16)
  public func getVerticalOscillation() -> Swift.Float32?
  public func setVerticalOscillation(_ verticalOscillation: Swift.Float32)
  public func getStanceTimePercent() -> Swift.Float32?
  public func setStanceTimePercent(_ stanceTimePercent: Swift.Float32)
  public func getStanceTime() -> Swift.Float32?
  public func setStanceTime(_ stanceTime: Swift.Float32)
  public func getActivityType() -> GimKit.ActivityType?
  public func setActivityType(_ activityType: GimKit.ActivityType)
  public func getLeftTorqueEffectiveness() -> Swift.Float32?
  public func setLeftTorqueEffectiveness(_ leftTorqueEffectiveness: Swift.Float32)
  public func getRightTorqueEffectiveness() -> Swift.Float32?
  public func setRightTorqueEffectiveness(_ rightTorqueEffectiveness: Swift.Float32)
  public func getLeftPedalSmoothness() -> Swift.Float32?
  public func setLeftPedalSmoothness(_ leftPedalSmoothness: Swift.Float32)
  public func getRightPedalSmoothness() -> Swift.Float32?
  public func setRightPedalSmoothness(_ rightPedalSmoothness: Swift.Float32)
  public func getCombinedPedalSmoothness() -> Swift.Float32?
  public func setCombinedPedalSmoothness(_ combinedPedalSmoothness: Swift.Float32)
  public func getTime128() -> Swift.Float32?
  public func setTime128(_ time128: Swift.Float32)
  public func getStrokeType() -> GimKit.StrokeType?
  public func setStrokeType(_ strokeType: GimKit.StrokeType)
  public func getZone() -> Swift.UInt8?
  public func setZone(_ zone: Swift.UInt8)
  public func getBallSpeed() -> Swift.Float32?
  public func setBallSpeed(_ ballSpeed: Swift.Float32)
  public func getCadence256() -> Swift.Float32?
  public func setCadence256(_ cadence256: Swift.Float32)
  public func getFractionalCadence() -> Swift.Float32?
  public func setFractionalCadence(_ fractionalCadence: Swift.Float32)
  public func getTotalHemoglobinConc() -> Swift.Float32?
  public func setTotalHemoglobinConc(_ totalHemoglobinConc: Swift.Float32)
  public func getTotalHemoglobinConcMin() -> Swift.Float32?
  public func setTotalHemoglobinConcMin(_ totalHemoglobinConcMin: Swift.Float32)
  public func getTotalHemoglobinConcMax() -> Swift.Float32?
  public func setTotalHemoglobinConcMax(_ totalHemoglobinConcMax: Swift.Float32)
  public func getSaturatedHemoglobinPercent() -> Swift.Float32?
  public func setSaturatedHemoglobinPercent(_ saturatedHemoglobinPercent: Swift.Float32)
  public func getSaturatedHemoglobinPercentMin() -> Swift.Float32?
  public func setSaturatedHemoglobinPercentMin(_ saturatedHemoglobinPercentMin: Swift.Float32)
  public func getSaturatedHemoglobinPercentMax() -> Swift.Float32?
  public func setSaturatedHemoglobinPercentMax(_ saturatedHemoglobinPercentMax: Swift.Float32)
  public func getDeviceIndex() -> Swift.UInt8?
  public func setDeviceIndex(_ deviceIndex: Swift.UInt8)
  public func getLeftPco() -> Swift.Int8?
  public func setLeftPco(_ leftPco: Swift.Int8)
  public func getRightPco() -> Swift.Int8?
  public func setRightPco(_ rightPco: Swift.Int8)
  public func getNumLeftPowerPhase() -> Swift.Int
  public func getLeftPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setLeftPowerPhase(_ index: Swift.Int, _ leftPowerPhase: Swift.Float32)
  public func getNumLeftPowerPhasePeak() -> Swift.Int
  public func getLeftPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setLeftPowerPhasePeak(_ index: Swift.Int, _ leftPowerPhasePeak: Swift.Float32)
  public func getNumRightPowerPhase() -> Swift.Int
  public func getRightPowerPhase(_ index: Swift.Int) -> Swift.Float32?
  public func setRightPowerPhase(_ index: Swift.Int, _ rightPowerPhase: Swift.Float32)
  public func getNumRightPowerPhasePeak() -> Swift.Int
  public func getRightPowerPhasePeak(_ index: Swift.Int) -> Swift.Float32?
  public func setRightPowerPhasePeak(_ index: Swift.Int, _ rightPowerPhasePeak: Swift.Float32)
  public func getEnhancedSpeed() -> Swift.Float32?
  public func setEnhancedSpeed(_ enhancedSpeed: Swift.Float32)
  public func getEnhancedAltitude() -> Swift.Float32?
  public func setEnhancedAltitude(_ enhancedAltitude: Swift.Float32)
  public func getBatterySoc() -> Swift.Float32?
  public func setBatterySoc(_ batterySoc: Swift.Float32)
  public func getMotorPower() -> Swift.UInt16?
  public func setMotorPower(_ motorPower: Swift.UInt16)
  public func getVerticalRatio() -> Swift.Float32?
  public func setVerticalRatio(_ verticalRatio: Swift.Float32)
  public func getStanceTimeBalance() -> Swift.Float32?
  public func setStanceTimeBalance(_ stanceTimeBalance: Swift.Float32)
  public func getStepLength() -> Swift.Float32?
  public func setStepLength(_ stepLength: Swift.Float32)
  public func getAbsolutePressure() -> Swift.UInt32?
  public func setAbsolutePressure(_ absolutePressure: Swift.UInt32)
  public func getDepth() -> Swift.Float32?
  public func setDepth(_ depth: Swift.Float32)
  public func getNextStopDepth() -> Swift.Float32?
  public func setNextStopDepth(_ nextStopDepth: Swift.Float32)
  public func getNextStopTime() -> Swift.UInt32?
  public func setNextStopTime(_ nextStopTime: Swift.UInt32)
  public func getTimeToSurface() -> Swift.UInt32?
  public func setTimeToSurface(_ timeToSurface: Swift.UInt32)
  public func getNdlTime() -> Swift.UInt32?
  public func setNdlTime(_ ndlTime: Swift.UInt32)
  public func getCnsLoad() -> Swift.UInt8?
  public func setCnsLoad(_ cnsLoad: Swift.UInt8)
  public func getN2Load() -> Swift.UInt16?
  public func setN2Load(_ n2Load: Swift.UInt16)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct UserLocalId {
  public static let LocalMin: Swift.UInt16
  public static let LocalMax: Swift.UInt16
  public static let StationaryMin: Swift.UInt16
  public static let StationaryMax: Swift.UInt16
  public static let PortableMin: Swift.UInt16
  public static let PortableMax: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public protocol RSSIObserver : AnyObject {
  func didReadRSSI(from peripheral: GimKit.PeripheralIdentifier, RSSI: Foundation.NSNumber, error: Swift.Error?)
}
open class ISO8601DateTransform : GimKit.DateFormatterTransform {
  public init()
  override public init(dateFormatter: Foundation.DateFormatter)
  @objc deinit
}
@available(iOS 10.0, *)
extension CBManagerState {
  public func string() -> Swift.String
}
public enum Goal : Swift.UInt8 {
  case Time
  case Distance
  case Calories
  case Frequency
  case Steps
  case Ascent
  case ActiveMinutes
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class CourseMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Sport
    case Name
    case Capabilities
    case SubSport
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getSport() -> GimKit.Sport?
  public func setSport(_ sport: GimKit.Sport)
  public func getName() -> [Swift.UInt8]?
  public func getNameAsString() -> Swift.String?
  public func setName(_ name: Swift.String)
  public func setName(_ name: [Swift.UInt8])
  public func getCapabilities() -> Swift.Int32?
  public func setCapabilities(_ capabilities: Swift.Int32)
  public func getSubSport() -> GimKit.SubSport?
  public func setSubSport(_ subSport: GimKit.SubSport)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public protocol DecodeDelegate : AnyObject {
  func didReadMesg(mesg: GimKit.Mesg)
  func didReadMesgDefinition(mesgDef: GimKit.MesgDefinition)
  func didReadDeveloperFieldDescription(fieldDesc: GimKit.DeveloperFieldDescription)
}
public protocol TransformType {
  associatedtype Object
  associatedtype JSON
  func transformFromJSON(_ value: Any?) -> Self.Object?
  func transformToJSON(_ value: Self.Object?) -> Self.JSON?
}
public class Field : GimKit.FieldBase {
  public var values: Swift.Array<Any>
  public var name: Swift.String?
  public var num: Swift.UInt8
  public var type: Swift.UInt8
  public var scale: Swift.Float64
  public var offset: Swift.Float64
  public var units: Swift.String?
  public var isAccumulated: Swift.Bool {
    get
  }
  public var isExpandedField: Swift.Bool
  public func getSubfield(subfieldName: Swift.String) -> GimKit.Subfield?
  public func getSubfield(subfieldIndex: Swift.UInt16) -> GimKit.Subfield?
  required public init()
  convenience public init(field: GimKit.Field?)
  @objc deinit
}
extension CBService {
  public func characteristic(with uuid: CoreBluetooth.CBUUID) -> CoreBluetooth.CBCharacteristic?
}
public struct ChopExerciseName {
  public static let CablePullThrough: Swift.UInt16
  public static let CableRotationalLift: Swift.UInt16
  public static let CableWoodchop: Swift.UInt16
  public static let CrossChopToKnee: Swift.UInt16
  public static let WeightedCrossChopToKnee: Swift.UInt16
  public static let DumbbellChop: Swift.UInt16
  public static let HalfKneelingRotation: Swift.UInt16
  public static let WeightedHalfKneelingRotation: Swift.UInt16
  public static let HalfKneelingRotationalChop: Swift.UInt16
  public static let HalfKneelingRotationalReverseChop: Swift.UInt16
  public static let HalfKneelingStabilityChop: Swift.UInt16
  public static let HalfKneelingStabilityReverseChop: Swift.UInt16
  public static let KneelingRotationalChop: Swift.UInt16
  public static let KneelingRotationalReverseChop: Swift.UInt16
  public static let KneelingStabilityChop: Swift.UInt16
  public static let KneelingWoodchopper: Swift.UInt16
  public static let MedicineBallWoodChops: Swift.UInt16
  public static let PowerSquatChops: Swift.UInt16
  public static let WeightedPowerSquatChops: Swift.UInt16
  public static let StandingRotationalChop: Swift.UInt16
  public static let StandingSplitRotationalChop: Swift.UInt16
  public static let StandingSplitRotationalReverseChop: Swift.UInt16
  public static let StandingStabilityReverseChop: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public typealias TimeRange = (earliest: Foundation.TimeInterval, latest: Foundation.TimeInterval)
extension AudioPlayer {
  public var currentItemProgression: Foundation.TimeInterval? {
    get
  }
  public var currentItemDuration: Foundation.TimeInterval? {
    get
  }
  public var currentItemSeekableRange: GimKit.TimeRange? {
    get
  }
  public var currentItemLoadedRange: GimKit.TimeRange? {
    get
  }
  public var currentItemLoadedAhead: Foundation.TimeInterval? {
    get
  }
}
open class DateTransform : GimKit.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.Double
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.Double?
  @objc deinit
}
public struct AntplusDeviceType {
  public static let Antfs: Swift.UInt8
  public static let BikePower: Swift.UInt8
  public static let EnvironmentSensorLegacy: Swift.UInt8
  public static let MultiSportSpeedDistance: Swift.UInt8
  public static let Control: Swift.UInt8
  public static let FitnessEquipment: Swift.UInt8
  public static let BloodPressure: Swift.UInt8
  public static let GeocacheNode: Swift.UInt8
  public static let LightElectricVehicle: Swift.UInt8
  public static let EnvSensor: Swift.UInt8
  public static let Racquet: Swift.UInt8
  public static let ControlHub: Swift.UInt8
  public static let MuscleOxygen: Swift.UInt8
  public static let BikeLightMain: Swift.UInt8
  public static let BikeLightShared: Swift.UInt8
  public static let Exd: Swift.UInt8
  public static let BikeRadar: Swift.UInt8
  public static let WeightScale: Swift.UInt8
  public static let HeartRate: Swift.UInt8
  public static let BikeSpeedCadence: Swift.UInt8
  public static let BikeCadence: Swift.UInt8
  public static let BikeSpeed: Swift.UInt8
  public static let StrideSpeedDistance: Swift.UInt8
  public static let Invalid: Swift.UInt8
}
@objc @_inheritsConvenienceInitializers public class AudioPlayer : ObjectiveC.NSObject {
  public var currentItem: GimKit.AudioItem? {
    get
  }
  weak public var delegate: GimKit.AudioPlayerDelegate?
  public var maximumConnectionLossTime: Foundation.TimeInterval
  public var adjustQualityAutomatically: Swift.Bool
  public var defaultQuality: GimKit.AudioQuality
  public var adjustQualityTimeInternal: Foundation.TimeInterval {
    get
    set
  }
  public var adjustQualityAfterInterruptionCount: Swift.Int {
    get
    set
  }
  public var maximumRetryCount: Swift.Int {
    get
    set
  }
  public var retryTimeout: Foundation.TimeInterval {
    get
    set
  }
  public var resumeAfterInterruption: Swift.Bool
  public var resumeAfterConnectionLoss: Swift.Bool
  public var mode: GimKit.AudioPlayerMode {
    get
    set
  }
  public var volume: Swift.Float {
    get
    set
  }
  public var rate: Swift.Float {
    get
    set
  }
  public var bufferingStrategy: GimKit.AudioPlayerBufferingStrategy {
    get
    set
  }
  public var preferredBufferDurationBeforePlayback: Foundation.TimeInterval
  public var preferredForwardBufferDuration: Foundation.TimeInterval
  public enum SeekingBehavior {
    case multiplyRate(Swift.Float)
    case changeTime(every: Foundation.TimeInterval, delta: Foundation.TimeInterval)
  }
  public var seekingBehavior: GimKit.AudioPlayer.SeekingBehavior {
    get
    set
  }
  public var state: GimKit.AudioPlayerState {
    get
  }
  public var currentQuality: GimKit.AudioQuality {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct AudioPlayerMode : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let normal: GimKit.AudioPlayerMode
  public static let shuffle: GimKit.AudioPlayerMode
  public static let `repeat`: GimKit.AudioPlayerMode
  public static let repeatAll: GimKit.AudioPlayerMode
  public typealias ArrayLiteralElement = GimKit.AudioPlayerMode
  public typealias Element = GimKit.AudioPlayerMode
  public typealias RawValue = Swift.UInt
}
public enum CameraOrientationType : Swift.UInt8 {
  case CameraOrientation0
  case CameraOrientation90
  case CameraOrientation180
  case CameraOrientation270
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class HrMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case Timestamp
    case FractionalTimestamp
    case Time256
    case FilteredBpm
    case EventTimestamp
    case EventTimestamp12
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getTimestamp() -> GimKit.FitDateTime?
  public func setTimestamp(_ timestamp: GimKit.FitDateTime)
  public func getFractionalTimestamp() -> Swift.Float32?
  public func setFractionalTimestamp(_ fractionalTimestamp: Swift.Float32)
  public func getTime256() -> Swift.Float32?
  public func setTime256(_ time256: Swift.Float32)
  public func getNumFilteredBpm() -> Swift.Int
  public func getFilteredBpm(_ index: Swift.Int) -> Swift.UInt8?
  public func setFilteredBpm(_ index: Swift.Int, _ filteredBpm: Swift.UInt8)
  public func getNumEventTimestamp() -> Swift.Int
  public func getEventTimestamp(_ index: Swift.Int) -> Swift.UInt32?
  public func setEventTimestamp(_ index: Swift.Int, _ eventTimestamp: Swift.UInt32)
  public func getNumEventTimestamp12() -> Swift.Int
  public func getEventTimestamp12(_ index: Swift.Int) -> Swift.UInt8?
  public func setEventTimestamp12(_ index: Swift.Int, _ eventTimestamp12: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public struct CharacteristicIdentifier {
  public let service: GimKit.ServiceIdentifier
  public let uuid: CoreBluetooth.CBUUID
  public init(_ cbCharacteristic: CoreBluetooth.CBCharacteristic)
  public var description: Swift.String {
    get
  }
  public init(uuid: Swift.String, service: GimKit.ServiceIdentifier)
  public init(uuid: CoreBluetooth.CBUUID, service: GimKit.ServiceIdentifier)
  public static func == (lhs: GimKit.CharacteristicIdentifier, rhs: CoreBluetooth.CBCharacteristic) -> Swift.Bool
}
extension CharacteristicIdentifier : Swift.Hashable {
  public static func == (lhs: GimKit.CharacteristicIdentifier, rhs: GimKit.CharacteristicIdentifier) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AntChannelIdMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ChannelNumber
    case DeviceType
    case DeviceNumber
    case TransmissionType
    case DeviceIndex
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getChannelNumber() -> Swift.UInt8?
  public func setChannelNumber(_ channelNumber: Swift.UInt8)
  public func getDeviceType() -> Swift.UInt8?
  public func setDeviceType(_ deviceType: Swift.UInt8)
  public func getDeviceNumber() -> Swift.UInt16?
  public func setDeviceNumber(_ deviceNumber: Swift.UInt16)
  public func getTransmissionType() -> Swift.UInt8?
  public func setTransmissionType(_ transmissionType: Swift.UInt8)
  public func getDeviceIndex() -> Swift.UInt8?
  public func setDeviceIndex(_ deviceIndex: Swift.UInt8)
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
extension GimKitManager {
  public static func combine(sendables: [GimKit.Sendable]) -> Foundation.Data
}
public enum ExdDisplayType : Swift.UInt8 {
  case Numerical
  case Simple
  case Graph
  case Bar
  case CircleGraph
  case VirtualPartner
  case Balance
  case StringList
  case String
  case SimpleDynamicIcon
  case Gauge
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct WarmUpExerciseName {
  public static let QuadrupedRocking: Swift.UInt16
  public static let NeckTilts: Swift.UInt16
  public static let AnkleCircles: Swift.UInt16
  public static let AnkleDorsiflexionWithBand: Swift.UInt16
  public static let AnkleInternalRotation: Swift.UInt16
  public static let ArmCircles: Swift.UInt16
  public static let BentOverReachToSky: Swift.UInt16
  public static let CatCamel: Swift.UInt16
  public static let ElbowToFootLunge: Swift.UInt16
  public static let ForwardAndBackwardLegSwings: Swift.UInt16
  public static let Groiners: Swift.UInt16
  public static let InvertedHamstringStretch: Swift.UInt16
  public static let LateralDuckUnder: Swift.UInt16
  public static let NeckRotations: Swift.UInt16
  public static let OppositeArmAndLegBalance: Swift.UInt16
  public static let ReachRollAndLift: Swift.UInt16
  public static let Scorpion: Swift.UInt16
  public static let ShoulderCircles: Swift.UInt16
  public static let SideToSideLegSwings: Swift.UInt16
  public static let SleeperStretch: Swift.UInt16
  public static let SlideOut: Swift.UInt16
  public static let SwissBallHipCrossover: Swift.UInt16
  public static let SwissBallReachRollAndLift: Swift.UInt16
  public static let SwissBallWindshieldWipers: Swift.UInt16
  public static let ThoracicRotation: Swift.UInt16
  public static let WalkingHighKicks: Swift.UInt16
  public static let WalkingHighKnees: Swift.UInt16
  public static let WalkingKneeHugs: Swift.UInt16
  public static let WalkingLegCradles: Swift.UInt16
  public static let Walkout: Swift.UInt16
  public static let WalkoutFromPushUpPosition: Swift.UInt16
  public static let Invalid: Swift.UInt16
}
public enum SourceType : Swift.UInt8 {
  case Ant
  case Antplus
  case Bluetooth
  case BluetoothLowEnergy
  case Wifi
  case Local
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public class ExdDataFieldConfigurationMesg : GimKit.Mesg {
  public enum FieldDefNum : Swift.UInt8 {
    case ScreenIndex
    case ConceptField
    case FieldId
    case ConceptCount
    case DisplayType
    case Title
    public init?(rawValue: Swift.UInt8)
    public typealias RawValue = Swift.UInt8
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public init()
  public init(_ mesg: GimKit.Mesg)
  public func getScreenIndex() -> Swift.UInt8?
  public func setScreenIndex(_ screenIndex: Swift.UInt8)
  public func getConceptField() -> Swift.UInt8?
  public func setConceptField(_ conceptField: Swift.UInt8)
  public func getFieldId() -> Swift.UInt8?
  public func setFieldId(_ fieldId: Swift.UInt8)
  public func getConceptCount() -> Swift.UInt8?
  public func setConceptCount(_ conceptCount: Swift.UInt8)
  public func getDisplayType() -> GimKit.ExdDisplayType?
  public func setDisplayType(_ displayType: GimKit.ExdDisplayType)
  public func getNumTitle() -> Swift.Int
  public func getTitle(_ index: Swift.Int) -> [Swift.UInt8]?
  public func getTitleAsString(_ index: Swift.Int) -> Swift.String?
  public func setTitle(_ index: Swift.Int, _ title: Swift.String)
  public func setTitle(_ index: Swift.Int, _ title: [Swift.UInt8])
  override public init(mesg: GimKit.Mesg?)
  override public init(name: Swift.String, num: Swift.UInt16)
  @objc deinit
}
public enum SegmentLeaderboardType : Swift.UInt8 {
  case Overall
  case PersonalBest
  case Connections
  case Group
  case Challenger
  case Kom
  case Qom
  case Pr
  case Goal
  case Rival
  case ClubLeader
  case Invalid
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class GimKitKeyEvent {
  @objc deinit
}
extension GimKit.MemoGlobMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MemoGlobMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MemoGlobMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExdLayout : Swift.Equatable {}
extension GimKit.ExdLayout : Swift.Hashable {}
extension GimKit.ExdLayout : Swift.RawRepresentable {}
extension GimKit.ZonesTargetMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ZonesTargetMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ZonesTargetMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.RiderPositionType : Swift.Equatable {}
extension GimKit.RiderPositionType : Swift.Hashable {}
extension GimKit.RiderPositionType : Swift.RawRepresentable {}
extension GimKit.DayOfWeek : Swift.Equatable {}
extension GimKit.DayOfWeek : Swift.Hashable {}
extension GimKit.DayOfWeek : Swift.RawRepresentable {}
extension GimKit.TimeMode : Swift.Equatable {}
extension GimKit.TimeMode : Swift.Hashable {}
extension GimKit.TimeMode : Swift.RawRepresentable {}
extension GimKit.FileIdMesg.ProductSubfield : Swift.Equatable {}
extension GimKit.FileIdMesg.ProductSubfield : Swift.Hashable {}
extension GimKit.FileIdMesg.ProductSubfield : Swift.RawRepresentable {}
extension GimKit.FileIdMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.FileIdMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.FileIdMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AntNetwork : Swift.Equatable {}
extension GimKit.AntNetwork : Swift.Hashable {}
extension GimKit.AntNetwork : Swift.RawRepresentable {}
extension GimKit.DiveGasStatus : Swift.Equatable {}
extension GimKit.DiveGasStatus : Swift.Hashable {}
extension GimKit.DiveGasStatus : Swift.RawRepresentable {}
extension GimKit.ProtocolVersion : Swift.Equatable {}
extension GimKit.ProtocolVersion : Swift.Hashable {}
extension Swift.Double : GimKit._Transformable {}
extension Swift.Dictionary : GimKit._Transformable {}
extension GimKit.ActivityMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ActivityMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ActivityMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SegmentLeaderboardEntryMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SegmentLeaderboardEntryMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SegmentLeaderboardEntryMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AntRxMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.AntRxMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.AntRxMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SegmentFileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SegmentFileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SegmentFileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.BloodPressureMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.BloodPressureMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.BloodPressureMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Profile.Types : Swift.Equatable {}
extension GimKit.Profile.Types : Swift.Hashable {}
extension GimKit.SegmentPointMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SegmentPointMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SegmentPointMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SwimStroke : Swift.Equatable {}
extension GimKit.SwimStroke : Swift.Hashable {}
extension GimKit.SwimStroke : Swift.RawRepresentable {}
extension GimKit.LapTrigger : Swift.Equatable {}
extension GimKit.LapTrigger : Swift.Hashable {}
extension GimKit.LapTrigger : Swift.RawRepresentable {}
extension GimKit.VideoClipMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.VideoClipMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.VideoClipMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.UserProfileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.UserProfileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.UserProfileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.OneDSensorCalibrationMesg.CalibrationFactorSubfield : Swift.Equatable {}
extension GimKit.OneDSensorCalibrationMesg.CalibrationFactorSubfield : Swift.Hashable {}
extension GimKit.OneDSensorCalibrationMesg.CalibrationFactorSubfield : Swift.RawRepresentable {}
extension GimKit.OneDSensorCalibrationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.OneDSensorCalibrationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.OneDSensorCalibrationMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DisplayPower : Swift.Equatable {}
extension GimKit.DisplayPower : Swift.Hashable {}
extension GimKit.DisplayPower : Swift.RawRepresentable {}
extension GimKit.GoalMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.GoalMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.GoalMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.MultipleListenOption : Swift.Equatable {}
extension GimKit.MultipleListenOption : Swift.Hashable {}
extension GimKit.MultipleListenOption : Swift.RawRepresentable {}
extension GimKit.DisplayMeasure : Swift.Equatable {}
extension GimKit.DisplayMeasure : Swift.Hashable {}
extension GimKit.DisplayMeasure : Swift.RawRepresentable {}
extension GimKit.EventType : Swift.Equatable {}
extension GimKit.EventType : Swift.Hashable {}
extension GimKit.EventType : Swift.RawRepresentable {}
extension GimKit.Activity : Swift.Equatable {}
extension GimKit.Activity : Swift.Hashable {}
extension GimKit.Activity : Swift.RawRepresentable {}
extension GimKit.GimKitDeviceType : Swift.Equatable {}
extension GimKit.GimKitDeviceType : Swift.Hashable {}
extension GimKit.GimKitDeviceType : Swift.RawRepresentable {}
extension GimKit.MonitoringMesg.CyclesSubfield : Swift.Equatable {}
extension GimKit.MonitoringMesg.CyclesSubfield : Swift.Hashable {}
extension GimKit.MonitoringMesg.CyclesSubfield : Swift.RawRepresentable {}
extension GimKit.MonitoringMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MonitoringMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MonitoringMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AnalogWatchfaceLayout : Swift.Equatable {}
extension GimKit.AnalogWatchfaceLayout : Swift.Hashable {}
extension GimKit.AnalogWatchfaceLayout : Swift.RawRepresentable {}
extension GimKit.HrZoneMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.HrZoneMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.HrZoneMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.FitnessEquipmentState : Swift.Equatable {}
extension GimKit.FitnessEquipmentState : Swift.Hashable {}
extension GimKit.FitnessEquipmentState : Swift.RawRepresentable {}
extension GimKit.Language : Swift.Equatable {}
extension GimKit.Language : Swift.Hashable {}
extension GimKit.Language : Swift.RawRepresentable {}
extension GimKit.FileCapabilitiesMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.FileCapabilitiesMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.FileCapabilitiesMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.FieldDescriptionMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.FieldDescriptionMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.FieldDescriptionMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.TurnType : Swift.Equatable {}
extension GimKit.TurnType : Swift.Hashable {}
extension GimKit.TurnType : Swift.RawRepresentable {}
extension GimKit.DeveloperDataIdMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DeveloperDataIdMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DeveloperDataIdMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ListenAction : Swift.Equatable {}
extension GimKit.ListenAction : Swift.Hashable {}
extension GimKit.SegmentLapMesg.TotalCyclesSubfield : Swift.Equatable {}
extension GimKit.SegmentLapMesg.TotalCyclesSubfield : Swift.Hashable {}
extension GimKit.SegmentLapMesg.TotalCyclesSubfield : Swift.RawRepresentable {}
extension GimKit.SegmentLapMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SegmentLapMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SegmentLapMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SegmentDeleteStatus : Swift.Equatable {}
extension GimKit.SegmentDeleteStatus : Swift.Hashable {}
extension GimKit.SegmentDeleteStatus : Swift.RawRepresentable {}
extension GimKit.CoursePointMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.CoursePointMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.CoursePointMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WeatherReport : Swift.Equatable {}
extension GimKit.WeatherReport : Swift.Hashable {}
extension GimKit.WeatherReport : Swift.RawRepresentable {}
extension GimKit.FieldCapabilitiesMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.FieldCapabilitiesMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.FieldCapabilitiesMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Intensity : Swift.Equatable {}
extension GimKit.Intensity : Swift.Hashable {}
extension GimKit.Intensity : Swift.RawRepresentable {}
extension GimKit.BodyLocation : Swift.Equatable {}
extension GimKit.BodyLocation : Swift.Hashable {}
extension GimKit.BodyLocation : Swift.RawRepresentable {}
extension GimKit.GoalSource : Swift.Equatable {}
extension GimKit.GoalSource : Swift.Hashable {}
extension GimKit.GoalSource : Swift.RawRepresentable {}
extension GimKit.FileUtils.FileType : Swift.Equatable {}
extension GimKit.FileUtils.FileType : Swift.Hashable {}
extension GimKit.FileUtils.FileType : Swift.RawRepresentable {}
extension GimKit.GyroscopeDataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.GyroscopeDataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.GyroscopeDataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SegmentSelectionType : Swift.Equatable {}
extension GimKit.SegmentSelectionType : Swift.Hashable {}
extension GimKit.SegmentSelectionType : Swift.RawRepresentable {}
extension GimKit.WeatherSevereType : Swift.Equatable {}
extension GimKit.WeatherSevereType : Swift.Hashable {}
extension GimKit.WeatherSevereType : Swift.RawRepresentable {}
extension GimKit.PowerZoneMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.PowerZoneMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.PowerZoneMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WatchfaceSettingsMesg.LayoutSubfield : Swift.Equatable {}
extension GimKit.WatchfaceSettingsMesg.LayoutSubfield : Swift.Hashable {}
extension GimKit.WatchfaceSettingsMesg.LayoutSubfield : Swift.RawRepresentable {}
extension GimKit.WatchfaceSettingsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WatchfaceSettingsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WatchfaceSettingsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.MetZoneMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MetZoneMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MetZoneMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DeviceSettingsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DeviceSettingsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DeviceSettingsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Sport : Swift.Equatable {}
extension GimKit.Sport : Swift.Hashable {}
extension GimKit.Sport : Swift.RawRepresentable {}
extension GimKit.TimestampCorrelationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.TimestampCorrelationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.TimestampCorrelationMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DateMode : Swift.Equatable {}
extension GimKit.DateMode : Swift.Hashable {}
extension GimKit.DateMode : Swift.RawRepresentable {}
extension GimKit.DiveGasMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DiveGasMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DiveGasMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ScheduleMesg.ProductSubfield : Swift.Equatable {}
extension GimKit.ScheduleMesg.ProductSubfield : Swift.Hashable {}
extension GimKit.ScheduleMesg.ProductSubfield : Swift.RawRepresentable {}
extension GimKit.ScheduleMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ScheduleMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ScheduleMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WeightScaleMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WeightScaleMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WeightScaleMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DiveAlarmType : Swift.Equatable {}
extension GimKit.DiveAlarmType : Swift.Hashable {}
extension GimKit.DiveAlarmType : Swift.RawRepresentable {}
extension GimKit.SegmentLapStatus : Swift.Equatable {}
extension GimKit.SegmentLapStatus : Swift.Hashable {}
extension GimKit.SegmentLapStatus : Swift.RawRepresentable {}
extension GimKit.SportEvent : Swift.Equatable {}
extension GimKit.SportEvent : Swift.Hashable {}
extension GimKit.SportEvent : Swift.RawRepresentable {}
extension GimKit.ExdDataUnits : Swift.Equatable {}
extension GimKit.ExdDataUnits : Swift.Hashable {}
extension GimKit.ExdDataUnits : Swift.RawRepresentable {}
extension GimKit.FitBool : Swift.Equatable {}
extension GimKit.FitBool : Swift.Hashable {}
extension GimKit.FitBool : Swift.RawRepresentable {}
extension GimKit.SetMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SetMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SetMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Autoscroll : Swift.Equatable {}
extension GimKit.Autoscroll : Swift.Hashable {}
extension GimKit.Autoscroll : Swift.RawRepresentable {}
extension GimKit.SdmProfileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SdmProfileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SdmProfileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.HrmProfileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.HrmProfileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.HrmProfileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExerciseTitleMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ExerciseTitleMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ExerciseTitleMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WaterType : Swift.Equatable {}
extension GimKit.WaterType : Swift.Hashable {}
extension GimKit.WaterType : Swift.RawRepresentable {}
extension GimKit.GoalRecurrence : Swift.Equatable {}
extension GimKit.GoalRecurrence : Swift.Hashable {}
extension GimKit.GoalRecurrence : Swift.RawRepresentable {}
extension GimKit.VideoTitleMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.VideoTitleMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.VideoTitleMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SwiftyJSONError : Swift.Equatable {}
extension GimKit.SwiftyJSONError : Swift.Hashable {}
extension GimKit.SwiftyJSONError : Swift.RawRepresentable {}
extension GimKit.`Type` : Swift.Equatable {}
extension GimKit.`Type` : Swift.Hashable {}
extension GimKit.`Type` : Swift.RawRepresentable {}
extension Swift.Int : GimKit._Transformable {}
extension Swift.String : GimKit._Transformable {}
extension Foundation.NSNumber : GimKit._Transformable {}
extension GimKit.writingOptionsKeys : Swift.Equatable {}
extension GimKit.writingOptionsKeys : Swift.Hashable {}
extension GimKit.SlaveDeviceMesg.ProductSubfield : Swift.Equatable {}
extension GimKit.SlaveDeviceMesg.ProductSubfield : Swift.Hashable {}
extension GimKit.SlaveDeviceMesg.ProductSubfield : Swift.RawRepresentable {}
extension GimKit.SlaveDeviceMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SlaveDeviceMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SlaveDeviceMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AudioQuality : Swift.Equatable {}
extension GimKit.AudioQuality : Swift.Hashable {}
extension GimKit.AudioQuality : Swift.RawRepresentable {}
extension GimKit.ActivityLevel : Swift.Equatable {}
extension GimKit.ActivityLevel : Swift.Hashable {}
extension GimKit.ActivityLevel : Swift.RawRepresentable {}
extension GimKit.SegmentIdMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SegmentIdMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SegmentIdMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExdDataConceptConfigurationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ExdDataConceptConfigurationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ExdDataConceptConfigurationMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.TotalsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.TotalsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.TotalsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.CameraEventType : Swift.Equatable {}
extension GimKit.CameraEventType : Swift.Hashable {}
extension GimKit.CameraEventType : Swift.RawRepresentable {}
extension GimKit.HrType : Swift.Equatable {}
extension GimKit.HrType : Swift.Hashable {}
extension GimKit.HrType : Swift.RawRepresentable {}
extension GimKit.DiveSummaryMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DiveSummaryMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DiveSummaryMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WktStepDuration : Swift.Equatable {}
extension GimKit.WktStepDuration : Swift.Hashable {}
extension GimKit.WktStepDuration : Swift.RawRepresentable {}
extension GimKit.VideoMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.VideoMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.VideoMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.GpsMetadataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.GpsMetadataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.GpsMetadataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ActivitySubtype : Swift.Equatable {}
extension GimKit.ActivitySubtype : Swift.Hashable {}
extension GimKit.ActivitySubtype : Swift.RawRepresentable {}
extension GimKit.TimerTrigger : Swift.Equatable {}
extension GimKit.TimerTrigger : Swift.Hashable {}
extension GimKit.TimerTrigger : Swift.RawRepresentable {}
extension GimKit.WeatherSeverity : Swift.Equatable {}
extension GimKit.WeatherSeverity : Swift.Hashable {}
extension GimKit.WeatherSeverity : Swift.RawRepresentable {}
extension GimKit.LengthType : Swift.Equatable {}
extension GimKit.LengthType : Swift.Hashable {}
extension GimKit.LengthType : Swift.RawRepresentable {}
extension GimKit.MesgCount : Swift.Equatable {}
extension GimKit.MesgCount : Swift.Hashable {}
extension GimKit.MesgCount : Swift.RawRepresentable {}
extension GimKit.PwrZoneCalc : Swift.Equatable {}
extension GimKit.PwrZoneCalc : Swift.Hashable {}
extension GimKit.PwrZoneCalc : Swift.RawRepresentable {}
extension Swift.Array : GimKit._Transformable {}
extension GimKit.WatchfaceMode : Swift.Equatable {}
extension GimKit.WatchfaceMode : Swift.Hashable {}
extension GimKit.WatchfaceMode : Swift.RawRepresentable {}
extension GimKit.CoursePoint : Swift.Equatable {}
extension GimKit.CoursePoint : Swift.Hashable {}
extension GimKit.CoursePoint : Swift.RawRepresentable {}
extension GimKit.StrokeType : Swift.Equatable {}
extension GimKit.StrokeType : Swift.Hashable {}
extension GimKit.StrokeType : Swift.RawRepresentable {}
extension GimKit.WorkoutSessionMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WorkoutSessionMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WorkoutSessionMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DiveBacklightMode : Swift.Equatable {}
extension GimKit.DiveBacklightMode : Swift.Hashable {}
extension GimKit.DiveBacklightMode : Swift.RawRepresentable {}
extension GimKit.FileCreatorMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.FileCreatorMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.FileCreatorMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.NmeaSentenceMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.NmeaSentenceMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.NmeaSentenceMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.EventMesg.DataSubfield : Swift.Equatable {}
extension GimKit.EventMesg.DataSubfield : Swift.Hashable {}
extension GimKit.EventMesg.DataSubfield : Swift.RawRepresentable {}
extension GimKit.EventMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.EventMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.EventMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.HrvMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.HrvMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.HrvMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.MesgCapabilitiesMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MesgCapabilitiesMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MesgCapabilitiesMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ActivityClass : Swift.Equatable {}
extension GimKit.ActivityClass : Swift.Hashable {}
extension GimKit.ActivityClass : Swift.RawRepresentable {}
extension GimKit.DiveAlarmMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DiveAlarmMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DiveAlarmMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.CapabilitiesMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.CapabilitiesMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.CapabilitiesMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.BikeLightNetworkConfigType : Swift.Equatable {}
extension GimKit.BikeLightNetworkConfigType : Swift.Hashable {}
extension GimKit.BikeLightNetworkConfigType : Swift.RawRepresentable {}
extension GimKit.ActivityType : Swift.Equatable {}
extension GimKit.ActivityType : Swift.Hashable {}
extension GimKit.ActivityType : Swift.RawRepresentable {}
extension GimKit.ConnectivityMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ConnectivityMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ConnectivityMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExdQualifiers : Swift.Equatable {}
extension GimKit.ExdQualifiers : Swift.Hashable {}
extension GimKit.ExdQualifiers : Swift.RawRepresentable {}
extension GimKit.WorkoutMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WorkoutMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WorkoutMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.MagnetometerDataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MagnetometerDataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MagnetometerDataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WeatherConditionsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WeatherConditionsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WeatherConditionsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.FitTimeZone : Swift.Equatable {}
extension GimKit.FitTimeZone : Swift.Hashable {}
extension GimKit.FitTimeZone : Swift.RawRepresentable {}
extension GimKit.DigitalWatchfaceLayout : Swift.Equatable {}
extension GimKit.DigitalWatchfaceLayout : Swift.Hashable {}
extension GimKit.DigitalWatchfaceLayout : Swift.RawRepresentable {}
extension GimKit.VideoFrameMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.VideoFrameMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.VideoFrameMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SportMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SportMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SportMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.CadenceZoneMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.CadenceZoneMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.CadenceZoneMesg.FieldDefNum : Swift.RawRepresentable {}
extension Swift.UInt : GimKit._Transformable {}
extension Swift.Int8 : GimKit._Transformable {}
extension Swift.Int16 : GimKit._Transformable {}
extension Swift.Int32 : GimKit._Transformable {}
extension Swift.Int64 : GimKit._Transformable {}
extension Swift.UInt8 : GimKit._Transformable {}
extension Swift.UInt16 : GimKit._Transformable {}
extension Swift.UInt32 : GimKit._Transformable {}
extension Swift.UInt64 : GimKit._Transformable {}
extension Swift.Bool : GimKit._Transformable {}
extension Swift.Float : GimKit._Transformable {}
extension Swift.Optional : GimKit._Transformable {}
extension Swift.Set : GimKit._Transformable {}
extension GimKit.SensorType : Swift.Equatable {}
extension GimKit.SensorType : Swift.Hashable {}
extension GimKit.SensorType : Swift.RawRepresentable {}
extension GimKit.AccelerometerDataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.AccelerometerDataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.AccelerometerDataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.FitFileType : Swift.Equatable {}
extension GimKit.FitFileType : Swift.Hashable {}
extension GimKit.FitFileType : Swift.RawRepresentable {}
extension GimKit.SessionMesg.TotalCyclesSubfield : Swift.Equatable {}
extension GimKit.SessionMesg.TotalCyclesSubfield : Swift.Hashable {}
extension GimKit.SessionMesg.TotalCyclesSubfield : Swift.RawRepresentable {}
extension GimKit.SessionMesg.AvgCadenceSubfield : Swift.Equatable {}
extension GimKit.SessionMesg.AvgCadenceSubfield : Swift.Hashable {}
extension GimKit.SessionMesg.AvgCadenceSubfield : Swift.RawRepresentable {}
extension GimKit.SessionMesg.MaxCadenceSubfield : Swift.Equatable {}
extension GimKit.SessionMesg.MaxCadenceSubfield : Swift.Hashable {}
extension GimKit.SessionMesg.MaxCadenceSubfield : Swift.RawRepresentable {}
extension GimKit.SessionMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SessionMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SessionMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DebugMode : Swift.Equatable {}
extension GimKit.DebugMode : Swift.Hashable {}
extension GimKit.DebugMode : Swift.RawRepresentable {}
extension GimKit.Tone : Swift.Equatable {}
extension GimKit.Tone : Swift.Hashable {}
extension GimKit.Tone : Swift.RawRepresentable {}
extension GimKit.BacklightMode : Swift.Equatable {}
extension GimKit.BacklightMode : Swift.Hashable {}
extension GimKit.BacklightMode : Swift.RawRepresentable {}
extension GimKit.AviationAttitudeMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.AviationAttitudeMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.AviationAttitudeMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.HrZoneCalc : Swift.Equatable {}
extension GimKit.HrZoneCalc : Swift.Hashable {}
extension GimKit.HrZoneCalc : Swift.RawRepresentable {}
extension GimKit.SessionTrigger : Swift.Equatable {}
extension GimKit.SessionTrigger : Swift.Hashable {}
extension GimKit.SessionTrigger : Swift.RawRepresentable {}
extension GimKit.DecodeMode : Swift.Equatable {}
extension GimKit.DecodeMode : Swift.Hashable {}
extension GimKit.BarometerDataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.BarometerDataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.BarometerDataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Schedule : Swift.Equatable {}
extension GimKit.Schedule : Swift.Hashable {}
extension GimKit.Schedule : Swift.RawRepresentable {}
extension GimKit.SoftwareMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SoftwareMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SoftwareMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AutolapTrigger : Swift.Equatable {}
extension GimKit.AutolapTrigger : Swift.Hashable {}
extension GimKit.AutolapTrigger : Swift.RawRepresentable {}
extension GimKit.LengthMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.LengthMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.LengthMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DisplayOrientation : Swift.Equatable {}
extension GimKit.DisplayOrientation : Swift.Hashable {}
extension GimKit.DisplayOrientation : Swift.RawRepresentable {}
extension GimKit.MonitoringInfoMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.MonitoringInfoMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.MonitoringInfoMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DisplayHeart : Swift.Equatable {}
extension GimKit.DisplayHeart : Swift.Hashable {}
extension GimKit.DisplayHeart : Swift.RawRepresentable {}
extension GimKit.AntTxMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.AntTxMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.AntTxMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.TrainingFileMesg.ProductSubfield : Swift.Equatable {}
extension GimKit.TrainingFileMesg.ProductSubfield : Swift.Hashable {}
extension GimKit.TrainingFileMesg.ProductSubfield : Swift.RawRepresentable {}
extension GimKit.TrainingFileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.TrainingFileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.TrainingFileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SpeedZoneMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.SpeedZoneMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.SpeedZoneMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExdScreenConfigurationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ExdScreenConfigurationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ExdScreenConfigurationMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.GimKitDeviceConnectionStatus : Swift.Equatable {}
extension GimKit.GimKitDeviceConnectionStatus : Swift.Hashable {}
extension GimKit.GimKitDeviceConnectionStatus : Swift.RawRepresentable {}
extension GimKit.DisplayPosition : Swift.Equatable {}
extension GimKit.DisplayPosition : Swift.Hashable {}
extension GimKit.DisplayPosition : Swift.RawRepresentable {}
extension GimKit.FitEvent : Swift.Equatable {}
extension GimKit.FitEvent : Swift.Hashable {}
extension GimKit.FitEvent : Swift.RawRepresentable {}
extension GimKit.GimKitDeviceConnectionError : Swift.Equatable {}
extension GimKit.GimKitDeviceConnectionError : Swift.Hashable {}
extension GimKit.GimKitDeviceConnectionError : Swift.RawRepresentable {}
extension GimKit.ObdiiDataMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ObdiiDataMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ObdiiDataMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.GimKitDiscoveryStatus : Swift.Equatable {}
extension GimKit.GimKitDiscoveryStatus : Swift.Hashable {}
extension GimKit.GimKitDiscoveryStatus : Swift.RawRepresentable {}
extension GimKit.SubSport : Swift.Equatable {}
extension GimKit.SubSport : Swift.Hashable {}
extension GimKit.SubSport : Swift.RawRepresentable {}
extension GimKit.Switch : Swift.Equatable {}
extension GimKit.Switch : Swift.Hashable {}
extension GimKit.Switch : Swift.RawRepresentable {}
extension GimKit.AttitudeStage : Swift.Equatable {}
extension GimKit.AttitudeStage : Swift.Hashable {}
extension GimKit.AttitudeStage : Swift.RawRepresentable {}
extension GimKit.DiveSettingsMesg.HeartRateSourceSubfield : Swift.Equatable {}
extension GimKit.DiveSettingsMesg.HeartRateSourceSubfield : Swift.Hashable {}
extension GimKit.DiveSettingsMesg.HeartRateSourceSubfield : Swift.RawRepresentable {}
extension GimKit.DiveSettingsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DiveSettingsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DiveSettingsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Side : Swift.Equatable {}
extension GimKit.Side : Swift.Hashable {}
extension GimKit.Side : Swift.RawRepresentable {}
extension GimKit.BpStatus : Swift.Equatable {}
extension GimKit.BpStatus : Swift.Hashable {}
extension GimKit.BpStatus : Swift.RawRepresentable {}
extension GimKit.WeatherAlertMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WeatherAlertMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WeatherAlertMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.CameraEventMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.CameraEventMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.CameraEventMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.WktStepTarget : Swift.Equatable {}
extension GimKit.WktStepTarget : Swift.Hashable {}
extension GimKit.WktStepTarget : Swift.RawRepresentable {}
extension GimKit.AutoSyncFrequency : Swift.Equatable {}
extension GimKit.AutoSyncFrequency : Swift.Hashable {}
extension GimKit.AutoSyncFrequency : Swift.RawRepresentable {}
extension GimKit.TissueModelType : Swift.Equatable {}
extension GimKit.TissueModelType : Swift.Hashable {}
extension GimKit.TissueModelType : Swift.RawRepresentable {}
extension GimKit.VideoDescriptionMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.VideoDescriptionMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.VideoDescriptionMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.LapMesg.TotalCyclesSubfield : Swift.Equatable {}
extension GimKit.LapMesg.TotalCyclesSubfield : Swift.Hashable {}
extension GimKit.LapMesg.TotalCyclesSubfield : Swift.RawRepresentable {}
extension GimKit.LapMesg.AvgCadenceSubfield : Swift.Equatable {}
extension GimKit.LapMesg.AvgCadenceSubfield : Swift.Hashable {}
extension GimKit.LapMesg.AvgCadenceSubfield : Swift.RawRepresentable {}
extension GimKit.LapMesg.MaxCadenceSubfield : Swift.Equatable {}
extension GimKit.LapMesg.MaxCadenceSubfield : Swift.Hashable {}
extension GimKit.LapMesg.MaxCadenceSubfield : Swift.RawRepresentable {}
extension GimKit.LapMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.LapMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.LapMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.FitGender : Swift.Equatable {}
extension GimKit.FitGender : Swift.Hashable {}
extension GimKit.FitGender : Swift.RawRepresentable {}
extension GimKit.ThreeDSensorCalibrationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ThreeDSensorCalibrationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ThreeDSensorCalibrationMesg.FieldDefNum : Swift.RawRepresentable {}
extension Foundation.NSString : GimKit._Transformable {}
extension Foundation.NSArray : GimKit._Transformable {}
extension Foundation.NSDictionary : GimKit._Transformable {}
extension GimKit.StressLevelMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.StressLevelMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.StressLevelMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.BikeProfileMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.BikeProfileMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.BikeProfileMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.PowerPhaseType : Swift.Equatable {}
extension GimKit.PowerPhaseType : Swift.Hashable {}
extension GimKit.PowerPhaseType : Swift.RawRepresentable {}
extension GimKit.ExdDescriptors : Swift.Equatable {}
extension GimKit.ExdDescriptors : Swift.Hashable {}
extension GimKit.ExdDescriptors : Swift.RawRepresentable {}
extension GimKit.WeatherStatus : Swift.Equatable {}
extension GimKit.WeatherStatus : Swift.Hashable {}
extension GimKit.WeatherStatus : Swift.RawRepresentable {}
extension GimKit.AudioPlayerBufferingStrategy : Swift.Equatable {}
extension GimKit.AudioPlayerBufferingStrategy : Swift.Hashable {}
extension GimKit.AudioPlayerBufferingStrategy : Swift.RawRepresentable {}
extension GimKit.WorkoutEquipment : Swift.Equatable {}
extension GimKit.WorkoutEquipment : Swift.Hashable {}
extension GimKit.WorkoutEquipment : Swift.RawRepresentable {}
extension GimKit.WorkoutStepMesg.DurationValueSubfield : Swift.Equatable {}
extension GimKit.WorkoutStepMesg.DurationValueSubfield : Swift.Hashable {}
extension GimKit.WorkoutStepMesg.DurationValueSubfield : Swift.RawRepresentable {}
extension GimKit.WorkoutStepMesg.TargetValueSubfield : Swift.Equatable {}
extension GimKit.WorkoutStepMesg.TargetValueSubfield : Swift.Hashable {}
extension GimKit.WorkoutStepMesg.TargetValueSubfield : Swift.RawRepresentable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueLowSubfield : Swift.Equatable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueLowSubfield : Swift.Hashable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueLowSubfield : Swift.RawRepresentable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueHighSubfield : Swift.Equatable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueHighSubfield : Swift.Hashable {}
extension GimKit.WorkoutStepMesg.CustomTargetValueHighSubfield : Swift.RawRepresentable {}
extension GimKit.WorkoutStepMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.WorkoutStepMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.WorkoutStepMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.DeviceInfoMesg.DeviceTypeSubfield : Swift.Equatable {}
extension GimKit.DeviceInfoMesg.DeviceTypeSubfield : Swift.Hashable {}
extension GimKit.DeviceInfoMesg.DeviceTypeSubfield : Swift.RawRepresentable {}
extension GimKit.DeviceInfoMesg.ProductSubfield : Swift.Equatable {}
extension GimKit.DeviceInfoMesg.ProductSubfield : Swift.Hashable {}
extension GimKit.DeviceInfoMesg.ProductSubfield : Swift.RawRepresentable {}
extension GimKit.DeviceInfoMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.DeviceInfoMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.DeviceInfoMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.OhrSettingsMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.OhrSettingsMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.OhrSettingsMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.RecordMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.RecordMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.RecordMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.Goal : Swift.Equatable {}
extension GimKit.Goal : Swift.Hashable {}
extension GimKit.Goal : Swift.RawRepresentable {}
extension GimKit.CourseMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.CourseMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.CourseMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.CameraOrientationType : Swift.Equatable {}
extension GimKit.CameraOrientationType : Swift.Hashable {}
extension GimKit.CameraOrientationType : Swift.RawRepresentable {}
extension GimKit.HrMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.HrMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.HrMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.AntChannelIdMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.AntChannelIdMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.AntChannelIdMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.ExdDisplayType : Swift.Equatable {}
extension GimKit.ExdDisplayType : Swift.Hashable {}
extension GimKit.ExdDisplayType : Swift.RawRepresentable {}
extension GimKit.SourceType : Swift.Equatable {}
extension GimKit.SourceType : Swift.Hashable {}
extension GimKit.SourceType : Swift.RawRepresentable {}
extension GimKit.ExdDataFieldConfigurationMesg.FieldDefNum : Swift.Equatable {}
extension GimKit.ExdDataFieldConfigurationMesg.FieldDefNum : Swift.Hashable {}
extension GimKit.ExdDataFieldConfigurationMesg.FieldDefNum : Swift.RawRepresentable {}
extension GimKit.SegmentLeaderboardType : Swift.Equatable {}
extension GimKit.SegmentLeaderboardType : Swift.Hashable {}
extension GimKit.SegmentLeaderboardType : Swift.RawRepresentable {}
